--SET log_min_messages=debug1;
--SET client_min_messages=debug1;
SET datestyle=ISO;
-- timestamp with time zone differs based on this
SET timezone='Japan';
CREATE EXTENSION influxdb_fdw;
CREATE SERVER server1 FOREIGN DATA WRAPPER influxdb_fdw OPTIONS
(dbname 'mydb', host 'http://localhost', port '8086') ;
CREATE USER MAPPING FOR CURRENT_USER SERVER server1 OPTIONS(user 'user', password 'pass');
-- import time column as timestamp and text type
IMPORT FOREIGN SCHEMA public FROM SERVER server1 INTO public OPTIONS(import_time_text 'true');
--Testcase 1:
SELECT * FROM cpu;
          time          |      time_text       |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+----------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | tag1_B |        |    100 |      2 |        | f
 2015-08-18 09:48:08+09 | 2015-08-18T00:48:08Z |        | tag2_A |        |      2 |        | 
(3 rows)

--Testcase 2:
SELECT tag1,value1 FROM cpu;
  tag1  | value1 
--------+--------
 tag1_A |    100
 tag1_B |    100
(2 rows)

--Testcase 3:
SELECT value1,time,value2 FROM cpu;
 value1 |          time          | value2 
--------+------------------------+--------
    100 | 2015-08-18 09:00:00+09 |    0.5
    100 | 2015-08-18 09:00:00+09 |      2
        | 2015-08-18 09:48:08+09 |      2
(3 rows)

--Testcase 4:
SELECT value1,time_text,value2 FROM cpu;
 value1 |      time_text       | value2 
--------+----------------------+--------
    100 | 2015-08-18T00:00:00Z |    0.5
    100 | 2015-08-18T00:00:00Z |      2
        | 2015-08-18T00:48:08Z |      2
(3 rows)

DROP FOREIGN TABLE cpu;
DROP FOREIGN TABLE t3;
DROP FOREIGN TABLE t4;
-- test EXECPT
IMPORT FOREIGN SCHEMA public EXCEPT (cpu,t3, t4) FROM SERVER server1 INTO public;
--Testcase 5:
SELECT ftoptions FROM pg_foreign_table;
 ftoptions 
-----------
(0 rows)

-- test LIMIT TO
IMPORT FOREIGN SCHEMA public LIMIT TO (cpu) FROM SERVER server1 INTO public;
--Testcase 6:
SELECT ftoptions FROM pg_foreign_table;
          ftoptions           
------------------------------
 {table=cpu,"tags=tag1,tag2"}
(1 row)

DROP FOREIGN TABLE cpu;
IMPORT FOREIGN SCHEMA public FROM SERVER server1 INTO public OPTIONS(import_time_text 'false');
--Testcase 7:
SELECT * FROM cpu;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
 2015-08-18 09:48:08+09 |        | tag2_A |        |      2 |        | 
(3 rows)

--Testcase 8:
SELECT tag1,value1 FROM cpu;
  tag1  | value1 
--------+--------
 tag1_A |    100
 tag1_B |    100
(2 rows)

--Testcase 9:
SELECT value1,time,value2 FROM cpu;
 value1 |          time          | value2 
--------+------------------------+--------
    100 | 2015-08-18 09:00:00+09 |    0.5
    100 | 2015-08-18 09:00:00+09 |      2
        | 2015-08-18 09:48:08+09 |      2
(3 rows)

--Testcase 10:
SELECT tag1 FROM cpu;
  tag1  
--------
 tag1_A
 tag1_B
(2 rows)

--Testcase 11:
\d cpu;
                            Foreign table "public.cpu"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 tag1   | text                     |           |          |         | 
 tag2   | text                     |           |          |         | 
 value1 | bigint                   |           |          |         | 
 value2 | double precision         |           |          |         | 
 value3 | text                     |           |          |         | 
 value4 | boolean                  |           |          |         | 
Server: server1
FDW options: ("table" 'cpu', tags 'tag1,tag2')

--Testcase 12:
SELECT * FROM cpu WHERE value1=100;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

--Testcase 13:
SELECT * FROM cpu WHERE value2=0.5;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

--Testcase 14:
SELECT * FROM cpu WHERE value3='str';
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

--Testcase 15:
SELECT * FROM cpu WHERE value4=true;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

--Testcase 16:
SELECT * FROM cpu WHERE NOT (value4 AND value1=100);
          time          |  tag1  | tag2 | value1 | value2 | value3 | value4 
------------------------+--------+------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_B |      |    100 |      2 |        | f
(1 row)

--Testcase 17:
SELECT * FROM cpu WHERE tag1='tag1_A';
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

EXPLAIN (verbose,costs off)
--Testcase 18:
SELECT * FROM cpu WHERE value3 IS NULL;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.cpu
   Output: "time", tag1, tag2, value1, value2, value3, value4
   Filter: (cpu.value3 IS NULL)
   InfluxDB query: SELECT "tag1", "tag2", "value1", "value2", "value3", "value4" FROM "cpu"
(4 rows)

--Testcase 19:
SELECT * FROM cpu WHERE value3 IS NULL;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
 2015-08-18 09:48:08+09 |        | tag2_A |        |      2 |        | 
(2 rows)

--Testcase 20:
SELECT * FROM cpu WHERE tag2 IS NULL;
          time          |  tag1  | tag2 | value1 | value2 | value3 | value4 
------------------------+--------+------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_B |      |    100 |      2 |        | f
(1 row)

--Testcase 21:
SELECT * FROM cpu WHERE value3 IS NOT NULL;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

--Testcase 22:
SELECT * FROM cpu WHERE tag2 IS NOT NULL;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:48:08+09 |        | tag2_A |        |      2 |        | 
(2 rows)

-- InfluxDB not support compare timestamp with OR condition
--Testcase 23:
SELECT * FROM cpu WHERE time = '2015-08-18 09:48:08+09' OR value2 = 0.5;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:48:08+09 |        | tag2_A |        |      2 |        | 
(2 rows)

-- InfluxDB not support compare timestamp with != or <>
--Testcase 24:
SELECT * FROM cpu WHERE time != '2015-08-18 09:48:08+09';
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

--Testcase 25:
SELECT * FROM cpu WHERE time <> '2015-08-18 09:48:08+09';
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

SELECT * FROM cpu WHERE time = '2015-08-18 09:48:08+09' OR value2 = 0.5;
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:48:08+09 |        | tag2_A |        |      2 |        | 
(2 rows)

-- There is inconsitency for search of missing values between tag and field
EXPLAIN (verbose,costs off)
--Testcase 26:
SELECT * FROM cpu WHERE value3 = '';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.cpu
   Output: "time", tag1, tag2, value1, value2, value3, value4
   InfluxDB query: SELECT "tag1", "tag2", "value1", "value2", "value3", "value4" FROM "cpu" WHERE (("value3" = ''))
(3 rows)

--Testcase 27:
SELECT * FROM cpu WHERE value3 = '';
 time | tag1 | tag2 | value1 | value2 | value3 | value4 
------+------+------+--------+--------+--------+--------
(0 rows)

EXPLAIN (verbose,costs off)
--Testcase 28:
SELECT * FROM cpu WHERE tag2 = '';
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.cpu
   Output: "time", tag1, tag2, value1, value2, value3, value4
   InfluxDB query: SELECT "tag1", "tag2", "value1", "value2", "value3", "value4" FROM "cpu" WHERE (("tag2" = ''))
(3 rows)

--Testcase 29:
SELECT * FROM cpu WHERE tag2 = '';
          time          |  tag1  | tag2 | value1 | value2 | value3 | value4 
------------------------+--------+------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_B |      |    100 |      2 |        | f
(1 row)

--Testcase 30:
SELECT * FROM cpu WHERE tag1 IN ('tag1_A', 'tag1_B');
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

--Testcase 31:
EXPLAIN (verbose)  SELECT * FROM cpu WHERE tag1 IN ('tag1_A', 'tag1_B');
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.cpu  (cost=10.00..6.00 rows=6 width=121)
   Output: "time", tag1, tag2, value1, value2, value3, value4
   InfluxDB query: SELECT "tag1", "tag2", "value1", "value2", "value3", "value4" FROM "cpu" WHERE ("tag1" = 'tag1_A'  OR "tag1" = 'tag1_B')
(3 rows)

-- Rows which have no tag are considered to have empty string
--Testcase 32:
SELECT * FROM cpu WHERE tag1 NOT IN ('tag1_A', 'tag1_B');
          time          | tag1 |  tag2  | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------+--------
 2015-08-18 09:48:08+09 |      | tag2_A |        |      2 |        | 
(1 row)

--Testcase 33:
EXPLAIN (verbose)  SELECT * FROM cpu WHERE tag1 NOT IN ('tag1_A', 'tag1_B');
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.cpu  (cost=10.00..558.00 rows=558 width=121)
   Output: "time", tag1, tag2, value1, value2, value3, value4
   InfluxDB query: SELECT "tag1", "tag2", "value1", "value2", "value3", "value4" FROM "cpu" WHERE ("tag1" <> 'tag1_A'  AND "tag1" <> 'tag1_B')
(3 rows)

-- test IN/NOT IN
--Testcase 34:
SELECT * FROM cpu WHERE time IN ('2015-08-18 09:48:08+09','2016-08-28 07:44:00+07');
          time          | tag1 |  tag2  | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------+--------
 2015-08-18 09:48:08+09 |      | tag2_A |        |      2 |        | 
(1 row)

--Testcase 35:
SELECT * FROM cpu WHERE time NOT IN ('2015-08-18 09:48:08+09','2016-08-28 07:44:00+07');
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

--Testcase 36:
SELECT * FROM cpu WHERE value1 NOT IN (100, 97);
 time | tag1 | tag2 | value1 | value2 | value3 | value4 
------+------+------+--------+--------+--------+--------
(0 rows)

--Testcase 37:
SELECT * FROM cpu WHERE value1 IN (100, 97);
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

--Testcase 38:
SELECT * FROM cpu WHERE value2 IN (0.5, 10.9);
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

--Testcase 39:
SELECT * FROM cpu WHERE value2 NOT IN (2, 9.7);
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

--Testcase 40:
SELECT * FROM cpu WHERE value4 NOT IN ('true', 'true');
          time          |  tag1  | tag2 | value1 | value2 | value3 | value4 
------------------------+--------+------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_B |      |    100 |      2 |        | f
(1 row)

--Testcase 41:
SELECT * FROM cpu WHERE time IN ('2015-08-18 09:48:08+09','2016-08-28 07:44:00+07');
          time          | tag1 |  tag2  | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------+--------
 2015-08-18 09:48:08+09 |      | tag2_A |        |      2 |        | 
(1 row)

SELECT * FROM cpu WHERE time NOT IN ('2015-08-18 09:48:08+09','2016-08-28 07:44:00+07');
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

SELECT * FROM cpu WHERE value1 NOT IN (100, 97);
 time | tag1 | tag2 | value1 | value2 | value3 | value4 
------+------+------+--------+--------+--------+--------
(0 rows)

SELECT * FROM cpu WHERE value1 IN (100, 97);
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

SELECT * FROM cpu WHERE value2 IN (0.5, 10.9);
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

SELECT * FROM cpu WHERE value2 NOT IN (2, 9.7);
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
(1 row)

SELECT * FROM cpu WHERE value4 NOT IN ('true', 'true');
          time          |  tag1  | tag2 | value1 | value2 | value3 | value4 
------------------------+--------+------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_B |      |    100 |      2 |        | f
(1 row)

SELECT * FROM cpu WHERE value4 IN ('f', 't');
          time          |  tag1  |  tag2  | value1 | value2 | value3 | value4 
------------------------+--------+--------+--------+--------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A | tag2_A |    100 |    0.5 | str    | t
 2015-08-18 09:00:00+09 | tag1_B |        |    100 |      2 |        | f
(2 rows)

DROP FOREIGN TABLE cpu;
CREATE FOREIGN TABLE t1(time timestamp with time zone , tag1 text, value1 integer) SERVER server1  OPTIONS (table 'cpu');
CREATE FOREIGN TABLE t2(time timestamp , tag1 text, value1 integer) SERVER server1  OPTIONS (table 'cpu');
--Testcase 42:
SELECT * FROM t1;
          time          |  tag1  | value1 
------------------------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A |    100
 2015-08-18 09:00:00+09 | tag1_B |    100
(2 rows)

--Testcase 43:
SELECT * FROM t2;
        time         |  tag1  | value1 
---------------------+--------+--------
 2015-08-18 00:00:00 | tag1_A |    100
 2015-08-18 00:00:00 | tag1_B |    100
(2 rows)

-- In following four queries, timestamp condition is added to InfluxQL as "time = '2015-08-18 00:00:00'"
--Testcase 44:
SELECT * FROM t1 WHERE time = TIMESTAMP WITH TIME ZONE '2015-08-18 09:00:00+09';
          time          |  tag1  | value1 
------------------------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A |    100
 2015-08-18 09:00:00+09 | tag1_B |    100
(2 rows)

--Testcase 45:
SELECT * FROM t1 WHERE time = TIMESTAMP '2015-08-18 00:00:00';
          time          |  tag1  | value1 
------------------------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A |    100
 2015-08-18 09:00:00+09 | tag1_B |    100
(2 rows)

--Testcase 46:
SELECT * FROM t2 WHERE time = TIMESTAMP WITH TIME ZONE '2015-08-18 09:00:00+09';
        time         |  tag1  | value1 
---------------------+--------+--------
 2015-08-18 00:00:00 | tag1_A |    100
 2015-08-18 00:00:00 | tag1_B |    100
(2 rows)

--Testcase 47:
SELECT * FROM t2 WHERE time = TIMESTAMP '2015-08-18 00:00:00';
        time         |  tag1  | value1 
---------------------+--------+--------
 2015-08-18 00:00:00 | tag1_A |    100
 2015-08-18 00:00:00 | tag1_B |    100
(2 rows)

-- pushdown now()
--Testcase 48:
SELECT * FROM t2 WHERE now() > time;
        time         |  tag1  | value1 
---------------------+--------+--------
 2015-08-18 00:00:00 | tag1_A |    100
 2015-08-18 00:00:00 | tag1_B |    100
(2 rows)

EXPLAIN (verbose) SELECT * FROM t2 WHERE now() > time;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=10.00..401.00 rows=401 width=44)
   Output: "time", tag1, value1
   InfluxDB query: SELECT "tag1", "value1" FROM "cpu" WHERE ((now() > time))
(3 rows)

--Testcase 49:
SELECT * FROM t2 WHERE time = TIMESTAMP  WITH TIME ZONE '2015-08-26 05:43:21.1+00' - interval '1 week 1 day 5 hour 43 minute 21 second 100 millisecond';
        time         |  tag1  | value1 
---------------------+--------+--------
 2015-08-18 00:00:00 | tag1_A |    100
 2015-08-18 00:00:00 | tag1_B |    100
(2 rows)

--Testcase 50:
EXPLAIN (verbose)  SELECT * FROM t2 WHERE time = TIMESTAMP  WITH TIME ZONE '2015-08-26 05:43:21.1+00' - interval '1 week 1 day 5 hour 43 minute 21 second 100 millisecond';
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=10.00..6.00 rows=6 width=44)
   Output: "time", tag1, value1
   InfluxDB query: SELECT "tag1", "value1" FROM "cpu" WHERE ((time = ('2015-08-26 05:43:21.1' - 8d5h43m21s100000u)))
(3 rows)

-- InfluxDB does not seem to support time column + interval, so below query returns empty result
-- SELECT * FROM t2 WHERE time + interval '1 week 1 day 5 hour 43 minute 21 second 100 millisecond' = TIMESTAMP  WITH TIME ZONE '2015-08-26 05:43:21.1+00';
-- EXPLAIN (verbose, costs off) 
-- SELECT * FROM t2 WHERE time + interval '1 week 1 day 5 hour 43 minute 21 second 100 millisecond' = TIMESTAMP  WITH TIME ZONE '2015-08-26 05:43:21.1+00';
-- InfluxDB does not support month or year interval, so not push down
--Testcase 51:
SELECT * FROM t2 WHERE time = TIMESTAMP '2015-09-18 00:00:00' - interval '1 months';
        time         |  tag1  | value1 
---------------------+--------+--------
 2015-08-18 00:00:00 | tag1_A |    100
 2015-08-18 00:00:00 | tag1_B |    100
(2 rows)

--Testcase 52:
EXPLAIN (verbose)  SELECT * FROM t2 WHERE time = TIMESTAMP '2015-09-18 00:00:00' - interval '1 months';
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=10.00..6.00 rows=6 width=44)
   Output: "time", tag1, value1
   InfluxDB query: SELECT "tag1", "value1" FROM "cpu" WHERE ((time = '2015-08-18 00:00:00'))
(3 rows)

--Testcase 53:
SELECT * FROM t2 WHERE value1 = ANY (ARRAY(SELECT value1 FROM t1 WHERE value1 < 1000));
        time         |  tag1  | value1 
---------------------+--------+--------
 2015-08-18 00:00:00 | tag1_A |    100
 2015-08-18 00:00:00 | tag1_B |    100
(2 rows)

ALTER SERVER server1 OPTIONS (SET dbname 'no such database');
--Testcase 54:
SELECT * FROM t1;
ERROR:  influxdb_fdw : database not found: no such database
ALTER SERVER server1 OPTIONS (SET dbname 'mydb');
--Testcase 55:
SELECT * FROM t1;
          time          |  tag1  | value1 
------------------------+--------+--------
 2015-08-18 09:00:00+09 | tag1_A |    100
 2015-08-18 09:00:00+09 | tag1_B |    100
(2 rows)

-- map time column to both timestamp and text
CREATE FOREIGN TABLE t5(t timestamp OPTIONS (column_name 'time') , tag1 text OPTIONS (column_name 'time'), v1  integer OPTIONS (column_name 'value1')) SERVER server1  OPTIONS (table 'cpu');
--Testcase 56:
SELECT * FROM t5;
          t          |         tag1         | v1  
---------------------+----------------------+-----
 2015-08-18 00:00:00 | 2015-08-18T00:00:00Z | 100
 2015-08-18 00:00:00 | 2015-08-18T00:00:00Z | 100
(2 rows)

DROP FOREIGN TABLE t1;
DROP FOREIGN TABLE t2;
DROP FOREIGN TABLE t3;
DROP FOREIGN TABLE t4;
DROP FOREIGN TABLE t5;
DROP USER MAPPING FOR CURRENT_USER SERVER server1;
DROP SERVER server1;
DROP EXTENSION influxdb_fdw CASCADE;
