-- ===================================================================
-- create FDW objects
-- ===================================================================
\set ECHO none
--Testcase 1:
CREATE EXTENSION influxdb_fdw;
--Testcase 2:
CREATE SERVER testserver1 FOREIGN DATA WRAPPER influxdb_fdw;
--Testcase 3:
CREATE SERVER influxdb_svr FOREIGN DATA WRAPPER influxdb_fdw
    OPTIONS (dbname 'postdb', :SERVER);
--Testcase 4:
CREATE SERVER influxdb_svr2 FOREIGN DATA WRAPPER influxdb_fdw
    OPTIONS (dbname 'postdb', :SERVER);
--Testcase 5:
CREATE USER MAPPING FOR public SERVER testserver1 OPTIONS (user 'value', password 'value');
--Testcase 6:
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr OPTIONS (:AUTHENTICATION);
--Testcase 7:
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr2 OPTIONS (:AUTHENTICATION);
-- ===================================================================
-- create objects used through FDW influxdb server
-- ===================================================================
--Testcase 8:
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
--Testcase 9:
CREATE SCHEMA "S 1";
--Testcase 10:
CREATE FOREIGN TABLE "S 1"."T 0" (time timestamp, tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'T0', tags 'c3', schemaless 'true');
CREATE FOREIGN TABLE "S 1".s1t0 (
	"C 1" int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	time timestamp,
	c6 varchar(10),
	c7 char(10),
	c8 text
) SERVER influxdb_svr OPTIONS (table 'T0', tags 'c3');
--Testcase 11:
CREATE FOREIGN TABLE "S 1"."T 1" (time timestamp, tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'T1', tags 'c3', schemaless 'true');
CREATE FOREIGN TABLE "S 1".s1t1 (
	"C 1" int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	time timestamp,
	c6 varchar(10),
	c7 char(10),
	c8 text
) SERVER influxdb_svr OPTIONS (table 'T1', tags 'c3');
--Testcase 12:
CREATE FOREIGN TABLE "S 1"."T 2" (tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'T2', tags 'c2', schemaless 'true');
CREATE FOREIGN TABLE "S 1".s1t2 (
	c1 int NOT NULL,
	c2 text
) SERVER influxdb_svr OPTIONS (table 'T2', tags 'c2');
--Testcase 13:
CREATE FOREIGN TABLE "S 1"."T 3" (tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'T3', tags 'c3', schemaless 'true');
CREATE FOREIGN TABLE "S 1".s1t3 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr OPTIONS (table 'T3', tags 'c3');
--Testcase 14:
CREATE FOREIGN TABLE "S 1"."T 4" (tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'T4', tags 'c3', schemaless 'true');
CREATE FOREIGN TABLE "S 1".s1t4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr OPTIONS (table 'T4', tags 'c3');
-- Disable autovacuum for these tables to avoid unexpected effects of that
--ALTER TABLE "S 1"."T 1" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 2" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 3" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 4" SET (autovacuum_enabled = 'false');
--Testcase 15:
INSERT INTO "S 1".s1t1
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1970-01-01'::timestamp + ((id % 100) || ' days')::interval,
	       id % 10,
	       id % 10,
	       'foo'::text
	FROM generate_series(1, 1000) id;
--Testcase 16:
INSERT INTO "S 1".s1t2
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 17:
INSERT INTO "S 1".s1t3
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 18:
DELETE FROM "S 1".s1t3 WHERE c1 % 2 != 0;	-- delete for outer join tests
--Testcase 19:
INSERT INTO "S 1".s1t4
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 20:
DELETE FROM "S 1".s1t4 WHERE c1 % 3 != 0;	-- delete for outer join tests
--ANALYZE "S 1"."T 1";
--ANALYZE "S 1"."T 2";
--ANALYZE "S 1"."T 3";
--ANALYZE "S 1"."T 4";
-- ===================================================================
-- create foreign tables
-- ===================================================================
--Testcase 21:
CREATE FOREIGN TABLE ft1 (time timestamp, tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (schemaless 'true');
CREATE FOREIGN TABLE ft1_nsc (
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	time timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 text
) SERVER influxdb_svr;
ALTER FOREIGN TABLE ft1_nsc DROP COLUMN c0;
--Testcase 22:
CREATE FOREIGN TABLE ft2 (time timestamp, tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (schemaless 'true');
CREATE FOREIGN TABLE ft2_nsc (
	c1 int NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	time timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 text
) SERVER influxdb_svr;
ALTER FOREIGN TABLE ft2_nsc DROP COLUMN cx;
--Testcase 23:
CREATE FOREIGN TABLE ft4 (tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'T3', tags 'c3', schemaless 'true');
CREATE FOREIGN TABLE ft4_nsc (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr OPTIONS (table 'T3', tags 'c3');
--Testcase 24:
CREATE FOREIGN TABLE ft5 (tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'T4', tags 'c3', schemaless 'true');
CREATE FOREIGN TABLE ft5_nsc (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr OPTIONS (table 'T4', tags 'c3');
--Testcase 25:
CREATE FOREIGN TABLE ft6 (tags jsonb OPTIONS(tags 'true'), fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr2 OPTIONS (table 'T4', tags 'c3', schemaless 'true');
-- ===================================================================
-- tests for validator
-- ===================================================================
-- requiressl and some other parameters are omitted because
-- valid values for them depend on configure options
ALTER SERVER testserver1 OPTIONS (
	-- use_remote_estimate 'false',
	-- updatable 'true',
	-- fdw_startup_cost '123.456',
	-- fdw_tuple_cost '0.123',
	-- service 'value',
	-- connect_timeout 'value',
	dbname 'value',
	host 'value',
	-- hostaddr 'value',
	port 'value'
	--client_encoding 'value',
	-- application_name 'value',
	--fallback_application_name 'value',
	-- keepalives 'value',
	-- keepalives_idle 'value',
	-- keepalives_interval 'value',
	-- tcp_user_timeout 'value',
	-- requiressl 'value',
	-- sslcompression 'value',
	-- sslmode 'value',
	-- sslcert 'value',
	-- sslkey 'value',
	-- sslrootcert 'value',
	-- sslcrl 'value',
	--requirepeer 'value',
	-- krbsrvname 'value',
	-- gsslib 'value',
	--replication 'value'
);
-- influxdb_fdw does not support option extensions
-- Error, invalid list syntax
--ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo; bar');
-- OK but gets a warning
--ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo, bar');
--ALTER SERVER testserver1 OPTIONS (DROP extensions);
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (DROP user, DROP password);
-- Attempt to add a valid option that's not allowed in a user mapping
--ALTER USER MAPPING FOR public SERVER testserver1
--	OPTIONS (ADD sslmode 'require');
-- But we can add valid ones fine
--ALTER USER MAPPING FOR public SERVER testserver1
--	OPTIONS (ADD sslpassword 'dummy');
-- Ensure valid options we haven't used in a user mapping yet are
-- permitted to check validation.
--ALTER USER MAPPING FOR public SERVER testserver1
--	OPTIONS (ADD sslkey 'value', ADD sslcert 'value');
ALTER FOREIGN TABLE ft1 OPTIONS (table 'T1', tags 'c3');
ALTER FOREIGN TABLE ft1_nsc OPTIONS (table 'T1', tags 'c3');
ALTER FOREIGN TABLE ft2 OPTIONS (table 'T1', tags 'c3');
ALTER FOREIGN TABLE ft2_nsc OPTIONS (table 'T1', tags 'c3');
ALTER FOREIGN TABLE ft1_nsc ALTER COLUMN c1 OPTIONS (column_name 'C 1');
ALTER FOREIGN TABLE ft2_nsc ALTER COLUMN c1 OPTIONS (column_name 'C 1');
--Testcase 26:
\det+
                                    List of foreign tables
 Schema |  Table  |    Server     |                 FDW options                  | Description 
--------+---------+---------------+----------------------------------------------+-------------
 public | ft1     | influxdb_svr  | (schemaless 'true', "table" 'T1', tags 'c3') | 
 public | ft1_nsc | influxdb_svr  | ("table" 'T1', tags 'c3')                    | 
 public | ft2     | influxdb_svr  | (schemaless 'true', "table" 'T1', tags 'c3') | 
 public | ft2_nsc | influxdb_svr  | ("table" 'T1', tags 'c3')                    | 
 public | ft4     | influxdb_svr  | ("table" 'T3', tags 'c3', schemaless 'true') | 
 public | ft4_nsc | influxdb_svr  | ("table" 'T3', tags 'c3')                    | 
 public | ft5     | influxdb_svr  | ("table" 'T4', tags 'c3', schemaless 'true') | 
 public | ft5_nsc | influxdb_svr  | ("table" 'T4', tags 'c3')                    | 
 public | ft6     | influxdb_svr2 | ("table" 'T4', tags 'c3', schemaless 'true') | 
(9 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
--Testcase 27:
SELECT tags->>'c3' c3, time FROM ft1 ORDER BY tags->>'c3', (fields->>'C 1')::int LIMIT 1;  -- should work
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

ALTER SERVER influxdb_svr OPTIONS (SET dbname 'no such database');
--Testcase 28:
SELECT tags->>'c3' c3, time FROM ft1 ORDER BY tags->>'c3', (fields->>'C 1')::int LIMIT 1;  -- should fail
ERROR:  influxdb_fdw : database not found: no such database
DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER influxdb_svr
            OPTIONS (SET dbname 'postdb')$$;
    END;
$d$;
--Testcase 29:
SELECT tags->>'c3' c3, time FROM ft1 ORDER BY tags->>'c3', (fields->>'C 1')::int LIMIT 1;  -- should work again
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

\set VERBOSITY default
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
--Testcase 30:
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY tags->>'c3', (fields->>'C 1')::int OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: ((tags ->> 'c3'::text)), (((fields ->> 'C 1'::text))::integer)
         ->  Foreign Scan on ft1
(4 rows)

--Testcase 31:
SELECT * FROM ft1 ORDER BY tags->>'c3', (fields->>'C 1')::int OFFSET 100 LIMIT 10;
           time           |      tags       |                                fields                                 
--------------------------+-----------------+-----------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00101"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "101"}
 Sat Jan 03 00:00:00 1970 | {"c3": "00102"} | {"c2": "2", "c6": "2", "c7": "2         ", "c8": "foo", "C 1": "102"}
 Sun Jan 04 00:00:00 1970 | {"c3": "00103"} | {"c2": "3", "c6": "3", "c7": "3         ", "c8": "foo", "C 1": "103"}
 Mon Jan 05 00:00:00 1970 | {"c3": "00104"} | {"c2": "4", "c6": "4", "c7": "4         ", "c8": "foo", "C 1": "104"}
 Tue Jan 06 00:00:00 1970 | {"c3": "00105"} | {"c2": "5", "c6": "5", "c7": "5         ", "c8": "foo", "C 1": "105"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00106"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "106"}
 Thu Jan 08 00:00:00 1970 | {"c3": "00107"} | {"c2": "7", "c6": "7", "c7": "7         ", "c8": "foo", "C 1": "107"}
 Fri Jan 09 00:00:00 1970 | {"c3": "00108"} | {"c2": "8", "c6": "8", "c7": "8         ", "c8": "foo", "C 1": "108"}
 Sat Jan 10 00:00:00 1970 | {"c3": "00109"} | {"c2": "9", "c6": "9", "c7": "9         ", "c8": "foo", "C 1": "109"}
 Sun Jan 11 00:00:00 1970 | {"c3": "00110"} | {"c2": "0", "c6": "0", "c7": "0         ", "c8": "foo", "C 1": "110"}
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
--Testcase 32:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.tags->>'c3', (t1.fields->>'C 1')::int, t1.tableoid OFFSET 100 LIMIT 10;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit
   Output: "time", tags, fields, ((tags ->> 'c3'::text)), (((fields ->> 'C 1'::text))::integer), tableoid
   ->  Sort
         Output: "time", tags, fields, ((tags ->> 'c3'::text)), (((fields ->> 'C 1'::text))::integer), tableoid
         Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer), t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: "time", tags, fields, (tags ->> 'c3'::text), ((fields ->> 'C 1'::text))::integer, tableoid
               InfluxDB query: SELECT * FROM "T1"
(8 rows)

--Testcase 33:
SELECT * FROM ft1 t1 ORDER BY t1.tags->>'c3', (t1.fields->>'C 1')::int, t1.tableoid OFFSET 100 LIMIT 10;
           time           |      tags       |                                fields                                 
--------------------------+-----------------+-----------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00101"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "101"}
 Sat Jan 03 00:00:00 1970 | {"c3": "00102"} | {"c2": "2", "c6": "2", "c7": "2         ", "c8": "foo", "C 1": "102"}
 Sun Jan 04 00:00:00 1970 | {"c3": "00103"} | {"c2": "3", "c6": "3", "c7": "3         ", "c8": "foo", "C 1": "103"}
 Mon Jan 05 00:00:00 1970 | {"c3": "00104"} | {"c2": "4", "c6": "4", "c7": "4         ", "c8": "foo", "C 1": "104"}
 Tue Jan 06 00:00:00 1970 | {"c3": "00105"} | {"c2": "5", "c6": "5", "c7": "5         ", "c8": "foo", "C 1": "105"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00106"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "106"}
 Thu Jan 08 00:00:00 1970 | {"c3": "00107"} | {"c2": "7", "c6": "7", "c7": "7         ", "c8": "foo", "C 1": "107"}
 Fri Jan 09 00:00:00 1970 | {"c3": "00108"} | {"c2": "8", "c6": "8", "c7": "8         ", "c8": "foo", "C 1": "108"}
 Sat Jan 10 00:00:00 1970 | {"c3": "00109"} | {"c2": "9", "c6": "9", "c7": "9         ", "c8": "foo", "C 1": "109"}
 Sun Jan 11 00:00:00 1970 | {"c3": "00110"} | {"c2": "0", "c6": "0", "c7": "0         ", "c8": "foo", "C 1": "110"}
(10 rows)

-- whole-row reference
--Testcase 34:
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.tags->>'c3', (t1.fields->>'C 1')::int OFFSET 100 LIMIT 10;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Limit
   Output: t1.*, ((tags ->> 'c3'::text)), (((fields ->> 'C 1'::text))::integer)
   ->  Sort
         Output: t1.*, ((tags ->> 'c3'::text)), (((fields ->> 'C 1'::text))::integer)
         Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.*, (tags ->> 'c3'::text), ((fields ->> 'C 1'::text))::integer
               InfluxDB query: SELECT * FROM "T1"
(8 rows)

--Testcase 35:
SELECT t1 FROM ft1 t1 ORDER BY t1.tags->>'c3', (t1.fields->>'C 1')::int OFFSET 100 LIMIT 10;
                                                                       t1                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------
 ("Fri Jan 02 00:00:00 1970","{""c3"": ""00101""}","{""c2"": ""1"", ""c6"": ""1"", ""c7"": ""1         "", ""c8"": ""foo"", ""C 1"": ""101""}")
 ("Sat Jan 03 00:00:00 1970","{""c3"": ""00102""}","{""c2"": ""2"", ""c6"": ""2"", ""c7"": ""2         "", ""c8"": ""foo"", ""C 1"": ""102""}")
 ("Sun Jan 04 00:00:00 1970","{""c3"": ""00103""}","{""c2"": ""3"", ""c6"": ""3"", ""c7"": ""3         "", ""c8"": ""foo"", ""C 1"": ""103""}")
 ("Mon Jan 05 00:00:00 1970","{""c3"": ""00104""}","{""c2"": ""4"", ""c6"": ""4"", ""c7"": ""4         "", ""c8"": ""foo"", ""C 1"": ""104""}")
 ("Tue Jan 06 00:00:00 1970","{""c3"": ""00105""}","{""c2"": ""5"", ""c6"": ""5"", ""c7"": ""5         "", ""c8"": ""foo"", ""C 1"": ""105""}")
 ("Wed Jan 07 00:00:00 1970","{""c3"": ""00106""}","{""c2"": ""6"", ""c6"": ""6"", ""c7"": ""6         "", ""c8"": ""foo"", ""C 1"": ""106""}")
 ("Thu Jan 08 00:00:00 1970","{""c3"": ""00107""}","{""c2"": ""7"", ""c6"": ""7"", ""c7"": ""7         "", ""c8"": ""foo"", ""C 1"": ""107""}")
 ("Fri Jan 09 00:00:00 1970","{""c3"": ""00108""}","{""c2"": ""8"", ""c6"": ""8"", ""c7"": ""8         "", ""c8"": ""foo"", ""C 1"": ""108""}")
 ("Sat Jan 10 00:00:00 1970","{""c3"": ""00109""}","{""c2"": ""9"", ""c6"": ""9"", ""c7"": ""9         "", ""c8"": ""foo"", ""C 1"": ""109""}")
 ("Sun Jan 11 00:00:00 1970","{""c3"": ""00110""}","{""c2"": ""0"", ""c6"": ""0"", ""c7"": ""0         "", ""c8"": ""foo"", ""C 1"": ""110""}")
(10 rows)

-- empty result
--Testcase 36:
SELECT * FROM ft1 WHERE false;
 time | tags | fields 
------+------+--------
(0 rows)

-- with WHERE clause
--Testcase 37:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = 101 AND t1.fields->>'c6' = '1' AND t1.fields->>'c7' >= '1';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   Filter: ((t1.fields ->> 'c7'::text) >= '1'::text)
   InfluxDB query: SELECT * FROM "T1" WHERE (("c6" = '1')) AND (("C 1" = 101))
(4 rows)

--Testcase 38:
SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = 101 AND t1.fields->>'c6' = '1' AND t1.fields->>'c7' >= '1';
           time           |      tags       |                                fields                                 
--------------------------+-----------------+-----------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00101"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "101"}
(1 row)

-- with FOR UPDATE/SHARE
--Testcase 39:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (fields->>'C 1')::int = 101 FOR UPDATE;
                            QUERY PLAN                            
------------------------------------------------------------------
 LockRows
   Output: "time", tags, fields, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields, t1.*
         InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 101))
(5 rows)

--Testcase 40:
SELECT * FROM ft1 t1 WHERE (fields->>'C 1')::int = 101 FOR UPDATE;
           time           |      tags       |                                fields                                 
--------------------------+-----------------+-----------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00101"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "101"}
(1 row)

--Testcase 41:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (fields->>'C 1')::int = 102 FOR SHARE;
                            QUERY PLAN                            
------------------------------------------------------------------
 LockRows
   Output: "time", tags, fields, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields, t1.*
         InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 102))
(5 rows)

--Testcase 42:
SELECT * FROM ft1 t1 WHERE (fields->>'C 1')::int = 102 FOR SHARE;
           time           |      tags       |                                fields                                 
--------------------------+-----------------+-----------------------------------------------------------------------
 Sat Jan 03 00:00:00 1970 | {"c3": "00102"} | {"c2": "2", "c6": "2", "c7": "2         ", "c8": "foo", "C 1": "102"}
(1 row)

-- aggregate
--Testcase 43:
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
--Testcase 44:
SELECT * FROM ft1 t1 WHERE t1.tags->>'c3' IN (SELECT tags->>'c3' FROM ft2 t2 WHERE (fields->>'C 1')::int <= 10) ORDER BY (fields->>'C 1')::int;
           time           |      tags       |                                fields                                
--------------------------+-----------------+----------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
 Sat Jan 03 00:00:00 1970 | {"c3": "00002"} | {"c2": "2", "c6": "2", "c7": "2         ", "c8": "foo", "C 1": "2"}
 Sun Jan 04 00:00:00 1970 | {"c3": "00003"} | {"c2": "3", "c6": "3", "c7": "3         ", "c8": "foo", "C 1": "3"}
 Mon Jan 05 00:00:00 1970 | {"c3": "00004"} | {"c2": "4", "c6": "4", "c7": "4         ", "c8": "foo", "C 1": "4"}
 Tue Jan 06 00:00:00 1970 | {"c3": "00005"} | {"c2": "5", "c6": "5", "c7": "5         ", "c8": "foo", "C 1": "5"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00006"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "6"}
 Thu Jan 08 00:00:00 1970 | {"c3": "00007"} | {"c2": "7", "c6": "7", "c7": "7         ", "c8": "foo", "C 1": "7"}
 Fri Jan 09 00:00:00 1970 | {"c3": "00008"} | {"c2": "8", "c6": "8", "c7": "8         ", "c8": "foo", "C 1": "8"}
 Sat Jan 10 00:00:00 1970 | {"c3": "00009"} | {"c2": "9", "c6": "9", "c7": "9         ", "c8": "foo", "C 1": "9"}
 Sun Jan 11 00:00:00 1970 | {"c3": "00010"} | {"c2": "0", "c6": "0", "c7": "0         ", "c8": "foo", "C 1": "10"}
(10 rows)

-- subquery+MAX
--Testcase 45:
SELECT * FROM ft1 t1 WHERE t1.tags->>'c3' = (SELECT MAX(tags->>'c3') FROM ft2 t2) ORDER BY (fields->>'C 1')::int;
           time           |      tags       |                                 fields                                 
--------------------------+-----------------+------------------------------------------------------------------------
 Thu Jan 01 00:00:00 1970 | {"c3": "01000"} | {"c2": "0", "c6": "0", "c7": "0         ", "c8": "foo", "C 1": "1000"}
(1 row)

-- used in CTE
--Testcase 46:
WITH t1 AS (SELECT * FROM ft1 WHERE (fields->>'C 1')::int <= 10) SELECT (t2.fields->>'C 1')::int c1, (t2.fields->>'c2')::int c2, t2.tags->>'c3' c3, t2.time FROM t1, ft2 t2 WHERE (t1.fields->>'C 1')::int = (t2.fields->>'C 1')::int ORDER BY (t1.fields->>'C 1')::int;
 c1 | c2 |  c3   |           time           
----+----+-------+--------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970
(10 rows)

-- fixed values
--Testcase 47:
SELECT 'fixed', NULL FROM ft1 t1 WHERE (fields->>'C 1')::int = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
SET enable_hashjoin TO false;
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 48:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 JOIN (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t2) t2 ON ((t1.c1)::int = (t2."C 1")::int) OFFSET 100 LIMIT 10;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
   ->  Merge Join
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
         Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
         ->  Sort
               Output: t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.fields, ((t1.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
         ->  Sort
               Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on "S 1"."T 1" t2
                     Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
(17 rows)

--Testcase 49:
SELECT t1.c1, t2."C 1" FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 JOIN (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t2) t2 ON ((t1.c1)::int = (t2."C 1")::int) OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 50:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t2) t2 ON ((t1.c1)::int = (t2."C 1")::int) OFFSET 100 LIMIT 10;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
   ->  Merge Left Join
         Output: (((t1.fields ->> 'C 1'::text))::integer), ((t2.fields ->> 'C 1'::text))::integer
         Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
         ->  Sort
               Output: t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.fields, ((t1.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
         ->  Sort
               Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on "S 1"."T 1" t2
                     Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
(17 rows)

--Testcase 51:
SELECT t1.c1, t2."C 1" FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t2) t2 ON ((t1.c1)::int = (t2."C 1")::int) OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between 2 foreign tables. ORDER BY clause is added to the
-- foreign join so that the other table can be joined using merge join strategy.
--Testcase 52:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1" FROM (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t1) t1 left join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t2) t2 join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t3) t3 on ((t2.c1)::int = (t3.c1)::int) on ((t3.c1)::int = (t1."C 1")::int) OFFSET 100 LIMIT 10;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer)
   ->  Merge Left Join
         Output: (((t1.fields ->> 'C 1'::text))::integer)
         Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = ((t3.fields ->> 'C 1'::text))::integer)
         ->  Sort
               Output: t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1.fields, ((t1.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
         ->  Materialize
               Output: t3.fields
               ->  Merge Join
                     Output: t3.fields
                     Merge Cond: ((((t2.fields ->> 'C 1'::text))::integer) = (((t3.fields ->> 'C 1'::text))::integer))
                     ->  Sort
                           Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
                     ->  Sort
                           Output: t3.fields, (((t3.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t3.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.fields, ((t3.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(28 rows)

--Testcase 53:
SELECT t1."C 1" FROM (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t1) t1 left join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t2) t2 join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t3) t3 on ((t2.c1)::int = (t3.c1)::int) on ((t3.c1)::int = (t1."C 1")::int) OFFSET 100 LIMIT 10;
 C 1 
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
--Testcase 54:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t1) t1 left join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t2) t2 full join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t3) t3 on ((t2.c1)::int = (t3.c1)::int) on ((t3.c1)::int = (t1."C 1")::int) OFFSET 100 LIMIT 10;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), (((t3.fields ->> 'C 1'::text))::integer)
   ->  Merge Left Join
         Output: (((t1.fields ->> 'C 1'::text))::integer), ((t2.fields ->> 'C 1'::text))::integer, ((t3.fields ->> 'C 1'::text))::integer
         Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = ((t3.fields ->> 'C 1'::text))::integer)
         ->  Sort
               Output: t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1.fields, ((t1.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
         ->  Materialize
               Output: t3.fields, t2.fields
               ->  Merge Left Join
                     Output: t3.fields, t2.fields
                     Merge Cond: ((((t3.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
                     ->  Sort
                           Output: t3.fields, (((t3.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t3.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.fields, ((t3.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
                     ->  Sort
                           Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(28 rows)

--Testcase 55:
SELECT t1."C 1", t2.c1, t3.c1 FROM (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t1) t1 left join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t2) t2 full join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t3) t3 on ((t2.c1)::int = (t3.c1)::int) on ((t3.c1)::int = (t1."C 1")::int) OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
--Testcase 56:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t1) t1 full join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t2) t2 full join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t3) t3 on ((t2.c1)::int = (t3.c1)::int) on ((t3.c1)::int = (t1."C 1")::int) OFFSET 100 LIMIT 10;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), (((t3.fields ->> 'C 1'::text))::integer)
   ->  Merge Full Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'C 1'::text))::integer, ((t3.fields ->> 'C 1'::text))::integer
         Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t3.fields ->> 'C 1'::text))::integer))
         ->  Sort
               Output: t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1.fields, ((t1.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
         ->  Sort
               Output: t2.fields, t3.fields, (((t3.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t3.fields ->> 'C 1'::text))::integer)
               ->  Merge Full Join
                     Output: t2.fields, t3.fields, ((t3.fields ->> 'C 1'::text))::integer
                     Merge Cond: ((((t2.fields ->> 'C 1'::text))::integer) = (((t3.fields ->> 'C 1'::text))::integer))
                     ->  Sort
                           Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
                     ->  Sort
                           Output: t3.fields, (((t3.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t3.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.fields, ((t3.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(29 rows)

--Testcase 57:
SELECT t1."C 1", t2.c1, t3.c1 FROM (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t1) t1 full join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t2) t2 full join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t3) t3 on ((t2.c1)::int = (t3.c1)::int) on ((t3.c1)::int = (t1."C 1")::int) OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
--Testcase 58:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = 1;         -- Var, OpExpr(b), Const
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 1))
(3 rows)

--Testcase 59:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = 100 AND (t1.fields->>'c2')::int = 0; -- BoolExpr
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 100)) AND (("c2" = 0))
(3 rows)

--Testcase 60:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int IS NULL;        -- NullTest
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   Filter: (((t1.fields ->> 'C 1'::text))::integer IS NULL)
   InfluxDB query: SELECT * FROM "T1"
(4 rows)

--Testcase 61:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int IS NOT NULL;    -- NullTest
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   Filter: (((t1.fields ->> 'C 1'::text))::integer IS NOT NULL)
   InfluxDB query: SELECT * FROM "T1"
(4 rows)

--Testcase 62:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs((t1.fields->>'C 1')::int), 0) = 1; -- FuncExpr
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   Filter: (round((abs(((t1.fields ->> 'C 1'::text))::integer))::numeric, 0) = '1'::numeric)
   InfluxDB query: SELECT * FROM "T1"
(4 rows)

--Testcase 63:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = -(t1.fields->>'C 1')::int;          -- OpExpr(l)
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = (- "C 1")))
(3 rows)

--Testcase 64:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE 1 = (t1.fields->>'C 1')::int!;           -- OpExpr(r)
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   Filter: ('1'::numeric = ((((t1.fields ->> 'C 1'::text))::integer)::bigint !))
   InfluxDB query: SELECT * FROM "T1"
(4 rows)

--Testcase 65:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE ((t1.fields->>'C 1')::int IS NOT NULL) IS DISTINCT FROM ((t1.fields->>'C 1')::int IS NOT NULL); -- DistinctExpr
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   Filter: ((((t1.fields ->> 'C 1'::text))::integer IS NOT NULL) IS DISTINCT FROM (((t1.fields ->> 'C 1'::text))::integer IS NOT NULL))
   InfluxDB query: SELECT * FROM "T1"
(4 rows)

--Testcase 66:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = ANY(ARRAY[(fields->>'c2')::int, 1, (t1.fields->>'C 1')::int + 0]); -- ScalarArrayOpExpr
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = "c2") OR ("C 1" = 1) OR ("C 1" = ("C 1" + 0)))
(3 rows)

--Testcase 67:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = (ARRAY[(t1.fields->>'C 1')::int,(fields->>'c2')::int,3])[1]; -- SubscriptingRef
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   Filter: (((t1.fields ->> 'C 1'::text))::integer = (ARRAY[((t1.fields ->> 'C 1'::text))::integer, ((t1.fields ->> 'c2'::text))::integer, 3])[1])
   InfluxDB query: SELECT * FROM "T1"
(4 rows)

--Testcase 68:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE fields->>'c6' = E'foo''s\\bar';  -- check special chars
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("c6" = 'foo''s\\bar'))
(3 rows)

--Testcase 69:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE fields->>'c8' = 'foo';  -- can't be sent to remote
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = 'foo'))
(3 rows)

-- parameterized remote path for foreign table
--Testcase 70:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T 1" a, ft2 b WHERE (a.fields->>'C 1')::int = 47 AND (b.fields->>'C 1')::int = (a.fields->>'c2')::int;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Hash Join
   Output: a."time", a.tags, a.fields, b."time", b.tags, b.fields
   Hash Cond: (((b.fields ->> 'C 1'::text))::integer = ((a.fields ->> 'c2'::text))::integer)
   ->  Foreign Scan on public.ft2 b
         Output: b."time", b.tags, b.fields
         InfluxDB query: SELECT * FROM "T1"
   ->  Hash
         Output: a."time", a.tags, a.fields
         ->  Foreign Scan on "S 1"."T 1" a
               Output: a."time", a.tags, a.fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 47))
(11 rows)

--Testcase 71:
SELECT * FROM ft2 a, ft2 b WHERE (a.fields->>'C 1')::int = 47 AND (b.fields->>'C 1')::int = (a.fields->>'c2')::int;
           time           |      tags       |                                fields                                |           time           |      tags       |                               fields                                
--------------------------+-----------------+----------------------------------------------------------------------+--------------------------+-----------------+---------------------------------------------------------------------
 Tue Feb 17 00:00:00 1970 | {"c3": "00047"} | {"c2": "7", "c6": "7", "c7": "7         ", "c8": "foo", "C 1": "47"} | Thu Jan 08 00:00:00 1970 | {"c3": "00007"} | {"c2": "7", "c6": "7", "c7": "7         ", "c8": "foo", "C 1": "7"}
(1 row)

-- check both safe and unsafe join conditions
--Testcase 72:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE (a.fields->>'c2')::int = 6 AND (b.fields->>'C 1')::int = (a.fields->>'C 1')::int AND a.fields->>'c8' = 'foo' AND b.fields->>'c7' = upper(a.fields->>'c7');
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."time", a.tags, a.fields, b."time", b.tags, b.fields
   Hash Cond: ((((b.fields ->> 'C 1'::text))::integer = ((a.fields ->> 'C 1'::text))::integer) AND ((b.fields ->> 'c7'::text) = upper((a.fields ->> 'c7'::text))))
   ->  Foreign Scan on public.ft2 b
         Output: b."time", b.tags, b.fields
         InfluxDB query: SELECT * FROM "T1"
   ->  Hash
         Output: a."time", a.tags, a.fields
         ->  Foreign Scan on public.ft2 a
               Output: a."time", a.tags, a.fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = 'foo')) AND (("c2" = 6))
(11 rows)

--Testcase 73:
SELECT * FROM ft2 a, ft2 b
WHERE (a.fields->>'c2')::int = 6 AND (b.fields->>'C 1')::int = (a.fields->>'C 1')::int AND a.fields->>'c8' = 'foo' AND b.fields->>'c7' = upper(a.fields->>'c7') ORDER BY (a.fields->>'C 1')::int;
           time           |      tags       |                                fields                                 |           time           |      tags       |                                fields                                 
--------------------------+-----------------+-----------------------------------------------------------------------+--------------------------+-----------------+-----------------------------------------------------------------------
 Wed Jan 07 00:00:00 1970 | {"c3": "00006"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "6"}   | Wed Jan 07 00:00:00 1970 | {"c3": "00006"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "6"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00016"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "16"}  | Sat Jan 17 00:00:00 1970 | {"c3": "00016"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "16"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00026"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "26"}  | Tue Jan 27 00:00:00 1970 | {"c3": "00026"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "26"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00036"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "36"}  | Fri Feb 06 00:00:00 1970 | {"c3": "00036"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "36"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00046"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "46"}  | Mon Feb 16 00:00:00 1970 | {"c3": "00046"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "46"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00056"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "56"}  | Thu Feb 26 00:00:00 1970 | {"c3": "00056"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "56"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00066"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "66"}  | Sun Mar 08 00:00:00 1970 | {"c3": "00066"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "66"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00076"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "76"}  | Wed Mar 18 00:00:00 1970 | {"c3": "00076"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "76"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00086"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "86"}  | Sat Mar 28 00:00:00 1970 | {"c3": "00086"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "86"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00096"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "96"}  | Tue Apr 07 00:00:00 1970 | {"c3": "00096"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "96"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00106"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "106"} | Wed Jan 07 00:00:00 1970 | {"c3": "00106"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "106"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00116"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "116"} | Sat Jan 17 00:00:00 1970 | {"c3": "00116"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "116"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00126"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "126"} | Tue Jan 27 00:00:00 1970 | {"c3": "00126"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "126"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00136"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "136"} | Fri Feb 06 00:00:00 1970 | {"c3": "00136"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "136"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00146"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "146"} | Mon Feb 16 00:00:00 1970 | {"c3": "00146"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "146"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00156"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "156"} | Thu Feb 26 00:00:00 1970 | {"c3": "00156"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "156"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00166"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "166"} | Sun Mar 08 00:00:00 1970 | {"c3": "00166"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "166"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00176"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "176"} | Wed Mar 18 00:00:00 1970 | {"c3": "00176"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "176"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00186"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "186"} | Sat Mar 28 00:00:00 1970 | {"c3": "00186"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "186"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00196"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "196"} | Tue Apr 07 00:00:00 1970 | {"c3": "00196"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "196"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00206"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "206"} | Wed Jan 07 00:00:00 1970 | {"c3": "00206"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "206"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00216"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "216"} | Sat Jan 17 00:00:00 1970 | {"c3": "00216"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "216"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00226"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "226"} | Tue Jan 27 00:00:00 1970 | {"c3": "00226"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "226"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00236"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "236"} | Fri Feb 06 00:00:00 1970 | {"c3": "00236"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "236"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00246"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "246"} | Mon Feb 16 00:00:00 1970 | {"c3": "00246"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "246"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00256"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "256"} | Thu Feb 26 00:00:00 1970 | {"c3": "00256"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "256"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00266"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "266"} | Sun Mar 08 00:00:00 1970 | {"c3": "00266"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "266"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00276"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "276"} | Wed Mar 18 00:00:00 1970 | {"c3": "00276"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "276"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00286"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "286"} | Sat Mar 28 00:00:00 1970 | {"c3": "00286"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "286"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00296"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "296"} | Tue Apr 07 00:00:00 1970 | {"c3": "00296"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "296"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00306"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "306"} | Wed Jan 07 00:00:00 1970 | {"c3": "00306"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "306"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00316"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "316"} | Sat Jan 17 00:00:00 1970 | {"c3": "00316"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "316"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00326"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "326"} | Tue Jan 27 00:00:00 1970 | {"c3": "00326"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "326"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00336"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "336"} | Fri Feb 06 00:00:00 1970 | {"c3": "00336"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "336"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00346"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "346"} | Mon Feb 16 00:00:00 1970 | {"c3": "00346"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "346"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00356"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "356"} | Thu Feb 26 00:00:00 1970 | {"c3": "00356"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "356"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00366"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "366"} | Sun Mar 08 00:00:00 1970 | {"c3": "00366"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "366"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00376"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "376"} | Wed Mar 18 00:00:00 1970 | {"c3": "00376"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "376"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00386"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "386"} | Sat Mar 28 00:00:00 1970 | {"c3": "00386"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "386"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00396"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "396"} | Tue Apr 07 00:00:00 1970 | {"c3": "00396"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "396"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00406"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "406"} | Wed Jan 07 00:00:00 1970 | {"c3": "00406"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "406"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00416"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "416"} | Sat Jan 17 00:00:00 1970 | {"c3": "00416"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "416"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00426"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "426"} | Tue Jan 27 00:00:00 1970 | {"c3": "00426"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "426"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00436"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "436"} | Fri Feb 06 00:00:00 1970 | {"c3": "00436"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "436"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00446"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "446"} | Mon Feb 16 00:00:00 1970 | {"c3": "00446"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "446"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00456"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "456"} | Thu Feb 26 00:00:00 1970 | {"c3": "00456"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "456"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00466"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "466"} | Sun Mar 08 00:00:00 1970 | {"c3": "00466"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "466"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00476"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "476"} | Wed Mar 18 00:00:00 1970 | {"c3": "00476"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "476"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00486"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "486"} | Sat Mar 28 00:00:00 1970 | {"c3": "00486"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "486"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00496"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "496"} | Tue Apr 07 00:00:00 1970 | {"c3": "00496"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "496"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00506"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "506"} | Wed Jan 07 00:00:00 1970 | {"c3": "00506"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "506"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00516"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "516"} | Sat Jan 17 00:00:00 1970 | {"c3": "00516"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "516"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00526"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "526"} | Tue Jan 27 00:00:00 1970 | {"c3": "00526"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "526"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00536"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "536"} | Fri Feb 06 00:00:00 1970 | {"c3": "00536"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "536"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00546"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "546"} | Mon Feb 16 00:00:00 1970 | {"c3": "00546"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "546"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00556"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "556"} | Thu Feb 26 00:00:00 1970 | {"c3": "00556"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "556"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00566"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "566"} | Sun Mar 08 00:00:00 1970 | {"c3": "00566"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "566"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00576"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "576"} | Wed Mar 18 00:00:00 1970 | {"c3": "00576"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "576"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00586"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "586"} | Sat Mar 28 00:00:00 1970 | {"c3": "00586"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "586"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00596"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "596"} | Tue Apr 07 00:00:00 1970 | {"c3": "00596"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "596"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00606"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "606"} | Wed Jan 07 00:00:00 1970 | {"c3": "00606"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "606"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00616"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "616"} | Sat Jan 17 00:00:00 1970 | {"c3": "00616"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "616"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00626"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "626"} | Tue Jan 27 00:00:00 1970 | {"c3": "00626"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "626"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00636"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "636"} | Fri Feb 06 00:00:00 1970 | {"c3": "00636"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "636"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00646"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "646"} | Mon Feb 16 00:00:00 1970 | {"c3": "00646"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "646"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00656"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "656"} | Thu Feb 26 00:00:00 1970 | {"c3": "00656"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "656"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00666"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "666"} | Sun Mar 08 00:00:00 1970 | {"c3": "00666"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "666"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00676"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "676"} | Wed Mar 18 00:00:00 1970 | {"c3": "00676"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "676"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00686"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "686"} | Sat Mar 28 00:00:00 1970 | {"c3": "00686"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "686"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00696"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "696"} | Tue Apr 07 00:00:00 1970 | {"c3": "00696"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "696"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00706"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "706"} | Wed Jan 07 00:00:00 1970 | {"c3": "00706"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "706"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00716"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "716"} | Sat Jan 17 00:00:00 1970 | {"c3": "00716"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "716"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00726"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "726"} | Tue Jan 27 00:00:00 1970 | {"c3": "00726"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "726"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00736"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "736"} | Fri Feb 06 00:00:00 1970 | {"c3": "00736"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "736"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00746"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "746"} | Mon Feb 16 00:00:00 1970 | {"c3": "00746"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "746"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00756"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "756"} | Thu Feb 26 00:00:00 1970 | {"c3": "00756"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "756"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00766"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "766"} | Sun Mar 08 00:00:00 1970 | {"c3": "00766"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "766"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00776"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "776"} | Wed Mar 18 00:00:00 1970 | {"c3": "00776"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "776"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00786"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "786"} | Sat Mar 28 00:00:00 1970 | {"c3": "00786"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "786"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00796"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "796"} | Tue Apr 07 00:00:00 1970 | {"c3": "00796"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "796"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00806"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "806"} | Wed Jan 07 00:00:00 1970 | {"c3": "00806"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "806"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00816"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "816"} | Sat Jan 17 00:00:00 1970 | {"c3": "00816"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "816"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00826"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "826"} | Tue Jan 27 00:00:00 1970 | {"c3": "00826"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "826"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00836"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "836"} | Fri Feb 06 00:00:00 1970 | {"c3": "00836"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "836"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00846"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "846"} | Mon Feb 16 00:00:00 1970 | {"c3": "00846"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "846"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00856"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "856"} | Thu Feb 26 00:00:00 1970 | {"c3": "00856"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "856"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00866"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "866"} | Sun Mar 08 00:00:00 1970 | {"c3": "00866"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "866"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00876"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "876"} | Wed Mar 18 00:00:00 1970 | {"c3": "00876"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "876"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00886"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "886"} | Sat Mar 28 00:00:00 1970 | {"c3": "00886"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "886"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00896"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "896"} | Tue Apr 07 00:00:00 1970 | {"c3": "00896"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "896"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00906"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "906"} | Wed Jan 07 00:00:00 1970 | {"c3": "00906"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "906"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00916"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "916"} | Sat Jan 17 00:00:00 1970 | {"c3": "00916"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "916"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00926"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "926"} | Tue Jan 27 00:00:00 1970 | {"c3": "00926"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "926"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00936"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "936"} | Fri Feb 06 00:00:00 1970 | {"c3": "00936"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "936"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00946"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "946"} | Mon Feb 16 00:00:00 1970 | {"c3": "00946"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "946"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00956"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "956"} | Thu Feb 26 00:00:00 1970 | {"c3": "00956"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "956"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00966"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "966"} | Sun Mar 08 00:00:00 1970 | {"c3": "00966"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "966"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00976"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "976"} | Wed Mar 18 00:00:00 1970 | {"c3": "00976"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "976"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00986"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "986"} | Sat Mar 28 00:00:00 1970 | {"c3": "00986"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "986"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00996"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "996"} | Tue Apr 07 00:00:00 1970 | {"c3": "00996"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "996"}
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
--Testcase 74:
SELECT * FROM ft1 WHERE (fields->>'C 1')::int = ANY (ARRAY(SELECT (fields->>'C 1')::int FROM ft2 WHERE (fields->>'C 1')::int < 5));
           time           |      tags       |                               fields                                
--------------------------+-----------------+---------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
 Sat Jan 03 00:00:00 1970 | {"c3": "00002"} | {"c2": "2", "c6": "2", "c7": "2         ", "c8": "foo", "C 1": "2"}
 Sun Jan 04 00:00:00 1970 | {"c3": "00003"} | {"c2": "3", "c6": "3", "c7": "3         ", "c8": "foo", "C 1": "3"}
 Mon Jan 05 00:00:00 1970 | {"c3": "00004"} | {"c2": "4", "c6": "4", "c7": "4         ", "c8": "foo", "C 1": "4"}
(4 rows)

--Testcase 75:
SELECT * FROM ft2 WHERE (fields->>'C 1')::int = ANY (ARRAY(SELECT (fields->>'C 1')::int FROM ft1 WHERE (fields->>'C 1')::int < 5));
           time           |      tags       |                               fields                                
--------------------------+-----------------+---------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
 Sat Jan 03 00:00:00 1970 | {"c3": "00002"} | {"c2": "2", "c6": "2", "c7": "2         ", "c8": "foo", "C 1": "2"}
 Sun Jan 04 00:00:00 1970 | {"c3": "00003"} | {"c2": "3", "c6": "3", "c7": "3         ", "c8": "foo", "C 1": "3"}
 Mon Jan 05 00:00:00 1970 | {"c3": "00004"} | {"c2": "4", "c6": "4", "c7": "4         ", "c8": "foo", "C 1": "4"}
(4 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
--Testcase 76:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY (ft2.fields->>'C 1')::int, random();
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: "time", tags, fields, (((fields ->> 'C 1'::text))::integer), (random())
   Sort Key: (((ft2.fields ->> 'C 1'::text))::integer), (random())
   ->  Foreign Scan on public.ft2
         Output: "time", tags, fields, ((fields ->> 'C 1'::text))::integer, random()
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

--Testcase 77:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY (ft2.fields->>'C 1')::int, ft2.tags->>'c3' collate "C";
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort
   Output: "time", tags, fields, (((fields ->> 'C 1'::text))::integer), ((tags ->> 'c3'::text COLLATE "C"))
   Sort Key: (((ft2.fields ->> 'C 1'::text))::integer), ((ft2.tags ->> 'c3'::text COLLATE "C")) COLLATE "C"
   ->  Foreign Scan on public.ft2
         Output: "time", tags, fields, ((fields ->> 'C 1'::text))::integer, (tags ->> 'c3'::text COLLATE "C")
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

-- user-defined operator/function
--Testcase 78:
CREATE FUNCTION influxdb_fdw_abs(int) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
--Testcase 79:
CREATE OPERATOR === (
    LEFTARG = int,
    RIGHTARG = int,
    PROCEDURE = int4eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
--Testcase 80:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = abs((t1.fields->>'c2')::int);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Aggregate
   Output: count((tags ->> 'c3'::text))
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = abs("c2")))
(5 rows)

--Testcase 81:
SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = abs((t1.fields->>'c2')::int);
 count 
-------
     9
(1 row)

--Testcase 82:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = (t1.fields->>'c2')::int;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Aggregate
   Output: count((tags ->> 'c3'::text))
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = "c2"))
(5 rows)

--Testcase 83:
SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = (t1.fields->>'c2')::int;
 count 
-------
     9
(1 row)

-- by default, user-defined ones cannot
--Testcase 84:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = influxdb_fdw_abs((t1.fields->>'c2')::int);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((tags ->> 'c3'::text))
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         Filter: (((t1.fields ->> 'C 1'::text))::integer = influxdb_fdw_abs(((t1.fields ->> 'c2'::text))::integer))
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

--Testcase 85:
SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = influxdb_fdw_abs((t1.fields->>'c2')::int);
 count 
-------
     9
(1 row)

--Testcase 86:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((tags ->> 'c3'::text))
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         Filter: (((t1.fields ->> 'C 1'::text))::integer === ((t1.fields ->> 'c2'::text))::integer)
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

--Testcase 87:
SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int;
 count 
-------
     9
(1 row)

-- ORDER BY can be shipped, though
--Testcase 88:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int order by (t1.fields->>'c2')::int limit 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit
   Output: "time", tags, fields, (((fields ->> 'c2'::text))::integer)
   ->  Sort
         Output: "time", tags, fields, (((fields ->> 'c2'::text))::integer)
         Sort Key: (((t1.fields ->> 'c2'::text))::integer)
         ->  Foreign Scan on public.ft1 t1
               Output: "time", tags, fields, ((fields ->> 'c2'::text))::integer
               Filter: (((t1.fields ->> 'C 1'::text))::integer === ((t1.fields ->> 'c2'::text))::integer)
               InfluxDB query: SELECT * FROM "T1"
(9 rows)

--Testcase 89:
SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int order by (t1.fields->>'c2')::int limit 1;
           time           |      tags       |                               fields                                
--------------------------+-----------------+---------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
(1 row)

-- but let's put them in an extension ...
ALTER EXTENSION influxdb_fdw ADD FUNCTION influxdb_fdw_abs(int);
ALTER EXTENSION influxdb_fdw ADD OPERATOR === (int, int);
-- ALTER SERVER loopback OPTIONS (ADD extensions 'influxdb_fdw');
-- ... now they can be shipped
--Testcase 90:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = influxdb_fdw_abs((t1.fields->>'c2')::int);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((tags ->> 'c3'::text))
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         Filter: (((t1.fields ->> 'C 1'::text))::integer = influxdb_fdw_abs(((t1.fields ->> 'c2'::text))::integer))
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

--Testcase 91:
SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = influxdb_fdw_abs((t1.fields->>'c2')::int);
 count 
-------
     9
(1 row)

--Testcase 92:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((tags ->> 'c3'::text))
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         Filter: (((t1.fields ->> 'C 1'::text))::integer === ((t1.fields ->> 'c2'::text))::integer)
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

--Testcase 93:
SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int;
 count 
-------
     9
(1 row)

-- and both ORDER BY and LIMIT can be shipped
--Testcase 94:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int order by (t1.fields->>'c2')::int limit 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit
   Output: "time", tags, fields, (((fields ->> 'c2'::text))::integer)
   ->  Sort
         Output: "time", tags, fields, (((fields ->> 'c2'::text))::integer)
         Sort Key: (((t1.fields ->> 'c2'::text))::integer)
         ->  Foreign Scan on public.ft1 t1
               Output: "time", tags, fields, ((fields ->> 'c2'::text))::integer
               Filter: (((t1.fields ->> 'C 1'::text))::integer === ((t1.fields ->> 'c2'::text))::integer)
               InfluxDB query: SELECT * FROM "T1"
(9 rows)

--Testcase 95:
SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int order by (t1.fields->>'c2')::int limit 1;
           time           |      tags       |                               fields                                
--------------------------+-----------------+---------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
(1 row)

-- This test case drop configuration when execute non-schemaless before
DROP TEXT SEARCH CONFIGURATION IF EXISTS public.custom_search;
NOTICE:  text search configuration "public.custom_search" does not exist, skipping
-- check schema-qualification of regconfig constant
CREATE TEXT SEARCH CONFIGURATION public.custom_search
  (COPY = pg_catalog.english);
EXPLAIN (VERBOSE, COSTS OFF)
SELECT (fields->>'C 1')::int c1, to_tsvector('custom_search'::regconfig, tags->>'c3') FROM ft1
WHERE (fields->>'C 1')::int = 642 AND length(to_tsvector('custom_search'::regconfig, tags->>'c3')) > 0;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: ((fields ->> 'C 1'::text))::integer, to_tsvector('custom_search'::regconfig, (tags ->> 'c3'::text))
   Filter: (length(to_tsvector('custom_search'::regconfig, (ft1.tags ->> 'c3'::text))) > 0)
   InfluxDB query: SELECT "C 1", "c3" FROM "T1" WHERE (("C 1" = 642))
(4 rows)

SELECT (fields->>'C 1')::int c1, to_tsvector('custom_search'::regconfig, tags->>'c3') FROM ft1
WHERE (fields->>'C 1')::int = 642 AND length(to_tsvector('custom_search'::regconfig, tags->>'c3')) > 0;
 c1  | to_tsvector 
-----+-------------
 642 | '00642':1
(1 row)

-- ===================================================================
-- JOIN queries
-- ===================================================================
-- join two tables
--Testcase 96:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text))
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text))
         Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
         ->  Merge Join
               Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), (t1.tags ->> 'c3'::text)
               Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
               ->  Sort
                     Output: t1.fields, t1.tags, (((t1.fields ->> 'C 1'::text))::integer)
                     Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.fields, t1.tags, ((t1.fields ->> 'C 1'::text))::integer
                           InfluxDB query: SELECT * FROM "T1"
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                           InfluxDB query: SELECT * FROM "T1"
(20 rows)

--Testcase 97:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
--Testcase 98:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t3.c1)::int = (t1.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 10 LIMIT 10;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text)), ((t1.tags ->> 'c3'::text))
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text)), ((t1.tags ->> 'c3'::text))
         Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
         ->  Merge Join
               Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text), (t1.tags ->> 'c3'::text)
               Merge Cond: ((((t2.fields ->> 'C 1'::text))::integer) = ((t1.fields ->> 'C 1'::text))::integer)
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                           InfluxDB query: SELECT * FROM "T1"
               ->  Materialize
                     Output: t1.fields, t1.tags, t3.tags, t3.fields
                     ->  Merge Join
                           Output: t1.fields, t1.tags, t3.tags, t3.fields
                           Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t3.fields ->> 'c1'::text))::integer))
                           ->  Sort
                                 Output: t1.fields, t1.tags, (((t1.fields ->> 'C 1'::text))::integer)
                                 Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
                                 ->  Foreign Scan on public.ft1 t1
                                       Output: t1.fields, t1.tags, ((t1.fields ->> 'C 1'::text))::integer
                                       InfluxDB query: SELECT * FROM "T1"
                           ->  Sort
                                 Output: t3.tags, t3.fields, (((t3.fields ->> 'c1'::text))::integer)
                                 Sort Key: (((t3.fields ->> 'c1'::text))::integer)
                                 ->  Foreign Scan on public.ft4 t3
                                       Output: t3.tags, t3.fields, ((t3.fields ->> 'c1'::text))::integer
                                       InfluxDB query: SELECT * FROM "T3"
(31 rows)

--Testcase 99:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t3.c1)::int = (t1.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
--Testcase 100:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         Sort Key: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         ->  Merge Left Join
               Output: (((t1.fields ->> 'c1'::text))::integer), ((t2.fields ->> 'c1'::text))::integer
               Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
               ->  Sort
                     Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t1.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(20 rows)

--Testcase 101:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 |   
 24 | 24
 26 |   
 28 |   
 30 | 30
 32 |   
 34 |   
 36 | 36
 38 |   
 40 |   
(10 rows)

-- left outer join three tables
--Testcase 102:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Nested Loop Left Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Join Filter: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
         ->  Nested Loop Left Join
               Output: t1.fields, t2.fields
               Join Filter: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Materialize
                     Output: t2.fields
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T1"
         ->  Materialize
               Output: t3.tags, t3.fields
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.tags, t3.fields
                     InfluxDB query: SELECT * FROM "T3"
(21 rows)

--Testcase 103:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
--Testcase 104:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, (t2.fields->>'c1')::int c1, (t2.fields->>'c2')::int c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 LEFT JOIN (SELECT * FROM ft5 t2 WHERE (fields->>'c1')::int < 10) t2 ON ((t1.c1)::int = (t2.fields->>'c1')::int) WHERE (t1.c1)::int < 10;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Left Join
   Output: (((t1.fields ->> 'c1'::text))::integer), ((t1.fields ->> 'c2'::text))::integer, ((t2.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer
   Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
   ->  Sort
         Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
         Sort Key: (((t1.fields ->> 'c1'::text))::integer)
         ->  Foreign Scan on public.ft4 t1
               Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
               InfluxDB query: SELECT * FROM "T3" WHERE (("c1" < 10))
   ->  Sort
         Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
         Sort Key: (((t2.fields ->> 'c1'::text))::integer)
         ->  Foreign Scan on public.ft5 t2
               Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
               InfluxDB query: SELECT * FROM "T4" WHERE (("c1" < 10))
(15 rows)

--Testcase 105:
SELECT t1.c1, t1.c2, (t2.fields->>'c1')::int c1, (t2.fields->>'c2')::int c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 LEFT JOIN (SELECT * FROM ft5 t2 WHERE (fields->>'c1')::int < 10) t2 ON ((t1.c1)::int = (t2.fields->>'c1')::int) WHERE (t1.c1)::int < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
--Testcase 106:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, (t2.fields->>'c1')::int c1, (t2.fields->>'c2')::int c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 LEFT JOIN (SELECT * FROM ft5 t2 WHERE (fields->>'c1')::int < 10) t2 ON ((t1.c1)::int = (t2.fields->>'c1')::int)
			WHERE ((t2.fields->>'c1')::int < 10 OR (t2.fields->>'c1')::int IS NULL) AND (t1.c1)::int < 10;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Left Join
   Output: (((t1.fields ->> 'c1'::text))::integer), ((t1.fields ->> 'c2'::text))::integer, ((t2.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer
   Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
   Filter: ((((t2.fields ->> 'c1'::text))::integer < 10) OR (((t2.fields ->> 'c1'::text))::integer IS NULL))
   ->  Sort
         Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
         Sort Key: (((t1.fields ->> 'c1'::text))::integer)
         ->  Foreign Scan on public.ft4 t1
               Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
               InfluxDB query: SELECT * FROM "T3" WHERE (("c1" < 10))
   ->  Sort
         Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
         Sort Key: (((t2.fields ->> 'c1'::text))::integer)
         ->  Foreign Scan on public.ft5 t2
               Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
               InfluxDB query: SELECT * FROM "T4" WHERE (("c1" < 10))
(16 rows)

--Testcase 107:
SELECT t1.c1, t1.c2, (t2.fields->>'c1')::int c1, (t2.fields->>'c2')::int c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 LEFT JOIN (SELECT * FROM ft5 t2 WHERE (fields->>'c1')::int < 10) t2 ON ((t1.c1)::int = (t2.fields->>'c1')::int)
			WHERE ((t2.fields->>'c1')::int < 10 OR (t2.fields->>'c1')::int IS NULL) AND (t1.c1)::int < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- right outer join
--Testcase 108:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t1) t1 RIGHT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t2.c1)::int, (t1.c1)::int OFFSET 10 LIMIT 10;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         Sort Key: (((t2.fields ->> 'c1'::text))::integer), (((t1.fields ->> 'c1'::text))::integer)
         ->  Merge Left Join
               Output: ((t1.fields ->> 'c1'::text))::integer, (((t2.fields ->> 'c1'::text))::integer)
               Merge Cond: ((((t2.fields ->> 'c1'::text))::integer) = (((t1.fields ->> 'c1'::text))::integer))
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t1.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5 t1
                           Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(20 rows)

--Testcase 109:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t1) t1 RIGHT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t2.c1)::int, (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
--Testcase 110:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 RIGHT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) RIGHT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Nested Loop Left Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Join Filter: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
         ->  Nested Loop Left Join
               Output: t3.tags, t2.fields
               Join Filter: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.tags, t3.fields
                     InfluxDB query: SELECT * FROM "T3"
               ->  Materialize
                     Output: t2.fields
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T1"
         ->  Materialize
               Output: t1.fields
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.fields
                     InfluxDB query: SELECT * FROM "T1"
(21 rows)

--Testcase 111:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 RIGHT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) RIGHT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
--Testcase 112:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 45 LIMIT 10;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         Sort Key: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         ->  Merge Full Join
               Output: ((t1.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c1'::text))::integer
               Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
               ->  Sort
                     Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t1.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(20 rows)

--Testcase 113:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
  92 |   
  94 |   
  96 | 96
  98 |   
 100 |   
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
--Testcase 114:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 FULL JOIN (SELECT (fields->>'c1')::int c1 FROM ft5 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Sort
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   Sort Key: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   ->  Hash Full Join
         Output: ((t1.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c1'::text))::integer
         Hash Cond: (((t1.fields ->> 'c1'::text))::integer = ((t2.fields ->> 'c1'::text))::integer)
         ->  Foreign Scan on public.ft4 t1
               Output: t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: t2.fields
               ->  Foreign Scan on public.ft5 t2
                     Output: t2.fields
                     InfluxDB query: SELECT * FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(14 rows)

--Testcase 115:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 FULL JOIN (SELECT (fields->>'c1')::int c1 FROM ft5 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int;
 c1 | c1 
----+----
 50 |   
 52 |   
 54 | 54
 56 |   
 58 |   
 60 | 60
    | 51
    | 57
(8 rows)

--Testcase 116:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 FULL JOIN (SELECT (fields->>'c1')::int c1 FROM ft5 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: 1
   ->  Merge Full Join
         Output: 1
         ->  Foreign Scan on public.ft4 t1
               Output: t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Materialize
               Output: t2.tags, t2.fields
               ->  Foreign Scan on public.ft5 t2
                     Output: t2.tags, t2.fields
                     InfluxDB query: SELECT * FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(12 rows)

--Testcase 117:
SELECT 1 FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 FULL JOIN (SELECT (fields->>'c1')::int c1 FROM ft5 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
--Testcase 118:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 FULL JOIN (SELECT (t2.c1)::int, (t3.c1)::int FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t2) t2 LEFT JOIN (SELECT fields->>'c1' c1, fields->>'c2' c2, tags->>'c3' c3 FROM ft5) t3 ON ((t2.c1)::int = (t3.c1)::int) WHERE ((t2.c1)::int between 50 and 60)) ss(a, b) ON ((t1.c1)::int = ss.a) ORDER BY (t1.c1)::int, ss.a, ss.b;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c1'::text))::integer)
   Sort Key: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c1'::text))::integer)
   ->  Hash Full Join
         Output: ((t1.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c1'::text))::integer, ((ft5.fields ->> 'c1'::text))::integer
         Hash Cond: (((t2.fields ->> 'c1'::text))::integer = ((t1.fields ->> 'c1'::text))::integer)
         ->  Hash Right Join
               Output: t2.fields, ft5.fields
               Hash Cond: (((ft5.fields ->> 'c1'::text))::integer = ((t2.fields ->> 'c1'::text))::integer)
               ->  Foreign Scan on public.ft5
                     Output: ft5.tags, ft5.fields
                     InfluxDB query: SELECT * FROM "T4"
               ->  Hash
                     Output: t2.fields
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: t1.fields
               ->  Foreign Scan on public.ft4 t1
                     Output: t1.fields
                     InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(22 rows)

--Testcase 119:
SELECT t1.c1, ss.a, ss.b FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 FULL JOIN (SELECT (t2.c1)::int, (t3.c1)::int FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t2) t2 LEFT JOIN (SELECT fields->>'c1' c1, fields->>'c2' c2, tags->>'c3' c3 FROM ft5) t3 ON ((t2.c1)::int = (t3.c1)::int) WHERE ((t2.c1)::int between 50 and 60)) ss(a, b) ON ((t1.c1)::int = ss.a) ORDER BY (t1.c1)::int, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
--Testcase 120:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 FULL JOIN (SELECT (t2.c1)::int, (t3.c1)::int FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 FULL JOIN (SELECT (fields->>'c1')::int c1 FROM ft5 t3 WHERE (fields->>'c1')::int between 50 and 60) t3 ON ((t2.c1)::int = (t3.c1)::int) WHERE (t2.c1)::int IS NULL OR (t2.c1)::int IS NOT NULL) ss(a, b) ON ((t1.c1)::int = ss.a) ORDER BY (t1.c1)::int, ss.a, ss.b;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((t3.fields ->> 'c1'::text))::integer)
   Sort Key: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((t3.fields ->> 'c1'::text))::integer)
   ->  Hash Full Join
         Output: ((t1.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c1'::text))::integer, ((t3.fields ->> 'c1'::text))::integer
         Hash Cond: (((t2.fields ->> 'c1'::text))::integer = ((t1.fields ->> 'c1'::text))::integer)
         ->  Hash Full Join
               Output: t2.fields, t3.fields
               Hash Cond: (((t2.fields ->> 'c1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
               Filter: ((((t2.fields ->> 'c1'::text))::integer IS NULL) OR (((t2.fields ->> 'c1'::text))::integer IS NOT NULL))
               ->  Foreign Scan on public.ft4 t2
                     Output: t2.tags, t2.fields
                     InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
               ->  Hash
                     Output: t3.fields
                     ->  Foreign Scan on public.ft5 t3
                           Output: t3.fields
                           InfluxDB query: SELECT * FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: t1.fields
               ->  Foreign Scan on public.ft4 t1
                     Output: t1.fields
                     InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(23 rows)

--Testcase 121:
SELECT t1.c1, ss.a, ss.b FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 FULL JOIN (SELECT (t2.c1)::int, (t3.c1)::int FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 FULL JOIN (SELECT (fields->>'c1')::int c1 FROM ft5 t3 WHERE (fields->>'c1')::int between 50 and 60) t3 ON ((t2.c1)::int = (t3.c1)::int) WHERE (t2.c1)::int IS NULL OR (t2.c1)::int IS NOT NULL) ss(a, b) ON ((t1.c1)::int = ss.a) ORDER BY (t1.c1)::int, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
--Testcase 122:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT (fields->>'c1')::int c1 FROM "S 1"."T 3" t1 WHERE (fields->>'c1')::int = 50) t1 INNER JOIN (SELECT (t2.c1)::int, (t3.c1)::int FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 FULL JOIN (SELECT (fields->>'c1')::int c1 FROM ft5 t3 WHERE (fields->>'c1')::int between 50 and 60) t3 ON ((t2.c1)::int = (t3.c1)::int) WHERE (t2.c1)::int IS NULL OR (t2.c1)::int IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY (t1.c1)::int, ss.a, ss.b FOR UPDATE OF t1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((t3.fields ->> 'c1'::text))::integer), t1.*, t2.*, t3.*
   ->  Sort
         Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((t3.fields ->> 'c1'::text))::integer), t1.*, t2.*, t3.*
         Sort Key: (((t2.fields ->> 'c1'::text))::integer), (((t3.fields ->> 'c1'::text))::integer)
         ->  Nested Loop
               Output: ((t1.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c1'::text))::integer, ((t3.fields ->> 'c1'::text))::integer, t1.*, t2.*, t3.*
               ->  Foreign Scan on "S 1"."T 3" t1
                     Output: t1.fields, t1.*
                     InfluxDB query: SELECT * FROM "T3" WHERE (("c1" = 50))
               ->  Hash Full Join
                     Output: t2.fields, t2.*, t3.fields, t3.*
                     Hash Cond: (((t2.fields ->> 'c1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
                     Filter: ((((t2.fields ->> 'c1'::text))::integer IS NULL) OR (((t2.fields ->> 'c1'::text))::integer IS NOT NULL))
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.fields, t2.*
                           InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
                     ->  Hash
                           Output: t3.fields, t3.*
                           ->  Foreign Scan on public.ft5 t3
                                 Output: t3.fields, t3.*
                                 InfluxDB query: SELECT * FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(22 rows)

--Testcase 123:
SELECT t1.c1, ss.a, ss.b FROM (SELECT (fields->>'c1')::int c1 FROM "S 1"."T 3" t1 WHERE (fields->>'c1')::int = 50) t1 INNER JOIN (SELECT (t2.c1)::int, (t3.c1)::int FROM (SELECT (fields->>'c1')::int c1 FROM ft4 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 FULL JOIN (SELECT (fields->>'c1')::int c1 FROM ft5 t3 WHERE (fields->>'c1')::int between 50 and 60) t3 ON ((t2.c1)::int = (t3.c1)::int) WHERE (t2.c1)::int IS NULL OR (t2.c1)::int IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY (t1.c1)::int, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 50 | 52 |   
 50 | 54 | 54
 50 | 56 |   
 50 | 58 |   
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
--Testcase 124:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 INNER JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int + 1 and (t1.c1)::int between 50 and 60) FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int, (t3.c1)::int LIMIT 10;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((t3.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((t3.fields ->> 'c1'::text))::integer)
         Sort Key: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer), (((t3.fields ->> 'c1'::text))::integer)
         ->  Hash Full Join
               Output: ((t1.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c1'::text))::integer, ((t3.fields ->> 'c1'::text))::integer
               Hash Cond: (((t2.fields ->> 'c1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
               ->  Hash Join
                     Output: t1.fields, t2.fields
                     Hash Cond: ((((t2.fields ->> 'c1'::text))::integer + 1) = ((t1.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.tags, t2.fields
                           InfluxDB query: SELECT * FROM "T4"
                     ->  Hash
                           Output: t1.fields
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.fields
                                 InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
               ->  Hash
                     Output: t3.fields
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.fields
                           InfluxDB query: SELECT * FROM "T3"
(24 rows)

--Testcase 125:
SELECT t1.c1, t2.c1, t3.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 INNER JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int + 1 and (t1.c1)::int between 50 and 60) FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int, (t3.c1)::int LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 |   
 58 | 57 |   
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
--Testcase 126:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 FULL JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Hash Full Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Hash Cond: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
         ->  Hash Full Join
               Output: t1.fields, t2.fields
               Hash Cond: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Hash
                     Output: t2.fields
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T1"
         ->  Hash
               Output: t3.tags, t3.fields
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.tags, t3.fields
                     InfluxDB query: SELECT * FROM "T3"
(21 rows)

--Testcase 127:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 FULL JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + right outer join
--Testcase 128:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 FULL JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) RIGHT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Nested Loop Left Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Join Filter: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
         ->  Nested Loop Left Join
               Output: t3.tags, t2.fields
               Join Filter: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.tags, t3.fields
                     InfluxDB query: SELECT * FROM "T3"
               ->  Materialize
                     Output: t2.fields
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T1"
         ->  Materialize
               Output: t1.fields
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.fields
                     InfluxDB query: SELECT * FROM "T1"
(21 rows)

--Testcase 129:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 FULL JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) RIGHT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
--Testcase 130:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 RIGHT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Hash Full Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Hash Cond: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
         ->  Nested Loop Left Join
               Output: t2.fields, t1.fields
               Join Filter: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2."time", t2.tags, t2.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Materialize
                     Output: t1.fields
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.fields
                           InfluxDB query: SELECT * FROM "T1"
         ->  Hash
               Output: t3.tags, t3.fields
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.tags, t3.fields
                     InfluxDB query: SELECT * FROM "T3"
(21 rows)

--Testcase 131:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 RIGHT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + left outer join
--Testcase 132:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 FULL JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Nested Loop Left Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Join Filter: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
         ->  Hash Full Join
               Output: t1.fields, t2.fields
               Hash Cond: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Hash
                     Output: t2.fields
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T1"
         ->  Materialize
               Output: t3.tags, t3.fields
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.tags, t3.fields
                     InfluxDB query: SELECT * FROM "T3"
(21 rows)

--Testcase 133:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 FULL JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + full outer join
--Testcase 134:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Hash Full Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Hash Cond: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
         ->  Nested Loop Left Join
               Output: t1.fields, t2.fields
               Join Filter: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Materialize
                     Output: t2.fields
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T1"
         ->  Hash
               Output: t3.tags, t3.fields
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.tags, t3.fields
                     InfluxDB query: SELECT * FROM "T3"
(21 rows)

--Testcase 135:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- right outer join + left outer join
--Testcase 136:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 RIGHT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Nested Loop Left Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Join Filter: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
         ->  Nested Loop Left Join
               Output: t2.fields, t3.tags
               Join Filter: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2."time", t2.tags, t2.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Materialize
                     Output: t3.tags, t3.fields
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.tags, t3.fields
                           InfluxDB query: SELECT * FROM "T3"
         ->  Materialize
               Output: t1.fields
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.fields
                     InfluxDB query: SELECT * FROM "T1"
(21 rows)

--Testcase 137:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 RIGHT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + right outer join
--Testcase 138:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) RIGHT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t3.tags ->> 'c3'::text))
   ->  Hash Right Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t3.tags ->> 'c3'::text)
         Hash Cond: (((t2.fields ->> 'C 1'::text))::integer = ((t3.fields ->> 'c1'::text))::integer)
         ->  Nested Loop
               Output: t1.fields, t2.fields
               Join Filter: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Materialize
                     Output: t2.fields
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T1"
         ->  Hash
               Output: t3.tags, t3.fields
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.tags, t3.fields
                     InfluxDB query: SELECT * FROM "T3"
(21 rows)

--Testcase 139:
SELECT t1.c1, t2.c2, t3.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) RIGHT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t3) t3 ON ((t2.c1)::int = (t3.c1)::int) ORDER BY (t1.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
--Testcase 140:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) WHERE ((t1.c1)::int = (t2.c1)::int OR (t1.c1)::int IS NULL) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         Sort Key: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         ->  Merge Full Join
               Output: ((t1.fields ->> 'c1'::text))::integer, ((t2.fields ->> 'c1'::text))::integer
               Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
               Filter: ((((t1.fields ->> 'c1'::text))::integer = ((t2.fields ->> 'c1'::text))::integer) OR (((t1.fields ->> 'c1'::text))::integer IS NULL))
               ->  Sort
                     Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t1.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(21 rows)

--Testcase 141:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 FULL JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) WHERE ((t1.c1)::int = (t2.c1)::int OR (t1.c1)::int IS NULL) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
--Testcase 142:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 FULL JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) WHERE influxdb_fdw_abs((t1.c1)::int) > 0 OFFSET 10 LIMIT 10;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), ((t1.tags ->> 'c3'::text))
   ->  Hash Full Join
         Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t1.tags ->> 'c3'::text)
         Hash Cond: (((t2.fields ->> 'C 1'::text))::integer = ((t1.fields ->> 'C 1'::text))::integer)
         Filter: (influxdb_fdw_abs(((t1.fields ->> 'C 1'::text))::integer) > 0)
         ->  Foreign Scan on public.ft2 t2
               Output: t2."time", t2.tags, t2.fields
               InfluxDB query: SELECT * FROM "T1"
         ->  Hash
               Output: t1.fields, t1.tags
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.fields, t1.tags
                     InfluxDB query: SELECT * FROM "T1"
(14 rows)

-- skip, influxdb does not have option 'extensions'
-- ALTER SERVER influxdb_svr OPTIONS (DROP extensions);
-- full outer join + WHERE clause with shippable extensions not set
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE influxdb_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
-- ALTER SERVER loopback OPTIONS (ADD extensions 'influxdb_fdw');
-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
--Testcase 143:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
   ->  LockRows
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
         ->  Sort
               Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
               Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
               ->  Merge Join
                     Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), (t1.tags ->> 'c3'::text), t1.*, t2.*
                     Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
                     ->  Sort
                           Output: t1.fields, t1.tags, t1.*, (((t1.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.fields, t1.tags, t1.*, ((t1.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
                     ->  Sort
                           Output: t2.fields, t2.*, (((t2.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.fields, t2.*, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(22 rows)

--Testcase 144:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 145:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10 FOR UPDATE;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
   ->  LockRows
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
         ->  Sort
               Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
               Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
               ->  Merge Join
                     Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), (t1.tags ->> 'c3'::text), t1.*, t2.*
                     Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
                     ->  Sort
                           Output: t1.fields, t1.tags, t1.*, (((t1.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.fields, t1.tags, t1.*, ((t1.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
                     ->  Sort
                           Output: t2.fields, t2.*, (((t2.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.fields, t2.*, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(22 rows)

--Testcase 146:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
--Testcase 147:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
   ->  LockRows
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
         ->  Sort
               Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
               Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
               ->  Merge Join
                     Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), (t1.tags ->> 'c3'::text), t1.*, t2.*
                     Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
                     ->  Sort
                           Output: t1.fields, t1.tags, t1.*, (((t1.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.fields, t1.tags, t1.*, ((t1.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
                     ->  Sort
                           Output: t2.fields, t2.*, (((t2.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.fields, t2.*, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(22 rows)

--Testcase 148:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 149:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10 FOR SHARE;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
   ->  LockRows
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
         ->  Sort
               Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text)), t1.*, t2.*
               Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
               ->  Merge Join
                     Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), (t1.tags ->> 'c3'::text), t1.*, t2.*
                     Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
                     ->  Sort
                           Output: t1.fields, t1.tags, t1.*, (((t1.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.fields, t1.tags, t1.*, ((t1.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
                     ->  Sort
                           Output: t2.fields, t2.*, (((t2.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.fields, t2.*, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(22 rows)

--Testcase 150:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
--Testcase 151:
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
ERROR:  syntax error at or near "MATERIALIZED"
LINE 2: WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1....
                                     ^
--Testcase 152:
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
ERROR:  syntax error at or near "MATERIALIZED"
LINE 1: WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1....
                                     ^
-- ctid with whole-row reference
--Testcase 153:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM (SELECT ctid, fields->>'C 1' c1, fields->>'c2' c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10;


 Limit
   Output: t1.ctid, (ROW(t1.ctid, (t1.fields ->> 'C 1'::text), (t1.fields ->> 'c2'::text), (t1.tags ->> 'c3'::text), (t1.fields ->> 'c4'::text), (t1.fields ->> 'c5'::text), (t1.fields ->> 'c6'::text), (t1.fields ->> 'c7'::text), (t1.fields ->> 'c8'::text))), (ROW(((t2.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t2.tags ->> 'c3'::text), (t2.fields ->> 'c4'::text), (t2.fields ->> 'c5'::text), (t2.fields ->> 'c6'::text), (t2.fields ->> 'c7'::text), (t2.fields ->> 'c8'::text))), ((t1.fields ->> 'C 1'::text)), ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
   ->  Result
         Output: t1.ctid, (ROW(t1.ctid, (t1.fields ->> 'C 1'::text), (t1.fields ->> 'c2'::text), (t1.tags ->> 'c3'::text), (t1.fields ->> 'c4'::text), (t1.fields ->> 'c5'::text), (t1.fields ->> 'c6'::text), (t1.fields ->> 'c7'::text), (t1.fields ->> 'c8'::text))), ROW(((t2.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'c2'::text))::integer, (t2.tags ->> 'c3'::text), (t2.fields ->> 'c4'::text), (t2.fields ->> 'c5'::text), (t2.fields ->> 'c6'::text), (t2.fields ->> 'c7'::text), (t2.fields ->> 'c8'::text)), ((t1.fields ->> 'C 1'::text)), ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
         ->  Sort
               Output: t1.ctid, (ROW(t1.ctid, (t1.fields ->> 'C 1'::text), (t1.fields ->> 'c2'::text), (t1.tags ->> 'c3'::text), (t1.fields ->> 'c4'::text), (t1.fields ->> 'c5'::text), (t1.fields ->> 'c6'::text), (t1.fields ->> 'c7'::text), (t1.fields ->> 'c8'::text))), ((t1.fields ->> 'C 1'::text)), ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer), t2.fields, t2.tags
               Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
               ->  Merge Join
                     Output: t1.ctid, ROW(t1.ctid, (t1.fields ->> 'C 1'::text), (t1.fields ->> 'c2'::text), (t1.tags ->> 'c3'::text), (t1.fields ->> 'c4'::text), (t1.fields ->> 'c5'::text), (t1.fields ->> 'c6'::text), (t1.fields ->> 'c7'::text), (t1.fields ->> 'c8'::text)), (t1.fields ->> 'C 1'::text), (t1.tags ->> 'c3'::text), (((t1.fields ->> 'C 1'::text))::integer), t2.fields, t2.tags
                     Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
                     ->  Sort
                           Output: t1.ctid, t1.fields, t1.tags, (((t1.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.ctid, t1.fields, t1.tags, ((t1.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
                     ->  Sort
                           Output: t2.fields, t2.tags, (((t2.fields ->> 'C 1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.fields, t2.tags, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(22 rows)

-- SEMI JOIN, not pushed down
--Testcase 154:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT (t1.fields->>'C 1')::int c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE (t1.fields->>'C 1')::int = (t2.fields->>'C 1')::int) ORDER BY (t1.fields->>'C 1')::int OFFSET 100 LIMIT 10;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer)
         Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
         ->  Hash Join
               Output: ((t1.fields ->> 'C 1'::text))::integer
               Inner Unique: true
               Hash Cond: (((t1.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Hash
                     Output: t2.fields
                     ->  HashAggregate
                           Output: t2.fields
                           Group Key: ((t2.fields ->> 'C 1'::text))::integer
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T1"
(20 rows)

--Testcase 155:
SELECT (t1.fields->>'C 1')::int c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE (t1.fields->>'C 1')::int = (t2.fields->>'C 1')::int) ORDER BY (t1.fields->>'C 1')::int OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
--Testcase 156:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT (t1.fields->>'C 1')::int c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE (t1.fields->>'C 1')::int = (t2.fields->>'c2')::int) ORDER BY (t1.fields->>'C 1')::int OFFSET 100 LIMIT 10;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer)
   ->  Merge Anti Join
         Output: (((t1.fields ->> 'C 1'::text))::integer)
         Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'c2'::text))::integer))
         ->  Sort
               Output: t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.fields, ((t1.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
         ->  Sort
               Output: t2.fields, (((t2.fields ->> 'c2'::text))::integer)
               Sort Key: (((t2.fields ->> 'c2'::text))::integer)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.fields, ((t2.fields ->> 'c2'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
(17 rows)

--Testcase 157:
SELECT (t1.fields->>'C 1')::int c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE (t1.fields->>'C 1')::int = (t2.fields->>'c2')::int) ORDER BY (t1.fields->>'C 1')::int OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN can be pushed down
--Testcase 158:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 CROSS JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 100 LIMIT 10;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
         Sort Key: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
         ->  Nested Loop
               Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'C 1'::text))::integer
               ->  Foreign Scan on public.ft1 t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Materialize
                     Output: t2.fields
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields
                           InfluxDB query: SELECT * FROM "T1"
(15 rows)

--Testcase 159:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 CROSS JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
--Testcase 160:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t1) t1 JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft6 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 100 LIMIT 10;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   ->  Merge Join
         Output: (((t1.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
         ->  Sort
               Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
               Sort Key: (((t1.fields ->> 'c1'::text))::integer)
               ->  Foreign Scan on public.ft5 t1
                     Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                     InfluxDB query: SELECT * FROM "T4"
         ->  Sort
               Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
               Sort Key: (((t2.fields ->> 'c1'::text))::integer)
               ->  Foreign Scan on public.ft6 t2
                     Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                     InfluxDB query: SELECT * FROM "T4"
(17 rows)

--Testcase 161:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t1) t1 JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft6 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
--Testcase 162:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON (t1.c8 = t2.c8) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 100 LIMIT 10;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
         Sort Key: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
         ->  Merge Left Join
               Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'C 1'::text))::integer
               Merge Cond: (((t1.fields ->> 'c8'::text)) = ((t2.fields ->> 'c8'::text)))
               ->  Sort
                     Output: t1.fields, ((t1.fields ->> 'c8'::text))
                     Sort Key: ((t1.fields ->> 'c8'::text))
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.fields, (t1.fields ->> 'c8'::text)
                           InfluxDB query: SELECT * FROM "T1"
               ->  Sort
                     Output: t2.fields, ((t2.fields ->> 'c8'::text))
                     Sort Key: ((t2.fields ->> 'c8'::text))
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields, (t2.fields ->> 'c8'::text)
                           InfluxDB query: SELECT * FROM "T1"
(20 rows)

--Testcase 163:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON (t1.c8 = t2.c8) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- unsafe conditions on one side (c8 has a UDT), not pushed down.
--Testcase 164:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) WHERE t1.c8 = 'foo' ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text))
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text))
         Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
         ->  Hash Right Join
               Output: ((t1.fields ->> 'C 1'::text))::integer, ((t2.fields ->> 'C 1'::text))::integer, (t1.tags ->> 'c3'::text)
               Hash Cond: (((t2.fields ->> 'C 1'::text))::integer = ((t1.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2."time", t2.tags, t2.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Hash
                     Output: t1.fields, t1.tags
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.fields, t1.tags
                           InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = 'foo'))
(16 rows)

--Testcase 165:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 LEFT JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) WHERE t1.c8 = 'foo' ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
--Testcase 166:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text))
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), ((t1.tags ->> 'c3'::text))
         Sort Key: ((t1.tags ->> 'c3'::text)), (((t1.fields ->> 'C 1'::text))::integer)
         ->  Merge Join
               Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer), (t1.tags ->> 'c3'::text)
               Merge Cond: (((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer)) AND (((t1.fields ->> 'c8'::text)) = ((t2.fields ->> 'c8'::text))))
               ->  Sort
                     Output: t1.fields, t1.tags, (((t1.fields ->> 'C 1'::text))::integer), ((t1.fields ->> 'c8'::text))
                     Sort Key: (((t1.fields ->> 'C 1'::text))::integer), ((t1.fields ->> 'c8'::text))
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.fields, t1.tags, ((t1.fields ->> 'C 1'::text))::integer, (t1.fields ->> 'c8'::text)
                           InfluxDB query: SELECT * FROM "T1"
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer), ((t2.fields ->> 'c8'::text))
                     Sort Key: (((t2.fields ->> 'C 1'::text))::integer), ((t2.fields ->> 'c8'::text))
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer, (t2.fields ->> 'c8'::text)
                           InfluxDB query: SELECT * FROM "T1"
(20 rows)

--Testcase 167:
SELECT t1.c1, t2.c1 FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, (t1.c1)::int OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
--Testcase 168:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT (t1.c1)::int, (t2.c1)::int FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) UNION SELECT (t1.c1)::int, (t2.c1)::int FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer), (avg(((((t1.fields ->> 'C 1'::text))::integer) + (((t2.fields ->> 'C 1'::text))::integer))))
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer), (avg(((((t1.fields ->> 'C 1'::text))::integer) + (((t2.fields ->> 'C 1'::text))::integer))))
         Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
         ->  HashAggregate
               Output: (((t1.fields ->> 'C 1'::text))::integer), avg(((((t1.fields ->> 'C 1'::text))::integer) + (((t2.fields ->> 'C 1'::text))::integer)))
               Group Key: (((t1.fields ->> 'C 1'::text))::integer)
               ->  HashAggregate
                     Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
                     Group Key: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
                     ->  Append
                           ->  Merge Join
                                 Output: (((t1.fields ->> 'C 1'::text))::integer), (((t2.fields ->> 'C 1'::text))::integer)
                                 Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
                                 ->  Sort
                                       Output: t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
                                       Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
                                       ->  Foreign Scan on public.ft1 t1
                                             Output: t1.fields, ((t1.fields ->> 'C 1'::text))::integer
                                             InfluxDB query: SELECT * FROM "T1"
                                 ->  Sort
                                       Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
                                       Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
                                       ->  Foreign Scan on public.ft2 t2
                                             Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                                             InfluxDB query: SELECT * FROM "T1"
                           ->  Merge Join
                                 Output: (((t1_1.fields ->> 'C 1'::text))::integer), (((t2_1.fields ->> 'C 1'::text))::integer)
                                 Merge Cond: ((((t1_1.fields ->> 'C 1'::text))::integer) = (((t2_1.fields ->> 'C 1'::text))::integer))
                                 ->  Sort
                                       Output: t1_1.fields, (((t1_1.fields ->> 'C 1'::text))::integer)
                                       Sort Key: (((t1_1.fields ->> 'C 1'::text))::integer)
                                       ->  Foreign Scan on public.ft1 t1_1
                                             Output: t1_1.fields, ((t1_1.fields ->> 'C 1'::text))::integer
                                             InfluxDB query: SELECT * FROM "T1"
                                 ->  Sort
                                       Output: t2_1.fields, (((t2_1.fields ->> 'C 1'::text))::integer)
                                       Sort Key: (((t2_1.fields ->> 'C 1'::text))::integer)
                                       ->  Foreign Scan on public.ft2 t2_1
                                             Output: t2_1.fields, ((t2_1.fields ->> 'C 1'::text))::integer
                                             InfluxDB query: SELECT * FROM "T1"
(42 rows)

--Testcase 169:
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT (t1.c1)::int, (t2.c1)::int FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) UNION SELECT (t1.c1)::int, (t2.c1)::int FROM (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 JOIN (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 ON ((t1.c1)::int = (t2.c1)::int)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
--Testcase 170:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C 1" FROM (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t1) t1, LATERAL (SELECT DISTINCT t2.fields->>'C 1', t3.fields->>'C 1' FROM ft1 t2, ft2 t3 WHERE (t2.fields->>'C 1')::int = (t3.fields->>'C 1')::int AND (t2.fields->>'c2')::int = (t1.c2)::int) q ORDER BY (t1."C 1")::int OFFSET 10 LIMIT 10;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((t1.fields ->> 'C 1'::text))::integer)
   ->  Sort
         Output: (((t1.fields ->> 'C 1'::text))::integer)
         Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
         ->  Nested Loop
               Output: ((t1.fields ->> 'C 1'::text))::integer
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "T1"
               ->  Unique
                     Output: ((t2.fields ->> 'C 1'::text)), ((t3.fields ->> 'C 1'::text))
                     ->  Sort
                           Output: ((t2.fields ->> 'C 1'::text)), ((t3.fields ->> 'C 1'::text))
                           Sort Key: ((t2.fields ->> 'C 1'::text)), ((t3.fields ->> 'C 1'::text))
                           ->  Hash Join
                                 Output: (t2.fields ->> 'C 1'::text), (t3.fields ->> 'C 1'::text)
                                 Hash Cond: (((t3.fields ->> 'C 1'::text))::integer = ((t2.fields ->> 'C 1'::text))::integer)
                                 ->  Foreign Scan on public.ft2 t3
                                       Output: t3."time", t3.tags, t3.fields
                                       InfluxDB query: SELECT * FROM "T1"
                                 ->  Hash
                                       Output: t2.fields
                                       ->  Foreign Scan on public.ft1 t2
                                             Output: t2.fields
                                             InfluxDB query: SELECT * FROM "T1" WHERE (("c2" = $1))
(26 rows)

--Testcase 171:
SELECT t1."C 1" FROM (SELECT (fields->>'C 1')::int "C 1", (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM "S 1"."T 1" t1) t1, LATERAL (SELECT DISTINCT t2.fields->>'C 1', t3.fields->>'C 1' FROM ft1 t2, ft2 t3 WHERE (t2.fields->>'C 1')::int = (t3.fields->>'C 1')::int AND (t2.fields->>'c2')::int = (t1.c2)::int) q ORDER BY (t1."C 1")::int OFFSET 10 LIMIT 10;
 C 1 
-----
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
(10 rows)

-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
--Testcase 172:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, (ft2.fields->>'C 1')::int c1 FROM (SELECT 13 FROM ft1 WHERE (fields->>'C 1')::int = 13) q(a) RIGHT JOIN ft2 ON (q.a = (ft2.fields->>'C 1')::int) WHERE (ft2.fields->>'C 1')::int BETWEEN 10 AND 15;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ((ft2.fields ->> 'C 1'::text))::integer
   Join Filter: (13 = ((ft2.fields ->> 'C 1'::text))::integer)
   ->  Foreign Scan on public.ft2
         Output: ft2."time", ft2.tags, ft2.fields
         InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" >= 10)) AND (("C 1" <= 15))
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1
               Output: 13
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 13))
(11 rows)

--Testcase 173:
SELECT q.a, (ft2.fields->>'C 1')::int c1 FROM (SELECT 13 FROM ft1 WHERE (fields->>'C 1')::int = 13) q(a) RIGHT JOIN ft2 ON (q.a = (ft2.fields->>'C 1')::int) WHERE (ft2.fields->>'C 1')::int BETWEEN 10 AND 15;
 a  | c1 
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
--Testcase 174:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT (ft4.fields->>'c1')::int c1, q.* FROM ft4 LEFT JOIN (SELECT 13, (ft1.fields->>'C 1')::int, (ft2.fields->>'C 1')::int FROM ft1 RIGHT JOIN ft2 ON ((ft1.fields->>'C 1')::int = (ft2.fields->>'C 1')::int) WHERE (ft1.fields->>'C 1')::int = 12) q(a, b, c) ON ((ft4.fields->>'c1')::int = q.b) WHERE (ft4.fields->>'c1')::int BETWEEN 10 AND 15;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Hash Right Join
   Output: ((ft4.fields ->> 'c1'::text))::integer, (13), ((ft1.fields ->> 'C 1'::text))::integer, ((ft2.fields ->> 'C 1'::text))::integer
   Hash Cond: (((ft1.fields ->> 'C 1'::text))::integer = ((ft4.fields ->> 'c1'::text))::integer)
   ->  Nested Loop
         Output: ft1.fields, ft2.fields, 13
         ->  Foreign Scan on public.ft1
               Output: ft1."time", ft1.tags, ft1.fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 12))
         ->  Materialize
               Output: ft2.fields
               ->  Foreign Scan on public.ft2
                     Output: ft2.fields
                     InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 12))
   ->  Hash
         Output: ft4.fields
         ->  Foreign Scan on public.ft4
               Output: ft4.fields
               InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 10)) AND (("c1" <= 15))
(18 rows)

--Testcase 175:
SELECT (ft4.fields->>'c1')::int c1, q.* FROM ft4 LEFT JOIN (SELECT 13, (ft1.fields->>'C 1')::int, (ft2.fields->>'C 1')::int FROM ft1 RIGHT JOIN ft2 ON ((ft1.fields->>'C 1')::int = (ft2.fields->>'C 1')::int) WHERE (ft1.fields->>'C 1')::int = 12) q(a, b, c) ON ((ft4.fields->>'c1')::int = q.b) WHERE (ft4.fields->>'c1')::int BETWEEN 10 AND 15 ORDER BY (ft4.fields->>'c1')::int;
 c1 | a  | b  | c  
----+----+----+----
 10 |    |    |   
 12 | 13 | 12 | 12
 14 |    |    |   
(3 rows)

-- join with nullable side with some columns with null values
-- influxdb_fdw does not support UPDATE
-- UPDATE ft5 SET c3 = null where c1 % 9 = 0;
--Testcase 176:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, (ft5.fields->>'c1')::int c1, (ft5.fields->>'c2')::int c2, ft5.tags->>'c3' c3, (ft4.fields->>'c1')::int c1, (ft4.fields->>'c2')::int c2 FROM ft5 left join ft4 on (ft5.fields->>'c1')::int = (ft4.fields->>'c1')::int WHERE (ft4.fields->>'c1')::int BETWEEN 10 and 30 ORDER BY (ft5.fields->>'c1')::int, (ft4.fields->>'c1')::int;
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft5.*, (((ft5.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c2'::text))::integer), ((ft5.tags ->> 'c3'::text)), (((ft4.fields ->> 'c1'::text))::integer), (((ft4.fields ->> 'c2'::text))::integer)
   Sort Key: (((ft5.fields ->> 'c1'::text))::integer)
   ->  Hash Join
         Output: ft5.*, ((ft5.fields ->> 'c1'::text))::integer, ((ft5.fields ->> 'c2'::text))::integer, (ft5.tags ->> 'c3'::text), ((ft4.fields ->> 'c1'::text))::integer, ((ft4.fields ->> 'c2'::text))::integer
         Hash Cond: (((ft5.fields ->> 'c1'::text))::integer = ((ft4.fields ->> 'c1'::text))::integer)
         ->  Foreign Scan on public.ft5
               Output: ft5.*, ft5.fields, ft5.tags
               InfluxDB query: SELECT * FROM "T4"
         ->  Hash
               Output: ft4.fields
               ->  Foreign Scan on public.ft4
                     Output: ft4.fields
                     InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 10)) AND (("c1" <= 30))
(14 rows)

--Testcase 177:
SELECT ft5, (ft5.fields->>'c1')::int c1, (ft5.fields->>'c2')::int c2, ft5.tags->>'c3' c3, (ft4.fields->>'c1')::int c1, (ft4.fields->>'c2')::int c2 FROM ft5 left join ft4 on (ft5.fields->>'c1')::int = (ft4.fields->>'c1')::int WHERE (ft4.fields->>'c1')::int BETWEEN 10 and 30 ORDER BY (ft5.fields->>'c1')::int, (ft4.fields->>'c1')::int;
                             ft5                             | c1 | c2 |   c3   | c1 | c2 
-------------------------------------------------------------+----+----+--------+----+----
 ("{""c3"": ""AAA012""}","{""c1"": ""12"", ""c2"": ""13""}") | 12 | 13 | AAA012 | 12 | 13
 ("{""c3"": ""AAA018""}","{""c1"": ""18"", ""c2"": ""19""}") | 18 | 19 | AAA018 | 18 | 19
 ("{""c3"": ""AAA024""}","{""c1"": ""24"", ""c2"": ""25""}") | 24 | 25 | AAA024 | 24 | 25
 ("{""c3"": ""AAA030""}","{""c1"": ""30"", ""c2"": ""31""}") | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
--Testcase 178:
CREATE FOREIGN TABLE local_tbl (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'local_tbl', schemaless 'true');
CREATE FOREIGN TABLE local_tbl_nsc (c1 int NOT NULL, c2 int NOT NULL, c3 text) SERVER influxdb_svr OPTIONS (table 'local_tbl');
--Testcase 179:
INSERT INTO local_tbl_nsc SELECT id, id % 10, to_char(id, 'FM0000') FROM generate_series(1, 1000) id;
--ANALYZE local_tbl;
SET enable_nestloop TO false;
SET enable_hashjoin TO false;
--Testcase 180:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE (ft1.fields->>'C 1')::int = (ft2.fields->>'C 1')::int AND (ft1.fields->>'c2')::int = (ft4.fields->>'c1')::int
    AND (ft1.fields->>'c2')::int = (ft5.fields->>'c1')::int AND (ft1.fields->>'c2')::int = (local_tbl.fields->>'c1')::int AND (ft1.fields->>'C 1')::int < 100 AND (ft2.fields->>'C 1')::int < 100 ORDER BY (ft1.fields->>'C 1')::int FOR UPDATE;
                                                                                                                QUERY PLAN                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: ft1."time", ft1.tags, ft1.fields, ft2."time", ft2.tags, ft2.fields, ft4.tags, ft4.fields, ft5.tags, ft5.fields, local_tbl.fields, (((ft1.fields ->> 'C 1'::text))::integer), ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.*
   ->  Sort
         Output: ft1."time", ft1.tags, ft1.fields, ft2."time", ft2.tags, ft2.fields, ft4.tags, ft4.fields, ft5.tags, ft5.fields, local_tbl.fields, (((ft1.fields ->> 'C 1'::text))::integer), ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.*
         Sort Key: (((ft1.fields ->> 'C 1'::text))::integer)
         ->  Merge Join
               Output: ft1."time", ft1.tags, ft1.fields, ft2."time", ft2.tags, ft2.fields, ft4.tags, ft4.fields, ft5.tags, ft5.fields, local_tbl.fields, ((ft1.fields ->> 'C 1'::text))::integer, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.*
               Merge Cond: (((ft1.fields ->> 'c2'::text))::integer = (((local_tbl.fields ->> 'c1'::text))::integer))
               ->  Merge Join
                     Output: ft1."time", ft1.tags, ft1.fields, ft1.*, ft2."time", ft2.tags, ft2.fields, ft2.*, ft4.tags, ft4.fields, ft4.*, ft5.tags, ft5.fields, ft5.*
                     Merge Cond: (((ft1.fields ->> 'c2'::text))::integer = (((ft5.fields ->> 'c1'::text))::integer))
                     ->  Merge Join
                           Output: ft1."time", ft1.tags, ft1.fields, ft1.*, ft2."time", ft2.tags, ft2.fields, ft2.*, ft4.tags, ft4.fields, ft4.*
                           Merge Cond: ((((ft1.fields ->> 'c2'::text))::integer) = (((ft4.fields ->> 'c1'::text))::integer))
                           ->  Sort
                                 Output: ft1."time", ft1.tags, ft1.fields, ft1.*, ft2."time", ft2.tags, ft2.fields, ft2.*, (((ft1.fields ->> 'c2'::text))::integer)
                                 Sort Key: (((ft1.fields ->> 'c2'::text))::integer)
                                 ->  Merge Join
                                       Output: ft1."time", ft1.tags, ft1.fields, ft1.*, ft2."time", ft2.tags, ft2.fields, ft2.*, ((ft1.fields ->> 'c2'::text))::integer
                                       Merge Cond: ((((ft1.fields ->> 'C 1'::text))::integer) = (((ft2.fields ->> 'C 1'::text))::integer))
                                       ->  Sort
                                             Output: ft1."time", ft1.tags, ft1.fields, ft1.*, (((ft1.fields ->> 'C 1'::text))::integer)
                                             Sort Key: (((ft1.fields ->> 'C 1'::text))::integer)
                                             ->  Foreign Scan on public.ft1
                                                   Output: ft1."time", ft1.tags, ft1.fields, ft1.*, ((ft1.fields ->> 'C 1'::text))::integer
                                                   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 100))
                                       ->  Sort
                                             Output: ft2."time", ft2.tags, ft2.fields, ft2.*, (((ft2.fields ->> 'C 1'::text))::integer)
                                             Sort Key: (((ft2.fields ->> 'C 1'::text))::integer)
                                             ->  Foreign Scan on public.ft2
                                                   Output: ft2."time", ft2.tags, ft2.fields, ft2.*, ((ft2.fields ->> 'C 1'::text))::integer
                                                   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 100))
                           ->  Sort
                                 Output: ft4.tags, ft4.fields, ft4.*, (((ft4.fields ->> 'c1'::text))::integer)
                                 Sort Key: (((ft4.fields ->> 'c1'::text))::integer)
                                 ->  Foreign Scan on public.ft4
                                       Output: ft4.tags, ft4.fields, ft4.*, ((ft4.fields ->> 'c1'::text))::integer
                                       InfluxDB query: SELECT * FROM "T3"
                     ->  Sort
                           Output: ft5.tags, ft5.fields, ft5.*, (((ft5.fields ->> 'c1'::text))::integer)
                           Sort Key: (((ft5.fields ->> 'c1'::text))::integer)
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.tags, ft5.fields, ft5.*, ((ft5.fields ->> 'c1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T4"
               ->  Sort
                     Output: local_tbl.fields, local_tbl.*, (((local_tbl.fields ->> 'c1'::text))::integer)
                     Sort Key: (((local_tbl.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.local_tbl
                           Output: local_tbl.fields, local_tbl.*, ((local_tbl.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "local_tbl"
(50 rows)

--Testcase 181:
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE (ft1.fields->>'C 1')::int = (ft2.fields->>'C 1')::int AND (ft1.fields->>'c2')::int = (ft4.fields->>'c1')::int
    AND (ft1.fields->>'c2')::int = (ft5.fields->>'c1')::int AND (ft1.fields->>'c2')::int = (local_tbl.fields->>'c1')::int AND (ft1.fields->>'C 1')::int < 100 AND (ft2.fields->>'C 1')::int < 100 ORDER BY (ft1.fields->>'C 1')::int FOR UPDATE;
           time           |      tags       |                                fields                                |           time           |      tags       |                                fields                                |       tags       |         fields         |       tags       |         fields         |                fields                
--------------------------+-----------------+----------------------------------------------------------------------+--------------------------+-----------------+----------------------------------------------------------------------+------------------+------------------------+------------------+------------------------+--------------------------------------
 Wed Jan 07 00:00:00 1970 | {"c3": "00006"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "6"}  | Wed Jan 07 00:00:00 1970 | {"c3": "00006"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "6"}  | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Sat Jan 17 00:00:00 1970 | {"c3": "00016"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "16"} | Sat Jan 17 00:00:00 1970 | {"c3": "00016"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "16"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Tue Jan 27 00:00:00 1970 | {"c3": "00026"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "26"} | Tue Jan 27 00:00:00 1970 | {"c3": "00026"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "26"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Fri Feb 06 00:00:00 1970 | {"c3": "00036"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "36"} | Fri Feb 06 00:00:00 1970 | {"c3": "00036"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "36"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Mon Feb 16 00:00:00 1970 | {"c3": "00046"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "46"} | Mon Feb 16 00:00:00 1970 | {"c3": "00046"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "46"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Thu Feb 26 00:00:00 1970 | {"c3": "00056"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "56"} | Thu Feb 26 00:00:00 1970 | {"c3": "00056"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "56"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Sun Mar 08 00:00:00 1970 | {"c3": "00066"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "66"} | Sun Mar 08 00:00:00 1970 | {"c3": "00066"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "66"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Wed Mar 18 00:00:00 1970 | {"c3": "00076"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "76"} | Wed Mar 18 00:00:00 1970 | {"c3": "00076"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "76"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Sat Mar 28 00:00:00 1970 | {"c3": "00086"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "86"} | Sat Mar 28 00:00:00 1970 | {"c3": "00086"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "86"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
 Tue Apr 07 00:00:00 1970 | {"c3": "00096"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "96"} | Tue Apr 07 00:00:00 1970 | {"c3": "00096"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "96"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c3": "AAA006"} | {"c1": "6", "c2": "7"} | {"c1": "6", "c2": "6", "c3": "0006"}
(10 rows)

RESET enable_nestloop;
RESET enable_hashjoin;
--Testcase 182:
DELETE FROM local_tbl_nsc;
DROP FOREIGN TABLE local_tbl;
DROP FOREIGN TABLE local_tbl_nsc;
-- check join pushdown in situations where multiple userids are involved
--Testcase 183:
CREATE ROLE regress_view_owner SUPERUSER;
--Testcase 184:
CREATE USER MAPPING FOR regress_view_owner SERVER influxdb_svr OPTIONS (:AUTHENTICATION);
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
--Testcase 185:
CREATE VIEW v4 AS SELECT * FROM ft4;
--Testcase 186:
CREATE VIEW v5 AS SELECT * FROM ft5;
ALTER VIEW v5 OWNER TO regress_view_owner;
--Testcase 187:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((ft4.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c2'::text))::integer), (((ft5.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((ft4.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c2'::text))::integer), (((ft5.fields ->> 'c1'::text))::integer)
         Sort Key: (((ft4.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c1'::text))::integer)
         ->  Merge Left Join
               Output: (((ft4.fields ->> 'c1'::text))::integer), ((ft5.fields ->> 'c2'::text))::integer, ((ft5.fields ->> 'c1'::text))::integer
               Merge Cond: ((((ft4.fields ->> 'c1'::text))::integer) = (((ft5.fields ->> 'c1'::text))::integer))
               ->  Sort
                     Output: ft4.fields, (((ft4.fields ->> 'c1'::text))::integer)
                     Sort Key: (((ft4.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4
                           Output: ft4.fields, ((ft4.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: ft5.fields, (((ft5.fields ->> 'c1'::text))::integer)
                     Sort Key: (((ft5.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5
                           Output: ft5.fields, ((ft5.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(20 rows)

--Testcase 188:
SELECT t1.c1, t2.c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
--Testcase 189:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;  -- can be pushed down
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((ft4.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c2'::text))::integer), (((ft5.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((ft4.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c2'::text))::integer), (((ft5.fields ->> 'c1'::text))::integer)
         Sort Key: (((ft4.fields ->> 'c1'::text))::integer), (((ft5.fields ->> 'c1'::text))::integer)
         ->  Merge Left Join
               Output: (((ft4.fields ->> 'c1'::text))::integer), ((ft5.fields ->> 'c2'::text))::integer, ((ft5.fields ->> 'c1'::text))::integer
               Merge Cond: ((((ft4.fields ->> 'c1'::text))::integer) = (((ft5.fields ->> 'c1'::text))::integer))
               ->  Sort
                     Output: ft4.fields, (((ft4.fields ->> 'c1'::text))::integer)
                     Sort Key: (((ft4.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4
                           Output: ft4.fields, ((ft4.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: ft5.fields, (((ft5.fields ->> 'c1'::text))::integer)
                     Sort Key: (((ft5.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5
                           Output: ft5.fields, ((ft5.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(20 rows)

--Testcase 190:
SELECT t1.c1, t2.c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 191:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((ft4.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((ft4.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         Sort Key: (((ft4.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         ->  Merge Left Join
               Output: (((ft4.fields ->> 'c1'::text))::integer), ((t2.fields ->> 'c2'::text))::integer, ((t2.fields ->> 'c1'::text))::integer
               Merge Cond: ((((ft4.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
               ->  Sort
                     Output: ft4.fields, (((ft4.fields ->> 'c1'::text))::integer)
                     Sort Key: (((ft4.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4
                           Output: ft4.fields, ((ft4.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(20 rows)

--Testcase 192:
SELECT t1.c1, t2.c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO CURRENT_USER;
--Testcase 193:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;  -- can be pushed down
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((ft4.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
   ->  Sort
         Output: (((ft4.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c2'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         Sort Key: (((ft4.fields ->> 'c1'::text))::integer), (((t2.fields ->> 'c1'::text))::integer)
         ->  Merge Left Join
               Output: (((ft4.fields ->> 'c1'::text))::integer), ((t2.fields ->> 'c2'::text))::integer, ((t2.fields ->> 'c1'::text))::integer
               Merge Cond: ((((ft4.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
               ->  Sort
                     Output: ft4.fields, (((ft4.fields ->> 'c1'::text))::integer)
                     Sort Key: (((ft4.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4
                           Output: ft4.fields, ((ft4.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(20 rows)

--Testcase 194:
SELECT t1.c1, t2.c2 FROM (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM v4 t1) t1 LEFT JOIN (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 ON ((t1.c1)::int = (t2.c1)::int) ORDER BY (t1.c1)::int, (t2.c1)::int OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
--Testcase 195:
DROP OWNED BY regress_view_owner;
--Testcase 196:
DROP ROLE regress_view_owner;
-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
--Testcase 197:
explain (verbose, costs off)
select count(fields->>'c6'), sum((fields->>'C 1')::int), avg((fields->>'C 1')::int), min((fields->>'c2')::int), max((fields->>'C 1')::int), stddev((fields->>'c2')::int), sum((fields->>'C 1')::int) * (random() <= 1)::int as sum2 from ft1 where (fields->>'c2')::int < 5 group by fields->>'c2' order by 1, 2;
                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: (count((fields ->> 'c6'::text))), (sum(((fields ->> 'C 1'::text))::integer)), (avg(((fields ->> 'C 1'::text))::integer)), (min((((fields ->> 'c2'::text)))::integer)), (max(((fields ->> 'C 1'::text))::integer)), (stddev((((fields ->> 'c2'::text)))::integer)), ((sum(((fields ->> 'C 1'::text))::integer)) * ((random() <= '1'::double precision))::integer), ((fields ->> 'c2'::text))
   ->  Sort
         Output: (count((fields ->> 'c6'::text))), (sum(((fields ->> 'C 1'::text))::integer)), (avg(((fields ->> 'C 1'::text))::integer)), (min((((fields ->> 'c2'::text)))::integer)), (max(((fields ->> 'C 1'::text))::integer)), (stddev((((fields ->> 'c2'::text)))::integer)), ((fields ->> 'c2'::text))
         Sort Key: (count((ft1.fields ->> 'c6'::text))), (sum(((ft1.fields ->> 'C 1'::text))::integer))
         ->  HashAggregate
               Output: count((fields ->> 'c6'::text)), sum(((fields ->> 'C 1'::text))::integer), avg(((fields ->> 'C 1'::text))::integer), min((((fields ->> 'c2'::text)))::integer), max(((fields ->> 'C 1'::text))::integer), stddev((((fields ->> 'c2'::text)))::integer), ((fields ->> 'c2'::text))
               Group Key: (ft1.fields ->> 'c2'::text)
               ->  Foreign Scan on public.ft1
                     Output: (fields ->> 'c2'::text), fields
                     InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 5))
(11 rows)

--Testcase 198:
select count(fields->>'c6'), sum((fields->>'C 1')::int), avg((fields->>'C 1')::int), min((fields->>'c2')::int), max((fields->>'C 1')::int), stddev((fields->>'c2')::int), sum((fields->>'C 1')::int) * (random() <= 1)::int as sum2 from ft1 where (fields->>'c2')::int < 5 group by fields->>'c2' order by 1, 2;
 count |  sum  |         avg          | min | max  | stddev | sum2  
-------+-------+----------------------+-----+------+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 |  991 |      0 | 49600
   100 | 49700 | 497.0000000000000000 |   2 |  992 |      0 | 49700
   100 | 49800 | 498.0000000000000000 |   3 |  993 |      0 | 49800
   100 | 49900 | 499.0000000000000000 |   4 |  994 |      0 | 49900
   100 | 50500 | 505.0000000000000000 |   0 | 1000 |      0 | 50500
(5 rows)

--Testcase 199:
explain (verbose, costs off)
select count(fields->>'c6'), sum((fields->>'C 1')::int), avg((fields->>'C 1')::int), min((fields->>'c2')::int), max((fields->>'C 1')::int), stddev((fields->>'c2')::int), sum((fields->>'C 1')::int) * (random() <= 1)::int as sum2 from ft1 where (fields->>'c2')::int < 5 group by fields->>'c2' order by 1, 2 limit 1;
                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (count((fields ->> 'c6'::text))), (sum(((fields ->> 'C 1'::text))::integer)), (avg(((fields ->> 'C 1'::text))::integer)), (min((((fields ->> 'c2'::text)))::integer)), (max(((fields ->> 'C 1'::text))::integer)), (stddev((((fields ->> 'c2'::text)))::integer)), (((sum(((fields ->> 'C 1'::text))::integer)) * ((random() <= '1'::double precision))::integer)), ((fields ->> 'c2'::text))
   ->  Result
         Output: (count((fields ->> 'c6'::text))), (sum(((fields ->> 'C 1'::text))::integer)), (avg(((fields ->> 'C 1'::text))::integer)), (min((((fields ->> 'c2'::text)))::integer)), (max(((fields ->> 'C 1'::text))::integer)), (stddev((((fields ->> 'c2'::text)))::integer)), ((sum(((fields ->> 'C 1'::text))::integer)) * ((random() <= '1'::double precision))::integer), ((fields ->> 'c2'::text))
         ->  Sort
               Output: (count((fields ->> 'c6'::text))), (sum(((fields ->> 'C 1'::text))::integer)), (avg(((fields ->> 'C 1'::text))::integer)), (min((((fields ->> 'c2'::text)))::integer)), (max(((fields ->> 'C 1'::text))::integer)), (stddev((((fields ->> 'c2'::text)))::integer)), ((fields ->> 'c2'::text))
               Sort Key: (count((ft1.fields ->> 'c6'::text))), (sum(((ft1.fields ->> 'C 1'::text))::integer))
               ->  HashAggregate
                     Output: count((fields ->> 'c6'::text)), sum(((fields ->> 'C 1'::text))::integer), avg(((fields ->> 'C 1'::text))::integer), min((((fields ->> 'c2'::text)))::integer), max(((fields ->> 'C 1'::text))::integer), stddev((((fields ->> 'c2'::text)))::integer), ((fields ->> 'c2'::text))
                     Group Key: (ft1.fields ->> 'c2'::text)
                     ->  Foreign Scan on public.ft1
                           Output: (fields ->> 'c2'::text), fields
                           InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 5))
(13 rows)

--Testcase 200:
select count(fields->>'c6'), sum((fields->>'C 1')::int), avg((fields->>'C 1')::int), min((fields->>'c2')::int), max((fields->>'C 1')::int), stddev((fields->>'c2')::int), sum((fields->>'C 1')::int) * (random() <= 1)::int as sum2 from ft1 where (fields->>'c2')::int < 5 group by fields->>'c2' order by 1, 2 limit 1;
 count |  sum  |         avg          | min | max | stddev | sum2  
-------+-------+----------------------+-----+-----+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 | 991 |      0 | 49600
(1 row)

-- Aggregate is not pushed down as aggregation contains random()
--Testcase 201:
explain (verbose, costs off)
select sum((fields->>'C 1')::int * (random() <= 1)::int) as sum, avg((fields->>'C 1')::int) from ft1;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((((fields ->> 'C 1'::text))::integer * ((random() <= '1'::double precision))::integer)), avg(((fields ->> 'C 1'::text))::integer)
   ->  Foreign Scan on public.ft1
         Output: "time", tags, fields
         InfluxDB query: SELECT * FROM "T1"
(5 rows)

-- Aggregate over join query
--Testcase 202:
explain (verbose, costs off)
select count(*), sum((t1.c1)::int), avg((t2.c1)::int) from (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 inner join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t2) t2 on ((t1.c2)::int = (t2.c2)::int) where (t1.c2)::int = 6;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(((t1.fields ->> 'C 1'::text))::integer), avg(((t2.fields ->> 'C 1'::text))::integer)
   ->  Nested Loop
         Output: t1.fields, t2.fields
         ->  Foreign Scan on public.ft1 t1
               Output: t1."time", t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c2" = 6))
         ->  Materialize
               Output: t2.fields
               ->  Foreign Scan on public.ft1 t2
                     Output: t2.fields
                     InfluxDB query: SELECT * FROM "T1" WHERE (("c2" = 6))
(12 rows)

--Testcase 203:
select count(*), sum((t1.c1)::int), avg((t2.c1)::int) from (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 inner join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t2) t2 on ((t1.c2)::int = (t2.c2)::int) where (t1.c2)::int = 6;
 count |   sum   |         avg          
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
--Testcase 204:
explain (verbose, costs off)
select sum((t1.c1)::int), count((t2.c1)::int) from (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 t1) t1 inner join (SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 t2) t2 on ((t1.c1)::int = (t2.c1)::int) where (((t1.c1)::int * (t2.c1)::int)/((t1.c1)::int * (t2.c1)::int)) * random() <= 1;
                                                                                                                            QUERY PLAN                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(((t1.fields ->> 'C 1'::text))::integer), count(((t2.fields ->> 'C 1'::text))::integer)
   ->  Merge Join
         Output: t1.fields, t2.fields
         Merge Cond: ((((t1.fields ->> 'C 1'::text))::integer) = (((t2.fields ->> 'C 1'::text))::integer))
         Join Filter: ((((((((t1.fields ->> 'C 1'::text))::integer) * (((t2.fields ->> 'C 1'::text))::integer)) / ((((t1.fields ->> 'C 1'::text))::integer) * (((t2.fields ->> 'C 1'::text))::integer))))::double precision * random()) <= '1'::double precision)
         ->  Sort
               Output: t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.fields, ((t1.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
         ->  Sort
               Output: t2.fields, (((t2.fields ->> 'C 1'::text))::integer)
               Sort Key: (((t2.fields ->> 'C 1'::text))::integer)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.fields, ((t2.fields ->> 'C 1'::text))::integer
                     InfluxDB query: SELECT * FROM "T1"
(18 rows)

-- GROUP BY clause having expressions
--Testcase 205:
explain (verbose, costs off)
select (fields->>'c2')::int/2, sum((fields->>'c2')::int) * ((fields->>'c2')::int/2) from ft1 group by (fields->>'c2')::int/2 order by (fields->>'c2')::int/2;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text))::integer / 2)), ((sum(((fields ->> 'c2'::text))::integer) * ((((fields ->> 'c2'::text))::integer / 2))))
   Sort Key: ((((ft1.fields ->> 'c2'::text))::integer / 2))
   ->  HashAggregate
         Output: ((((fields ->> 'c2'::text))::integer / 2)), (sum(((fields ->> 'c2'::text))::integer) * ((((fields ->> 'c2'::text))::integer / 2)))
         Group Key: (((ft1.fields ->> 'c2'::text))::integer / 2)
         ->  Foreign Scan on public.ft1
               Output: (((fields ->> 'c2'::text))::integer / 2), fields
               InfluxDB query: SELECT * FROM "T1"
(9 rows)

--Testcase 206:
select (fields->>'c2')::int/2, sum((fields->>'c2')::int) * ((fields->>'c2')::int/2) from ft1 group by (fields->>'c2')::int/2 order by (fields->>'c2')::int/2;
 ?column? | ?column? 
----------+----------
        0 |        0
        1 |      500
        2 |     1800
        3 |     3900
        4 |     6800
(5 rows)

-- Aggregates in subquery are pushed down.
--Testcase 207:
explain (verbose, costs off)
select count(x.a), sum(x.a) from (select (fields->>'c2')::int a, sum((fields->>'C 1')::int) b from ft1 group by fields->>'c2', sqrt((fields->>'C 1')::int) order by 1, 2) x;
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(((((ft1.fields ->> 'c2'::text)))::integer)), sum(((((ft1.fields ->> 'c2'::text)))::integer))
   ->  Sort
         Output: ((((ft1.fields ->> 'c2'::text)))::integer), (sum(((ft1.fields ->> 'C 1'::text))::integer)), ((ft1.fields ->> 'c2'::text)), (sqrt((((ft1.fields ->> 'C 1'::text))::integer)::double precision))
         Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer), (sum(((ft1.fields ->> 'C 1'::text))::integer))
         ->  HashAggregate
               Output: (((ft1.fields ->> 'c2'::text)))::integer, sum(((ft1.fields ->> 'C 1'::text))::integer), ((ft1.fields ->> 'c2'::text)), (sqrt((((ft1.fields ->> 'C 1'::text))::integer)::double precision))
               Group Key: (ft1.fields ->> 'c2'::text), sqrt((((ft1.fields ->> 'C 1'::text))::integer)::double precision)
               ->  Foreign Scan on public.ft1
                     Output: (ft1.fields ->> 'c2'::text), sqrt((((ft1.fields ->> 'C 1'::text))::integer)::double precision), ft1.fields
                     InfluxDB query: SELECT * FROM "T1"
(11 rows)

--Testcase 208:
select count(x.a), sum(x.a) from (select (fields->>'c2')::int a, sum((fields->>'C 1')::int) b from ft1 group by fields->>'c2', sqrt((fields->>'C 1')::int) order by 1, 2) x;
 count | sum  
-------+------
  1000 | 4500
(1 row)

-- Aggregate is still pushed down by taking unshippable expression out
--Testcase 209:
explain (verbose, costs off)
select (fields->>'c2')::int * (random() <= 1)::int as sum1, sum((fields->>'C 1')::int) * (fields->>'c2')::int as sum2 from ft1 group by fields->>'c2' order by 1, 2;
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (((((fields ->> 'c2'::text)))::integer * ((random() <= '1'::double precision))::integer)), ((sum(((fields ->> 'C 1'::text))::integer) * (((fields ->> 'c2'::text)))::integer)), ((fields ->> 'c2'::text))
   Sort Key: (((((ft1.fields ->> 'c2'::text)))::integer * ((random() <= '1'::double precision))::integer)), ((sum(((ft1.fields ->> 'C 1'::text))::integer) * (((ft1.fields ->> 'c2'::text)))::integer))
   ->  HashAggregate
         Output: ((((fields ->> 'c2'::text)))::integer * ((random() <= '1'::double precision))::integer), (sum(((fields ->> 'C 1'::text))::integer) * (((fields ->> 'c2'::text)))::integer), ((fields ->> 'c2'::text))
         Group Key: (ft1.fields ->> 'c2'::text)
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1"
(9 rows)

--Testcase 210:
select (fields->>'c2')::int * (random() <= 1)::int as sum1, sum((fields->>'C 1')::int) * (fields->>'c2')::int as sum2 from ft1 group by fields->>'c2' order by 1, 2;
 sum1 |  sum2  
------+--------
    0 |      0
    1 |  49600
    2 |  99400
    3 | 149400
    4 | 199600
    5 | 250000
    6 | 300600
    7 | 351400
    8 | 402400
    9 | 453600
(10 rows)

-- Aggregate with unshippable GROUP BY clause are not pushed
--Testcase 211:
explain (verbose, costs off)
select (fields->>'c2')::int * (random() <= 1)::int as c2 from ft2 group by (fields->>'c2')::int * (random() <= 1)::int order by 1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text))::integer * ((random() <= '1'::double precision))::integer))
   Sort Key: ((((ft2.fields ->> 'c2'::text))::integer * ((random() <= '1'::double precision))::integer))
   ->  HashAggregate
         Output: ((((fields ->> 'c2'::text))::integer * ((random() <= '1'::double precision))::integer))
         Group Key: (((ft2.fields ->> 'c2'::text))::integer * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan on public.ft2
               Output: (((fields ->> 'c2'::text))::integer * ((random() <= '1'::double precision))::integer)
               InfluxDB query: SELECT "c2" FROM "T1"
(9 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
--Testcase 212:
explain (verbose, costs off)
select count(fields->>'c2') w, fields->>'c2' x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort
   Output: (count(((fields ->> 'c2'::text)))), ((fields ->> 'c2'::text)), 5, 7.0, 9
   Sort Key: ((ft1.fields ->> 'c2'::text))
   ->  HashAggregate
         Output: count(((fields ->> 'c2'::text))), ((fields ->> 'c2'::text)), (5), 7.0, (9)
         Group Key: (ft1.fields ->> 'c2'::text), 5, 9
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'c2'::text), 5, 9, fields
               InfluxDB query: SELECT * FROM "T1"
(9 rows)

--Testcase 213:
select count(fields->>'c2') w, fields->>'c2' x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
  w  | x | y |  z  
-----+---+---+-----
 100 | 0 | 5 | 7.0
 100 | 1 | 5 | 7.0
 100 | 2 | 5 | 7.0
 100 | 3 | 5 | 7.0
 100 | 4 | 5 | 7.0
 100 | 5 | 5 | 7.0
 100 | 6 | 5 | 7.0
 100 | 7 | 5 | 7.0
 100 | 8 | 5 | 7.0
 100 | 9 | 5 | 7.0
(10 rows)

-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
--Testcase 214:
explain (verbose, costs off)
select (fields->>'c2')::int c2, (fields->>'c2')::int c2 from ft1 where (fields->>'c2')::int > 6 group by 1, 2 order by sum((fields->>'C 1')::int);
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (((fields ->> 'c2'::text))::integer), (((fields ->> 'c2'::text))::integer), (sum(((fields ->> 'C 1'::text))::integer))
   Sort Key: (sum(((ft1.fields ->> 'C 1'::text))::integer))
   ->  HashAggregate
         Output: (((fields ->> 'c2'::text))::integer), (((fields ->> 'c2'::text))::integer), sum(((fields ->> 'C 1'::text))::integer)
         Group Key: ((ft1.fields ->> 'c2'::text))::integer, ((ft1.fields ->> 'c2'::text))::integer
         ->  Foreign Scan on public.ft1
               Output: ((fields ->> 'c2'::text))::integer, ((fields ->> 'c2'::text))::integer, fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c2" > 6))
(9 rows)

--Testcase 215:
select (fields->>'c2')::int c2, (fields->>'c2')::int c2 from ft1 where (fields->>'c2')::int > 6 group by 1, 2 order by sum((fields->>'C 1')::int);
 c2 | c2 
----+----
  7 |  7
  8 |  8
  9 |  9
(3 rows)

-- Testing HAVING clause shippability
--Testcase 216:
explain (verbose, costs off)
select(fields->>'c2')::int c2, sum((fields->>'C 1')::int) from ft2 group by fields->>'c2' having avg((fields->>'C 1')::int) < 500 and sum((fields->>'C 1')::int) < 49800 order by (fields->>'c2')::int;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (sum(((fields ->> 'C 1'::text))::integer)), ((fields ->> 'c2'::text))
   Sort Key: ((((ft2.fields ->> 'c2'::text)))::integer)
   ->  HashAggregate
         Output: (((fields ->> 'c2'::text)))::integer, sum(((fields ->> 'C 1'::text))::integer), ((fields ->> 'c2'::text))
         Group Key: (ft2.fields ->> 'c2'::text)
         Filter: ((avg(((ft2.fields ->> 'C 1'::text))::integer) < '500'::numeric) AND (sum(((ft2.fields ->> 'C 1'::text))::integer) < 49800))
         ->  Foreign Scan on public.ft2
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1"
(10 rows)

--Testcase 217:
select(fields->>'c2')::int c2, sum((fields->>'C 1')::int) from ft2 group by fields->>'c2' having avg((fields->>'C 1')::int) < 500 and sum((fields->>'C 1')::int) < 49800 order by (fields->>'c2')::int;
 c2 |  sum  
----+-------
  1 | 49600
  2 | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
--Testcase 218:
explain (verbose, costs off)
select count(*) from (select time, count((fields->>'C 1')::int) from ft1 group by time, sqrt((fields->>'c2')::int) having (avg((fields->>'C 1')::int) / avg((fields->>'C 1')::int)) * random() <= 1 and avg((fields->>'C 1')::int) < 500) x;
                                                                                                                   QUERY PLAN                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  HashAggregate
         Output: ft1."time", NULL::bigint, (sqrt((((ft1.fields ->> 'c2'::text))::integer)::double precision))
         Group Key: ft1."time", sqrt((((ft1.fields ->> 'c2'::text))::integer)::double precision)
         Filter: ((avg(((ft1.fields ->> 'C 1'::text))::integer) < '500'::numeric) AND ((((avg(((ft1.fields ->> 'C 1'::text))::integer) / avg(((ft1.fields ->> 'C 1'::text))::integer)))::double precision * random()) <= '1'::double precision))
         ->  Foreign Scan on public.ft1
               Output: ft1."time", sqrt((((ft1.fields ->> 'c2'::text))::integer)::double precision), ft1.fields
               InfluxDB query: SELECT * FROM "T1"
(9 rows)

--Testcase 219:
select count(*) from (select time, count((fields->>'C 1')::int) from ft1 group by time, sqrt((fields->>'c2')::int) having (avg((fields->>'C 1')::int) / avg((fields->>'C 1')::int)) * random() <= 1 and avg((fields->>'C 1')::int) < 500) x;
 count 
-------
    49
(1 row)

-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
--Testcase 220:
explain (verbose, costs off)
select sum((fields->>'C 1')::int) from ft1 group by fields->>'c2' having avg((fields->>'C 1')::int * (random() <= 1)::int) > 100 order by 1;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(((fields ->> 'C 1'::text))::integer)), ((fields ->> 'c2'::text))
   Sort Key: (sum(((ft1.fields ->> 'C 1'::text))::integer))
   ->  HashAggregate
         Output: sum(((fields ->> 'C 1'::text))::integer), ((fields ->> 'c2'::text))
         Group Key: (ft1.fields ->> 'c2'::text)
         Filter: (avg((((ft1.fields ->> 'C 1'::text))::integer * ((random() <= '1'::double precision))::integer)) > '100'::numeric)
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1"
(10 rows)

-- Remote aggregate in combination with a local Param (for the output
-- of an initplan) can be trouble, per bug #15781
--Testcase 221:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum((fields->>'C 1')::int) from ft1;
                          QUERY PLAN                          
--------------------------------------------------------------
 Foreign Scan
   Output: $0, (sum(((ft1.fields ->> 'C 1'::text))::integer))
   InfluxDB query: SELECT sum("C 1") FROM "T1"
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
(5 rows)

--Testcase 222:
select exists(select 1 from pg_enum), sum((fields->>'C 1')::int) from ft1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

--Testcase 223:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum((fields->>'C 1')::int) from ft1 group by 1;
                          QUERY PLAN                          
--------------------------------------------------------------
 GroupAggregate
   Output: ($0), sum(((ft1.fields ->> 'C 1'::text))::integer)
   Group Key: $0
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan on public.ft1
         Output: $0, ft1.fields
         InfluxDB query: SELECT * FROM "T1"
(8 rows)

--Testcase 224:
select exists(select 1 from pg_enum), sum((fields->>'C 1')::int) from ft1 group by 1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
--Testcase 225:
explain (verbose, costs off)
select array_agg((fields->>'C 1')::int order by (fields->>'C 1')::int) from ft1 where (fields->>'C 1')::int < 100 group by fields->>'c2' order by 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(((fields ->> 'C 1'::text))::integer ORDER BY ((fields ->> 'C 1'::text))::integer)), ((fields ->> 'c2'::text))
   Sort Key: (array_agg(((ft1.fields ->> 'C 1'::text))::integer ORDER BY ((ft1.fields ->> 'C 1'::text))::integer))
   ->  GroupAggregate
         Output: array_agg(((fields ->> 'C 1'::text))::integer ORDER BY ((fields ->> 'C 1'::text))::integer), ((fields ->> 'c2'::text))
         Group Key: ((ft1.fields ->> 'c2'::text))
         ->  Sort
               Output: ((fields ->> 'c2'::text)), fields
               Sort Key: ((ft1.fields ->> 'c2'::text))
               ->  Foreign Scan on public.ft1
                     Output: (fields ->> 'c2'::text), fields
                     InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 100))
(12 rows)

--Testcase 226:
select array_agg((fields->>'C 1')::int order by (fields->>'C 1')::int) from ft1 where (fields->>'C 1')::int < 100 group by fields->>'c2' order by 1;
           array_agg            
--------------------------------
 {1,11,21,31,41,51,61,71,81,91}
 {2,12,22,32,42,52,62,72,82,92}
 {3,13,23,33,43,53,63,73,83,93}
 {4,14,24,34,44,54,64,74,84,94}
 {5,15,25,35,45,55,65,75,85,95}
 {6,16,26,36,46,56,66,76,86,96}
 {7,17,27,37,47,57,67,77,87,97}
 {8,18,28,38,48,58,68,78,88,98}
 {9,19,29,39,49,59,69,79,89,99}
 {10,20,30,40,50,60,70,80,90}
(10 rows)

-- ORDER BY within aggregate, different column used to order also using DESC
--Testcase 227:
explain (verbose, costs off)
select array_agg(time order by (fields->>'C 1')::int desc) from ft2 where (fields->>'c2')::int = 6 and (fields->>'C 1')::int < 50;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Aggregate
   Output: array_agg("time" ORDER BY ((fields ->> 'C 1'::text))::integer DESC)
   ->  Foreign Scan on public.ft2
         Output: "time", tags, fields
         InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 50)) AND (("c2" = 6))
(5 rows)

--Testcase 228:
select array_agg(time order by (fields->>'C 1')::int desc) from ft2 where (fields->>'c2')::int = 6 and (fields->>'C 1')::int < 50;
                                                                array_agg                                                                 
------------------------------------------------------------------------------------------------------------------------------------------
 {"Mon Feb 16 00:00:00 1970","Fri Feb 06 00:00:00 1970","Tue Jan 27 00:00:00 1970","Sat Jan 17 00:00:00 1970","Wed Jan 07 00:00:00 1970"}
(1 row)

-- DISTINCT within aggregate
--Testcase 229:
explain (verbose, costs off)
select array_agg(distinct ((t1.c1)::int)%5) from (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 full join (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 on ((t1.c1)::int = (t2.c1)::int) where (t1.c1)::int < 20 or ((t1.c1)::int is null and (t2.c1)::int < 5) group by ((t2.c1)::int)%3 order by 1;
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5))), ((((t2.fields ->> 'c1'::text))::integer % 3))
   Sort Key: (array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5)), ((((t2.fields ->> 'c1'::text))::integer % 3))
         Group Key: ((((t2.fields ->> 'c1'::text))::integer % 3))
         ->  Sort
               Output: ((((t2.fields ->> 'c1'::text))::integer % 3)), t1.fields
               Sort Key: ((((t2.fields ->> 'c1'::text))::integer % 3))
               ->  Merge Full Join
                     Output: (((t2.fields ->> 'c1'::text))::integer % 3), t1.fields
                     Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
                     Filter: ((((t1.fields ->> 'c1'::text))::integer < 20) OR ((((t1.fields ->> 'c1'::text))::integer IS NULL) AND (((t2.fields ->> 'c1'::text))::integer < 5)))
                     ->  Sort
                           Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
                           Sort Key: (((t1.fields ->> 'c1'::text))::integer)
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T3"
                     ->  Sort
                           Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T4"
(25 rows)

--Testcase 230:
select array_agg(distinct ((t1.c1)::int)%5) from (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 full join (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 on ((t1.c1)::int = (t2.c1)::int) where (t1.c1)::int < 20 or ((t1.c1)::int is null and (t2.c1)::int < 5) group by ((t2.c1)::int)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
--Testcase 231:
explain (verbose, costs off)
select array_agg(distinct ((t1.c1)::int)%5 order by ((t1.c1)::int)%5) from (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 full join (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 on ((t1.c1)::int = (t2.c1)::int) where (t1.c1)::int < 20 or ((t1.c1)::int is null and (t2.c1)::int < 5) group by ((t2.c1)::int)%3 order by 1;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5) ORDER BY (((t1.fields ->> 'c1'::text))::integer % 5))), ((((t2.fields ->> 'c1'::text))::integer % 3))
   Sort Key: (array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5) ORDER BY (((t1.fields ->> 'c1'::text))::integer % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5) ORDER BY (((t1.fields ->> 'c1'::text))::integer % 5)), ((((t2.fields ->> 'c1'::text))::integer % 3))
         Group Key: ((((t2.fields ->> 'c1'::text))::integer % 3))
         ->  Sort
               Output: ((((t2.fields ->> 'c1'::text))::integer % 3)), t1.fields
               Sort Key: ((((t2.fields ->> 'c1'::text))::integer % 3))
               ->  Merge Full Join
                     Output: (((t2.fields ->> 'c1'::text))::integer % 3), t1.fields
                     Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
                     Filter: ((((t1.fields ->> 'c1'::text))::integer < 20) OR ((((t1.fields ->> 'c1'::text))::integer IS NULL) AND (((t2.fields ->> 'c1'::text))::integer < 5)))
                     ->  Sort
                           Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
                           Sort Key: (((t1.fields ->> 'c1'::text))::integer)
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T3"
                     ->  Sort
                           Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T4"
(25 rows)

--Testcase 232:
select array_agg(distinct ((t1.c1)::int)%5 order by ((t1.c1)::int)%5) from (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 full join (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 on ((t1.c1)::int = (t2.c1)::int) where (t1.c1)::int < 20 or ((t1.c1)::int is null and (t2.c1)::int < 5) group by ((t2.c1)::int)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

--Testcase 233:
explain (verbose, costs off)
select array_agg(distinct ((t1.c1)::int)%5 order by ((t1.c1)::int)%5 desc nulls last) from (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 full join (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 on ((t1.c1)::int = (t2.c1)::int) where (t1.c1)::int < 20 or ((t1.c1)::int is null and (t2.c1)::int < 5) group by ((t2.c1)::int)%3 order by 1;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5) ORDER BY (((t1.fields ->> 'c1'::text))::integer % 5) DESC NULLS LAST)), ((((t2.fields ->> 'c1'::text))::integer % 3))
   Sort Key: (array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5) ORDER BY (((t1.fields ->> 'c1'::text))::integer % 5) DESC NULLS LAST))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (((t1.fields ->> 'c1'::text))::integer % 5) ORDER BY (((t1.fields ->> 'c1'::text))::integer % 5) DESC NULLS LAST), ((((t2.fields ->> 'c1'::text))::integer % 3))
         Group Key: ((((t2.fields ->> 'c1'::text))::integer % 3))
         ->  Sort
               Output: ((((t2.fields ->> 'c1'::text))::integer % 3)), t1.fields
               Sort Key: ((((t2.fields ->> 'c1'::text))::integer % 3))
               ->  Merge Full Join
                     Output: (((t2.fields ->> 'c1'::text))::integer % 3), t1.fields
                     Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
                     Filter: ((((t1.fields ->> 'c1'::text))::integer < 20) OR ((((t1.fields ->> 'c1'::text))::integer IS NULL) AND (((t2.fields ->> 'c1'::text))::integer < 5)))
                     ->  Sort
                           Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
                           Sort Key: (((t1.fields ->> 'c1'::text))::integer)
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T3"
                     ->  Sort
                           Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                           Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                                 InfluxDB query: SELECT * FROM "T4"
(25 rows)

--Testcase 234:
select array_agg(distinct ((t1.c1)::int)%5 order by ((t1.c1)::int)%5 desc nulls last) from (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 full join (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 on ((t1.c1)::int = (t2.c1)::int) where (t1.c1)::int < 20 or ((t1.c1)::int is null and (t2.c1)::int < 5) group by ((t2.c1)::int)%3 order by 1;
  array_agg   
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
--Testcase 235:
explain (verbose, costs off)
select sum((fields->>'C 1')::int) filter (where (fields->>'C 1')::int < 100 and (fields->>'c2')::int > 5) from ft1 group by fields->>'c2' order by 1 nulls last;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(((fields ->> 'C 1'::text))::integer) FILTER (WHERE ((((fields ->> 'C 1'::text))::integer < 100) AND ((((fields ->> 'c2'::text)))::integer > 5)))), ((fields ->> 'c2'::text))
   Sort Key: (sum(((ft1.fields ->> 'C 1'::text))::integer) FILTER (WHERE ((((ft1.fields ->> 'C 1'::text))::integer < 100) AND ((((ft1.fields ->> 'c2'::text)))::integer > 5))))
   ->  HashAggregate
         Output: sum(((fields ->> 'C 1'::text))::integer) FILTER (WHERE ((((fields ->> 'C 1'::text))::integer < 100) AND ((((fields ->> 'c2'::text)))::integer > 5))), ((fields ->> 'c2'::text))
         Group Key: (ft1.fields ->> 'c2'::text)
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1"
(9 rows)

--Testcase 236:
select sum((fields->>'C 1')::int) filter (where (fields->>'C 1')::int < 100 and (fields->>'c2')::int > 5) from ft1 group by fields->>'c2' order by 1 nulls last;
 sum 
-----
 510
 520
 530
 540
    
    
    
    
    
    
(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
--Testcase 237:
explain (verbose, costs off)
select sum((fields->>'C 1')::int%3), sum(distinct (fields->>'C 1')::int%3 order by (fields->>'C 1')::int%3) filter (where (fields->>'C 1')::int%3 < 2), (fields->>'c2')::int c2 from ft1 where (fields->>'c2')::int = 6 group by fields->>'c2';
                                                                                                                                              QUERY PLAN                                                                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((((fields ->> 'C 1'::text))::integer % 3)), sum(DISTINCT (((fields ->> 'C 1'::text))::integer % 3) ORDER BY (((fields ->> 'C 1'::text))::integer % 3)) FILTER (WHERE ((((fields ->> 'C 1'::text))::integer % 3) < 2)), (((fields ->> 'c2'::text)))::integer, ((fields ->> 'c2'::text))
   Group Key: ((ft1.fields ->> 'c2'::text))
   ->  Sort
         Output: ((fields ->> 'c2'::text)), fields
         Sort Key: ((ft1.fields ->> 'c2'::text))
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c2" = 6))
(9 rows)

--Testcase 238:
select sum((fields->>'C 1')::int%3), sum(distinct (fields->>'C 1')::int%3 order by (fields->>'C 1')::int%3) filter (where (fields->>'C 1')::int%3 < 2), (fields->>'c2')::int c2 from ft1 where (fields->>'c2')::int = 6 group by fields->>'c2';
 sum | sum | c2 
-----+-----+----
  99 |   1 |  6
(1 row)

-- Outer query is aggregation query
--Testcase 239:
explain (verbose, costs off)
select distinct (select count(*) filter (where (t2.fields->>'c2')::int = 6 and (t2.fields->>'C 1')::int < 10) from ft1 t1 where (t1.fields->>'C 1')::int = 6) from ft2 t2 where (t2.fields->>'c2')::int % 6 = 0 order by 1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Aggregate
               Output: (SubPlan 1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2."time", t2.tags, t2.fields
                     InfluxDB query: SELECT * FROM "T1" WHERE ((("c2" % 6) = 0))
               SubPlan 1
                 ->  Foreign Scan on public.ft1 t1
                       Output: count(*) FILTER (WHERE ((((t2.fields ->> 'c2'::text))::integer = 6) AND (((t2.fields ->> 'C 1'::text))::integer < 10)))
                       InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 6))
(14 rows)

--Testcase 240:
select distinct (select count(*) filter (where (t2.fields->>'c2')::int = 6 and (t2.fields->>'C 1')::int < 10) from ft1 t1 where (t1.fields->>'C 1')::int = 6) from ft2 t2 where (t2.fields->>'c2')::int % 6 = 0 order by 1;
 count 
-------
     1
(1 row)

-- Inner query is aggregation query
--Testcase 241:
explain (verbose, costs off)
select distinct (select count(t1.fields->>'C 1') filter (where (t2.fields->>'c2')::int = 6 and (t2.fields->>'C 1')::int < 10) from ft1 t1 where (t1.fields->>'C 1')::int = 6) from ft2 t2 where (t2.fields->>'c2')::int % 6 = 0 order by 1;
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Foreign Scan on public.ft2 t2
               Output: (SubPlan 1)
               InfluxDB query: SELECT * FROM "T1" WHERE ((("c2" % 6) = 0))
               SubPlan 1
                 ->  Aggregate
                       Output: count((t1.fields ->> 'C 1'::text)) FILTER (WHERE ((((t2.fields ->> 'c2'::text))::integer = 6) AND (((t2.fields ->> 'C 1'::text))::integer < 10)))
                       ->  Foreign Scan on public.ft1 t1
                             Output: t1."time", t1.tags, t1.fields
                             InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 6))
(14 rows)

--Testcase 242:
select distinct (select count(t1.fields->>'C 1') filter (where (t2.fields->>'c2')::int = 6 and (t2.fields->>'C 1')::int < 10) from ft1 t1 where (t1.fields->>'C 1')::int = 6) from ft2 t2 where (t2.fields->>'c2')::int % 6 = 0 order by 1;
 count 
-------
     0
     1
(2 rows)

-- Aggregate not pushed down as FILTER condition is not pushable
--Testcase 243:
explain (verbose, costs off)
select sum((fields->>'C 1')::int) filter (where ((fields->>'C 1')::int / (fields->>'C 1')::int) * random() <= 1) from ft1 group by fields->>'c2' order by 1;
                                                                                                                 QUERY PLAN                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(((fields ->> 'C 1'::text))::integer) FILTER (WHERE ((((((fields ->> 'C 1'::text))::integer / ((fields ->> 'C 1'::text))::integer))::double precision * random()) <= '1'::double precision))), ((fields ->> 'c2'::text))
   Sort Key: (sum(((ft1.fields ->> 'C 1'::text))::integer) FILTER (WHERE ((((((ft1.fields ->> 'C 1'::text))::integer / ((ft1.fields ->> 'C 1'::text))::integer))::double precision * random()) <= '1'::double precision)))
   ->  HashAggregate
         Output: sum(((fields ->> 'C 1'::text))::integer) FILTER (WHERE ((((((fields ->> 'C 1'::text))::integer / ((fields ->> 'C 1'::text))::integer))::double precision * random()) <= '1'::double precision)), ((fields ->> 'c2'::text))
         Group Key: (ft1.fields ->> 'c2'::text)
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1"
(9 rows)

--Testcase 244:
explain (verbose, costs off)
select sum((fields->>'c2')::int) filter (where (fields->>'c2')::int in (select (fields->>'c2')::int from ft1 where (fields->>'c2')::int < 5)) from ft1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Aggregate
   Output: sum(((ft1.fields ->> 'c2'::text))::integer) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1
         Output: ft1."time", ft1.tags, ft1.fields
         InfluxDB query: SELECT * FROM "T1"
   SubPlan 1
     ->  Foreign Scan on public.ft1 ft1_1
           Output: ((ft1_1.fields ->> 'c2'::text))::integer
           InfluxDB query: SELECT "c2" FROM "T1" WHERE (("c2" < 5))
(9 rows)

-- Ordered-sets within aggregate
--Testcase 245:
explain (verbose, costs off)
select (fields->>'c2')::int c2, rank('10'::varchar) within group (order by fields->>'c6'), percentile_cont((fields->>'c2')::int/10::numeric) within group (order by (fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 10 group by fields->>'c2' having percentile_cont((fields->>'c2')::int/10::numeric) within group (order by (fields->>'C 1')::int) < 500 order by (fields->>'c2')::int;
                                                                                                                                                                 QUERY PLAN                                                                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (rank('10'::text) WITHIN GROUP (ORDER BY (fields ->> 'c6'::text))), (percentile_cont(((((((fields ->> 'c2'::text)))::integer)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((((fields ->> 'C 1'::text))::integer)::double precision))), ((fields ->> 'c2'::text))
   Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer)
   ->  GroupAggregate
         Output: (((fields ->> 'c2'::text)))::integer, rank('10'::text) WITHIN GROUP (ORDER BY (fields ->> 'c6'::text)), percentile_cont(((((((fields ->> 'c2'::text)))::integer)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((((fields ->> 'C 1'::text))::integer)::double precision)), ((fields ->> 'c2'::text))
         Group Key: ((ft1.fields ->> 'c2'::text))
         Filter: (percentile_cont(((((((ft1.fields ->> 'c2'::text)))::integer)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((((ft1.fields ->> 'C 1'::text))::integer)::double precision)) < '500'::double precision)
         ->  Sort
               Output: ((fields ->> 'c2'::text)), fields
               Sort Key: ((ft1.fields ->> 'c2'::text))
               ->  Foreign Scan on public.ft1
                     Output: (fields ->> 'c2'::text), fields
                     InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 10))
(13 rows)

--Testcase 246:
select (fields->>'c2')::int c2, rank('10'::varchar) within group (order by fields->>'c6'), percentile_cont((fields->>'c2')::int/10::numeric) within group (order by (fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 10 group by fields->>'c2' having percentile_cont((fields->>'c2')::int/10::numeric) within group (order by (fields->>'C 1')::int) < 500 order by (fields->>'c2')::int;
 c2 | rank | percentile_cont 
----+------+-----------------
  0 |  101 |              10
  1 |  101 |             100
  2 |    1 |             200
  3 |    1 |             300
  4 |    1 |             400
(5 rows)

-- Using multiple arguments within aggregates
--Testcase 247:
explain (verbose, costs off)
select (fields->>'C 1')::int c1, rank(fields->>'C 1', fields->>'c2') within group (order by fields->>'C 1', fields->>'c2') from ft1 group by fields->>'C 1', fields->>'c2' having (fields->>'C 1')::int = 6 order by 1;
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: (((fields ->> 'C 1'::text)))::integer, rank(((fields ->> 'C 1'::text)), ((fields ->> 'c2'::text))) WITHIN GROUP (ORDER BY ((fields ->> 'C 1'::text)), ((fields ->> 'c2'::text))), ((fields ->> 'C 1'::text)), ((fields ->> 'c2'::text))
   Group Key: ((ft1.fields ->> 'C 1'::text)), ((ft1.fields ->> 'c2'::text))
   ->  Sort
         Output: ((fields ->> 'C 1'::text)), ((fields ->> 'c2'::text)), fields
         Sort Key: ((ft1.fields ->> 'C 1'::text)), ((ft1.fields ->> 'c2'::text))
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'C 1'::text), (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 6))
(9 rows)

--Testcase 248:
select (fields->>'C 1')::int c1, rank(fields->>'C 1', fields->>'c2') within group (order by fields->>'C 1', fields->>'c2') from ft1 group by fields->>'C 1', fields->>'c2' having (fields->>'C 1')::int = 6 order by 1;
 c1 | rank 
----+------
  6 |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
--Testcase 249:
create function least_accum(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
--Testcase 250:
create aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);
-- Disable hash aggregation for plan stability.
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
--Testcase 251:
explain (verbose, costs off)
select (fields->>'c2')::int c2, least_agg((fields->>'C 1')::int) from ft1 group by fields->>'c2' order by (fields->>'c2')::int;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (least_agg(VARIADIC ARRAY[((fields ->> 'C 1'::text))::integer])), ((fields ->> 'c2'::text))
   Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer)
   ->  GroupAggregate
         Output: (((fields ->> 'c2'::text)))::integer, least_agg(VARIADIC ARRAY[((fields ->> 'C 1'::text))::integer]), ((fields ->> 'c2'::text))
         Group Key: ((ft1.fields ->> 'c2'::text))
         ->  Sort
               Output: ((fields ->> 'c2'::text)), fields
               Sort Key: ((ft1.fields ->> 'c2'::text))
               ->  Foreign Scan on public.ft1
                     Output: (fields ->> 'c2'::text), fields
                     InfluxDB query: SELECT * FROM "T1"
(12 rows)

-- Add function and aggregate into extension
alter extension influxdb_fdw add function least_accum(anyelement, variadic anyarray);
alter extension influxdb_fdw add aggregate least_agg(variadic items anyarray);
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
--Testcase 252:
explain (verbose, costs off)
select (fields->>'c2')::int c2, least_agg((fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 100 group by fields->>'c2' order by (fields->>'c2')::int;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (least_agg(VARIADIC ARRAY[((fields ->> 'C 1'::text))::integer])), ((fields ->> 'c2'::text))
   Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer)
   ->  GroupAggregate
         Output: (((fields ->> 'c2'::text)))::integer, least_agg(VARIADIC ARRAY[((fields ->> 'C 1'::text))::integer]), ((fields ->> 'c2'::text))
         Group Key: ((ft1.fields ->> 'c2'::text))
         ->  Sort
               Output: ((fields ->> 'c2'::text)), fields
               Sort Key: ((ft1.fields ->> 'c2'::text))
               ->  Foreign Scan on public.ft1
                     Output: (fields ->> 'c2'::text), fields
                     InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 100))
(12 rows)

--Testcase 253:
select (fields->>'c2')::int c2, least_agg((fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 100 group by fields->>'c2' order by (fields->>'c2')::int;
 c2 | least_agg 
----+-----------
  0 |        10
  1 |         1
  2 |         2
  3 |         3
  4 |         4
  5 |         5
  6 |         6
  7 |         7
  8 |         8
  9 |         9
(10 rows)

-- Remove function and aggregate from extension
alter extension influxdb_fdw drop function least_accum(anyelement, variadic anyarray);
alter extension influxdb_fdw drop aggregate least_agg(variadic items anyarray);
-- Not pushed down as we have dropped objects from extension.
--Testcase 254:
explain (verbose, costs off)
select (fields->>'c2')::int c2, least_agg((fields->>'C 1')::int) from ft1 group by fields->>'c2' order by (fields->>'c2')::int;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (least_agg(VARIADIC ARRAY[((fields ->> 'C 1'::text))::integer])), ((fields ->> 'c2'::text))
   Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer)
   ->  GroupAggregate
         Output: (((fields ->> 'c2'::text)))::integer, least_agg(VARIADIC ARRAY[((fields ->> 'C 1'::text))::integer]), ((fields ->> 'c2'::text))
         Group Key: ((ft1.fields ->> 'c2'::text))
         ->  Sort
               Output: ((fields ->> 'c2'::text)), fields
               Sort Key: ((ft1.fields ->> 'c2'::text))
               ->  Foreign Scan on public.ft1
                     Output: (fields ->> 'c2'::text), fields
                     InfluxDB query: SELECT * FROM "T1"
(12 rows)

-- Cleanup
reset enable_hashagg;
--Testcase 255:
drop aggregate least_agg(variadic items anyarray);
--Testcase 256:
drop function least_accum(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
--Testcase 257:
create operator public.<^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4eq
);
--Testcase 258:
create operator public.=^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4lt
);
--Testcase 259:
create operator public.>^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4gt
);
--Testcase 260:
create operator family my_op_family using btree;
--Testcase 261:
create function my_op_cmp(a int, b int) returns int as
  $$begin return btint4cmp(a, b); end $$ language plpgsql;
--Testcase 262:
create operator class my_op_class for type int using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(int, int);
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
--Testcase 263:
explain (verbose, costs off)
select array_agg((fields->>'C 1')::int order by (fields->>'C 1')::int using operator(public.<^)) from ft2 where (fields->>'c2')::int = 6 and (fields->>'C 1')::int < 100 group by fields->>'c2';
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(((fields ->> 'C 1'::text))::integer ORDER BY ((fields ->> 'C 1'::text))::integer USING <^ NULLS LAST), ((fields ->> 'c2'::text))
   Group Key: ((ft2.fields ->> 'c2'::text))
   ->  Sort
         Output: ((fields ->> 'c2'::text)), fields
         Sort Key: ((ft2.fields ->> 'c2'::text))
         ->  Foreign Scan on public.ft2
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 100)) AND (("c2" = 6))
(9 rows)

-- Update local stats on ft2
--ANALYZE ft2;
-- Add into extension
alter extension influxdb_fdw add operator class my_op_class using btree;
alter extension influxdb_fdw add function my_op_cmp(a int, b int);
alter extension influxdb_fdw add operator family my_op_family using btree;
alter extension influxdb_fdw add operator public.<^(int, int);
alter extension influxdb_fdw add operator public.=^(int, int);
alter extension influxdb_fdw add operator public.>^(int, int);
-- Now this will be pushed as sort operator is part of the extension.
--Testcase 264:
explain (verbose, costs off)
select array_agg((fields->>'C 1')::int order by (fields->>'C 1')::int using operator(public.<^)) from ft2 where (fields->>'c2')::int = 6 and (fields->>'C 1')::int < 100 group by fields->>'c2';
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(((fields ->> 'C 1'::text))::integer ORDER BY ((fields ->> 'C 1'::text))::integer USING <^ NULLS LAST), ((fields ->> 'c2'::text))
   Group Key: ((ft2.fields ->> 'c2'::text))
   ->  Sort
         Output: ((fields ->> 'c2'::text)), fields
         Sort Key: ((ft2.fields ->> 'c2'::text))
         ->  Foreign Scan on public.ft2
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 100)) AND (("c2" = 6))
(9 rows)

--Testcase 265:
select array_agg((fields->>'C 1')::int order by (fields->>'C 1')::int using operator(public.<^)) from ft2 where (fields->>'c2')::int = 6 and (fields->>'C 1')::int < 100 group by fields->>'c2';
           array_agg            
--------------------------------
 {6,16,26,36,46,56,66,76,86,96}
(1 row)

-- Remove from extension
alter extension influxdb_fdw drop operator class my_op_class using btree;
alter extension influxdb_fdw drop function my_op_cmp(a int, b int);
alter extension influxdb_fdw drop operator family my_op_family using btree;
alter extension influxdb_fdw drop operator public.<^(int, int);
alter extension influxdb_fdw drop operator public.=^(int, int);
alter extension influxdb_fdw drop operator public.>^(int, int);
-- This will not be pushed as sort operator is now removed from the extension.
--Testcase 266:
explain (verbose, costs off)
select array_agg((fields->>'C 1')::int order by (fields->>'C 1')::int using operator(public.<^)) from ft2 where (fields->>'c2')::int = 6 and (fields->>'C 1')::int < 100 group by fields->>'c2';
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(((fields ->> 'C 1'::text))::integer ORDER BY ((fields ->> 'C 1'::text))::integer USING <^ NULLS LAST), ((fields ->> 'c2'::text))
   Group Key: ((ft2.fields ->> 'c2'::text))
   ->  Sort
         Output: ((fields ->> 'c2'::text)), fields
         Sort Key: ((ft2.fields ->> 'c2'::text))
         ->  Foreign Scan on public.ft2
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 100)) AND (("c2" = 6))
(9 rows)

-- Cleanup
--Testcase 267:
drop operator class my_op_class using btree;
--Testcase 268:
drop function my_op_cmp(a int, b int);
--Testcase 269:
drop operator family my_op_family using btree;
--Testcase 270:
drop operator public.>^(int, int);
--Testcase 271:
drop operator public.=^(int, int);
--Testcase 272:
drop operator public.<^(int, int);
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
--Testcase 273:
explain (verbose, costs off)
select count(t1.c3) from ((SELECT fields->>'C 1' c1, fields->>'c2' c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2)) t1 left join ((SELECT fields->>'C 1' c1, fields->>'c2' c2, tags->>'c3' c3, fields->>'c4' c4, fields->>'c5' c5, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2)) t2 on ((t1.c1)::int = random() * (t2.c2)::int);
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((ft2.tags ->> 'c3'::text))
   ->  Nested Loop Left Join
         Output: ft2.tags
         Join Filter: ((((ft2.fields ->> 'C 1'::text))::integer)::double precision = (random() * (((ft2_1.fields ->> 'c2'::text))::integer)::double precision))
         ->  Foreign Scan on public.ft2
               Output: ft2."time", ft2.tags, ft2.fields
               InfluxDB query: SELECT * FROM "T1"
         ->  Materialize
               Output: ft2_1.fields
               ->  Foreign Scan on public.ft2 ft2_1
                     Output: ft2_1.fields
                     InfluxDB query: SELECT * FROM "T1"
(13 rows)

-- Subquery in FROM clause having aggregate
--Testcase 274:
explain (verbose, costs off)
select count(*), x.b from ft1, (select (fields->>'c2')::int a, sum((fields->>'C 1')::int) b from ft1 group by fields->>'c2') x where (ft1.fields->>'c2')::int = x.a group by x.b order by 1, 2;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), x.b
   Sort Key: (count(*)), x.b
   ->  HashAggregate
         Output: count(*), x.b
         Group Key: x.b
         ->  Merge Join
               Output: x.b
               Merge Cond: (x.a = (((ft1.fields ->> 'c2'::text))::integer))
               ->  Sort
                     Output: x.b, x.a
                     Sort Key: x.a
                     ->  Subquery Scan on x
                           Output: x.b, x.a
                           ->  HashAggregate
                                 Output: (((ft1_1.fields ->> 'c2'::text)))::integer, sum(((ft1_1.fields ->> 'C 1'::text))::integer), ((ft1_1.fields ->> 'c2'::text))
                                 Group Key: (ft1_1.fields ->> 'c2'::text)
                                 ->  Foreign Scan on public.ft1 ft1_1
                                       Output: (ft1_1.fields ->> 'c2'::text), ft1_1.fields
                                       InfluxDB query: SELECT * FROM "T1"
               ->  Sort
                     Output: ft1.fields, (((ft1.fields ->> 'c2'::text))::integer)
                     Sort Key: (((ft1.fields ->> 'c2'::text))::integer)
                     ->  Foreign Scan on public.ft1
                           Output: ft1.fields, ((ft1.fields ->> 'c2'::text))::integer
                           InfluxDB query: SELECT * FROM "T1"
(26 rows)

--Testcase 275:
select count(*), x.b from ft1, (select (fields->>'c2')::int a, sum((fields->>'C 1')::int) b from ft1 group by fields->>'c2') x where (ft1.fields->>'c2')::int = x.a group by x.b order by 1, 2;
 count |   b   
-------+-------
   100 | 49600
   100 | 49700
   100 | 49800
   100 | 49900
   100 | 50000
   100 | 50100
   100 | 50200
   100 | 50300
   100 | 50400
   100 | 50500
(10 rows)

-- FULL join with IS NULL check in HAVING
--Testcase 276:
explain (verbose, costs off)
select avg((t1.c1)::int), sum((t2.c1)::int) from (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 full join (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 on ((t1.c1)::int = (t2.c1)::int) group by t2.c1 having (avg((t1.c1)::int) is null and sum((t2.c1)::int) < 10) or sum((t2.c1)::int) is null order by 1 nulls last, 2;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (avg(((t1.fields ->> 'c1'::text))::integer)), (sum((((t2.fields ->> 'c1'::text))::integer))), (((t2.fields ->> 'c1'::text))::integer)
   Sort Key: (avg(((t1.fields ->> 'c1'::text))::integer)), (sum((((t2.fields ->> 'c1'::text))::integer)))
   ->  HashAggregate
         Output: avg(((t1.fields ->> 'c1'::text))::integer), sum((((t2.fields ->> 'c1'::text))::integer)), (((t2.fields ->> 'c1'::text))::integer)
         Group Key: ((t2.fields ->> 'c1'::text))::integer
         Filter: (((avg(((t1.fields ->> 'c1'::text))::integer) IS NULL) AND (sum((((t2.fields ->> 'c1'::text))::integer)) < 10)) OR (sum((((t2.fields ->> 'c1'::text))::integer)) IS NULL))
         ->  Merge Full Join
               Output: ((t2.fields ->> 'c1'::text))::integer, t1.fields, t2.fields
               Merge Cond: ((((t1.fields ->> 'c1'::text))::integer) = (((t2.fields ->> 'c1'::text))::integer))
               ->  Sort
                     Output: t1.fields, (((t1.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t1.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.fields, ((t1.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T3"
               ->  Sort
                     Output: t2.fields, (((t2.fields ->> 'c1'::text))::integer)
                     Sort Key: (((t2.fields ->> 'c1'::text))::integer)
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.fields, ((t2.fields ->> 'c1'::text))::integer
                           InfluxDB query: SELECT * FROM "T4"
(22 rows)

--Testcase 277:
select avg((t1.c1)::int), sum((t2.c1)::int) from (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft4 t1) t1 full join (SELECT (fields->>'c1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft5 t2) t2 on ((t1.c1)::int = (t2.c1)::int) group by t2.c1 having (avg((t1.c1)::int) is null and sum((t2.c1)::int) < 10) or sum((t2.c1)::int) is null order by 1 nulls last, 2;
         avg         | sum 
---------------------+-----
 51.0000000000000000 |    
                     |   3
                     |   9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
--Testcase 278:
explain (verbose, costs off)
select count(*), sum((t1.c1)::int), avg((t2.c1)::int) from (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 full join (SELECT (fields->>'c1')::int c1 FROM ft5 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 on ((t1.c1)::int = (t2.c1)::int);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(((t1.fields ->> 'c1'::text))::integer), avg(((t2.fields ->> 'c1'::text))::integer)
   ->  Hash Full Join
         Output: t1.fields, t2.fields
         Hash Cond: (((t1.fields ->> 'c1'::text))::integer = ((t2.fields ->> 'c1'::text))::integer)
         ->  Foreign Scan on public.ft4 t1
               Output: t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: t2.fields
               ->  Foreign Scan on public.ft5 t2
                     Output: t2.fields
                     InfluxDB query: SELECT * FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(13 rows)

--Testcase 279:
select count(*), sum((t1.c1)::int), avg((t2.c1)::int) from (SELECT (fields->>'c1')::int c1 FROM ft4 t1 WHERE (fields->>'c1')::int between 50 and 60) t1 full join (SELECT (fields->>'c1')::int c1 FROM ft5 t2 WHERE (fields->>'c1')::int between 50 and 60) t2 on ((t1.c1)::int = (t2.c1)::int);
 count | sum |         avg         
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
--Testcase 280:
explain (verbose, costs off)
select sum((fields->>'c2')::int) * (random() <= 1)::int as sum from ft1 order by 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort
   Output: (((sum(((fields ->> 'c2'::text))::integer)) * ((random() <= '1'::double precision))::integer))
   Sort Key: (((sum(((ft1.fields ->> 'c2'::text))::integer)) * ((random() <= '1'::double precision))::integer))
   ->  Foreign Scan
         Output: ((sum(((fields ->> 'c2'::text))::integer)) * ((random() <= '1'::double precision))::integer)
         InfluxDB query: SELECT sum("c2") FROM "T1"
(6 rows)

--Testcase 281:
select sum((fields->>'c2')::int) * (random() <= 1)::int as sum from ft1 order by 1;
 sum  
------
 4500
(1 row)

-- LATERAL join, with parameterization
set enable_hashagg to false;
--Testcase 282:
explain (verbose, costs off)
select (fields->>'c2')::int c2, sum from "S 1"."T 1" t1, lateral (select sum((t2.fields->>'C 1')::int + (t1.fields->>'C 1')::int) sum from ft2 t2 group by t2.fields->>'C 1') qry where (t1.fields->>'c2')::int * 2 = qry.sum and (t1.fields->>'c2')::int < 3 and (t1.fields->>'C 1')::int < 100 order by 1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (((t1.fields ->> 'c2'::text))::integer), qry.sum
   Sort Key: (((t1.fields ->> 'c2'::text))::integer)
   ->  Nested Loop
         Output: ((t1.fields ->> 'c2'::text))::integer, qry.sum
         ->  Foreign Scan on "S 1"."T 1" t1
               Output: t1."time", t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 3)) AND (("C 1" < 100))
         ->  Subquery Scan on qry
               Output: qry.sum, ((t2.fields ->> 'C 1'::text))
               Filter: ((((t1.fields ->> 'c2'::text))::integer * 2) = qry.sum)
               ->  GroupAggregate
                     Output: sum(((((t2.fields ->> 'C 1'::text)))::integer + ((t1.fields ->> 'C 1'::text))::integer)), ((t2.fields ->> 'C 1'::text))
                     Group Key: ((t2.fields ->> 'C 1'::text))
                     ->  Sort
                           Output: ((t2.fields ->> 'C 1'::text)), t2.fields
                           Sort Key: ((t2.fields ->> 'C 1'::text))
                           ->  Foreign Scan on public.ft2 t2
                                 Output: (t2.fields ->> 'C 1'::text), t2.fields
                                 InfluxDB query: SELECT * FROM "T1"
(20 rows)

--Testcase 283:
select (fields->>'c2')::int c2, sum from "S 1"."T 1" t1, lateral (select sum((t2.fields->>'C 1')::int + (t1.fields->>'C 1')::int) sum from ft2 t2 group by t2.fields->>'C 1') qry where (t1.fields->>'c2')::int * 2 = qry.sum and (t1.fields->>'c2')::int < 3 and (t1.fields->>'C 1')::int < 100 order by 1;
 c2 | sum 
----+-----
  1 |   2
  2 |   4
(2 rows)

reset enable_hashagg;
-- bug #15613: bad plan for foreign table scan with lateral reference
--Testcase 284:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT (ref_0.fields->>'c2')::int c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT (ref_0.fields->>'C 1')::int c1, subq_0.*
        FROM (SELECT (ref_0.fields->>'c2')::int c2, ref_1.tags->>'c3' c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.tags->>'c3')
    ) AS subq_1
WHERE (ref_0.fields->>'C 1')::int < 10 AND subq_1.c3 = '00001'
ORDER BY (ref_0.fields->>'C 1')::int;
                                                                                                        QUERY PLAN                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (((ref_0.fields ->> 'c2'::text))::integer), (((ref_0.fields ->> 'C 1'::text))::integer), (((ref_0.fields ->> 'c2'::text))::integer), ((ref_1.tags ->> 'c3'::text)), (((ref_0.fields ->> 'C 1'::text))::integer)
   Sort Key: (((ref_0.fields ->> 'C 1'::text))::integer)
   ->  Nested Loop
         Output: ((ref_0.fields ->> 'c2'::text))::integer, ((ref_0.fields ->> 'C 1'::text))::integer, (((ref_0.fields ->> 'c2'::text))::integer), (ref_1.tags ->> 'c3'::text), ((ref_0.fields ->> 'C 1'::text))::integer
         ->  Nested Loop
               Output: ref_0.fields, ref_1.tags, (((ref_0.fields ->> 'c2'::text))::integer)
               ->  Foreign Scan on "S 1"."T 1" ref_0
                     Output: ref_0."time", ref_0.tags, ref_0.fields
                     InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 10))
               ->  Foreign Scan on public.ft1 ref_1
                     Output: ref_1.tags, ((ref_0.fields ->> 'c2'::text))::integer
                     InfluxDB query: SELECT * FROM "T1" WHERE (("c3" = '00001'))
         ->  Materialize
               Output: ref_3.tags
               ->  Foreign Scan on public.ft2 ref_3
                     Output: ref_3.tags
                     InfluxDB query: SELECT * FROM "T1" WHERE (("c3" = '00001'))
(18 rows)

--Testcase 285:
SELECT (ref_0.fields->>'c2')::int c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT (ref_0.fields->>'C 1')::int c1, subq_0.*
        FROM (SELECT (ref_0.fields->>'c2')::int c2, ref_1.tags->>'c3' c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.tags->>'c3')
    ) AS subq_1
WHERE (ref_0.fields->>'C 1')::int < 10 AND subq_1.c3 = '00001'
ORDER BY (ref_0.fields->>'C 1')::int;
 c2 | c1 | c2 |  c3   
----+----+----+-------
  1 |  1 |  1 | 00001
  2 |  2 |  2 | 00001
  3 |  3 |  3 | 00001
  4 |  4 |  4 | 00001
  5 |  5 |  5 | 00001
  6 |  6 |  6 | 00001
  7 |  7 |  7 | 00001
  8 |  8 |  8 | 00001
  9 |  9 |  9 | 00001
(9 rows)

-- Check with placeHolderVars
--Testcase 286:
explain (verbose, costs off)
select sum(q.a), count(q.b) from ft4 left join (select 13, avg((ft1.fields->>'C 1')::int), sum((ft2.fields->>'C 1')::int) from ft1 right join ft2 on ((ft1.fields->>'C 1')::int = (ft2.fields->>'C 1')::int)) q(a, b, c) on ((ft4.fields->>'c1')::int <= q.b);
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(q.a), count(q.b)
   ->  Nested Loop Left Join
         Output: q.a, q.b
         Inner Unique: true
         Join Filter: ((((ft4.fields ->> 'c1'::text))::integer)::numeric <= q.b)
         ->  Foreign Scan on public.ft4
               Output: ft4.tags, ft4.fields
               InfluxDB query: SELECT * FROM "T3"
         ->  Materialize
               Output: q.a, q.b
               ->  Subquery Scan on q
                     Output: q.a, q.b
                     ->  Aggregate
                           Output: 13, avg(((ft1.fields ->> 'C 1'::text))::integer), NULL::bigint
                           ->  Merge Left Join
                                 Output: ft1.fields
                                 Merge Cond: ((((ft2.fields ->> 'C 1'::text))::integer) = (((ft1.fields ->> 'C 1'::text))::integer))
                                 ->  Sort
                                       Output: ft2.fields, (((ft2.fields ->> 'C 1'::text))::integer)
                                       Sort Key: (((ft2.fields ->> 'C 1'::text))::integer)
                                       ->  Foreign Scan on public.ft2
                                             Output: ft2.fields, ((ft2.fields ->> 'C 1'::text))::integer
                                             InfluxDB query: SELECT * FROM "T1"
                                 ->  Sort
                                       Output: ft1.fields, (((ft1.fields ->> 'C 1'::text))::integer)
                                       Sort Key: (((ft1.fields ->> 'C 1'::text))::integer)
                                       ->  Foreign Scan on public.ft1
                                             Output: ft1.fields, ((ft1.fields ->> 'C 1'::text))::integer
                                             InfluxDB query: SELECT * FROM "T1"
(30 rows)

--Testcase 287:
select sum(q.a), count(q.b) from ft4 left join (select 13, avg((ft1.fields->>'C 1')::int), sum((ft2.fields->>'C 1')::int) from ft1 right join ft2 on ((ft1.fields->>'C 1')::int = (ft2.fields->>'C 1')::int)) q(a, b, c) on ((ft4.fields->>'c1')::int <= q.b);
 sum | count 
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
--Testcase 288:
explain (verbose, costs off)
select (fields->>'c2')::int c2, sum((fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 3 group by rollup((fields->>'c2')::int) order by 1 nulls last;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: (((fields ->> 'c2'::text))::integer), (sum(((fields ->> 'C 1'::text))::integer))
   Sort Key: (((ft1.fields ->> 'c2'::text))::integer)
   ->  MixedAggregate
         Output: (((fields ->> 'c2'::text))::integer), sum(((fields ->> 'C 1'::text))::integer)
         Hash Key: ((ft1.fields ->> 'c2'::text))::integer
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: ((fields ->> 'c2'::text))::integer, fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 3))
(10 rows)

--Testcase 289:
select (fields->>'c2')::int c2, sum((fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 3 group by rollup((fields->>'c2')::int) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 290:
explain (verbose, costs off)
select (fields->>'c2')::int c2, sum((fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 3 group by cube((fields->>'c2')::int) order by 1 nulls last;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: (((fields ->> 'c2'::text))::integer), (sum(((fields ->> 'C 1'::text))::integer))
   Sort Key: (((ft1.fields ->> 'c2'::text))::integer)
   ->  MixedAggregate
         Output: (((fields ->> 'c2'::text))::integer), sum(((fields ->> 'C 1'::text))::integer)
         Hash Key: ((ft1.fields ->> 'c2'::text))::integer
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: ((fields ->> 'c2'::text))::integer, fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 3))
(10 rows)

--Testcase 291:
select (fields->>'c2')::int c2, sum((fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 3 group by cube((fields->>'c2')::int) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 292:
explain (verbose, costs off)
select (fields->>'c2')::int c2, fields->>'c6' c6, sum((fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 3 group by grouping sets(fields->>'c2', fields->>'c6') order by 1 nulls last, 2 nulls last;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), ((fields ->> 'c6'::text)), (sum(((fields ->> 'C 1'::text))::integer)), ((fields ->> 'c2'::text))
   Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer), ((ft1.fields ->> 'c6'::text))
   ->  HashAggregate
         Output: (((fields ->> 'c2'::text)))::integer, ((fields ->> 'c6'::text)), sum(((fields ->> 'C 1'::text))::integer), ((fields ->> 'c2'::text))
         Hash Key: (ft1.fields ->> 'c2'::text)
         Hash Key: (ft1.fields ->> 'c6'::text)
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'c6'::text), (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 3))
(10 rows)

--Testcase 293:
select (fields->>'c2')::int c2, fields->>'c6' c6, sum((fields->>'C 1')::int) from ft1 where (fields->>'c2')::int < 3 group by grouping sets(fields->>'c2', fields->>'c6') order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum  
----+----+-------
  0 |    | 50500
  1 |    | 49600
  2 |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

--Testcase 294:
explain (verbose, costs off)
select (fields->>'c2')::int c2, sum((fields->>'C 1')::int), grouping(fields->>'c2') from ft1 where (fields->>'c2')::int < 3 group by fields->>'c2' order by 1 nulls last;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (sum(((fields ->> 'C 1'::text))::integer)), (GROUPING(((fields ->> 'c2'::text)))), ((fields ->> 'c2'::text))
   Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer)
   ->  HashAggregate
         Output: (((fields ->> 'c2'::text)))::integer, sum(((fields ->> 'C 1'::text))::integer), GROUPING(((fields ->> 'c2'::text))), ((fields ->> 'c2'::text))
         Group Key: (ft1.fields ->> 'c2'::text)
         ->  Foreign Scan on public.ft1
               Output: (fields ->> 'c2'::text), fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 3))
(9 rows)

--Testcase 295:
select (fields->>'c2')::int c2, sum((fields->>'C 1')::int), grouping(fields->>'c2') from ft1 where (fields->>'c2')::int < 3 group by fields->>'c2' order by 1 nulls last;
 c2 |  sum  | grouping 
----+-------+----------
  0 | 50500 |        0
  1 | 49600 |        0
  2 | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
--Testcase 296:
explain (verbose, costs off)
select distinct sum((fields->>'C 1')::int)/1000 s from ft2 where (fields->>'c2')::int < 6 group by fields->>'c2' order by 1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Unique
   Output: ((sum(((fields ->> 'C 1'::text))::integer) / 1000)), ((fields ->> 'c2'::text))
   ->  Sort
         Output: ((sum(((fields ->> 'C 1'::text))::integer) / 1000)), ((fields ->> 'c2'::text))
         Sort Key: ((sum(((ft2.fields ->> 'C 1'::text))::integer) / 1000))
         ->  HashAggregate
               Output: (sum(((fields ->> 'C 1'::text))::integer) / 1000), ((fields ->> 'c2'::text))
               Group Key: (ft2.fields ->> 'c2'::text)
               ->  Foreign Scan on public.ft2
                     Output: (fields ->> 'c2'::text), fields
                     InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 6))
(11 rows)

--Testcase 297:
select distinct sum((fields->>'C 1')::int)/1000 s from ft2 where (fields->>'c2')::int < 6 group by fields->>'c2' order by 1;
 s  
----
 49
 50
(2 rows)

-- WindowAgg
--Testcase 298:
explain (verbose, costs off)
select (fields->>'c2')::int c2, sum((fields->>'c2')::int), count((fields->>'c2')::int) over (partition by (fields->>'c2')::int%2) from ft2 where (fields->>'c2')::int < 10 group by fields->>'c2' order by 1;
                                                                                                            QUERY PLAN                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (sum((((fields ->> 'c2'::text)))::integer)), (count((((fields ->> 'c2'::text)))::integer) OVER (?)), ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2))
   Sort Key: ((((ft2.fields ->> 'c2'::text)))::integer)
   ->  WindowAgg
         Output: (((fields ->> 'c2'::text)))::integer, (sum((((fields ->> 'c2'::text)))::integer)), count((((fields ->> 'c2'::text)))::integer) OVER (?), ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2))
         ->  Sort
               Output: ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2)), fields, (sum((((fields ->> 'c2'::text)))::integer))
               Sort Key: (((((ft2.fields ->> 'c2'::text)))::integer % 2))
               ->  HashAggregate
                     Output: ((fields ->> 'c2'::text)), ((((fields ->> 'c2'::text)))::integer % 2), fields, sum((((fields ->> 'c2'::text)))::integer)
                     Group Key: (ft2.fields ->> 'c2'::text)
                     ->  Foreign Scan on public.ft2
                           Output: (fields ->> 'c2'::text), fields
                           InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 10))
(14 rows)

--Testcase 299:
select (fields->>'c2')::int c2, sum((fields->>'c2')::int), count((fields->>'c2')::int) over (partition by (fields->>'c2')::int%2) from ft2 where (fields->>'c2')::int < 10 group by fields->>'c2' order by 1;
 c2 | sum | count 
----+-----+-------
  0 |   0 |     5
  1 | 100 |     5
  2 | 200 |     5
  3 | 300 |     5
  4 | 400 |     5
  5 | 500 |     5
  6 | 600 |     5
  7 | 700 |     5
  8 | 800 |     5
  9 | 900 |     5
(10 rows)

--Testcase 300:
explain (verbose, costs off)
select (fields->>'c2')::int c2, array_agg((fields->>'c2')::int) over (partition by (fields->>'c2')::int%2 order by (fields->>'c2')::int desc) from ft1 where (fields->>'c2')::int < 10 group by fields->>'c2' order by 1;
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (array_agg(((((fields ->> 'c2'::text)))::integer)) OVER (?)), ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2))
   Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer)
   ->  WindowAgg
         Output: ((((fields ->> 'c2'::text)))::integer), array_agg(((((fields ->> 'c2'::text)))::integer)) OVER (?), ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2))
         ->  Sort
               Output: ((((fields ->> 'c2'::text)))::integer), ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2)), fields
               Sort Key: (((((ft1.fields ->> 'c2'::text)))::integer % 2)), ((((ft1.fields ->> 'c2'::text)))::integer) DESC
               ->  HashAggregate
                     Output: (((fields ->> 'c2'::text)))::integer, ((fields ->> 'c2'::text)), ((((fields ->> 'c2'::text)))::integer % 2), fields
                     Group Key: (ft1.fields ->> 'c2'::text)
                     ->  Foreign Scan on public.ft1
                           Output: (fields ->> 'c2'::text), fields
                           InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 10))
(14 rows)

--Testcase 301:
select (fields->>'c2')::int c2, array_agg((fields->>'c2')::int) over (partition by (fields->>'c2')::int%2 order by (fields->>'c2')::int desc) from ft1 where (fields->>'c2')::int < 10 group by fields->>'c2' order by 1;
 c2 |  array_agg  
----+-------------
  0 | {8,6,4,2,0}
  1 | {9,7,5,3,1}
  2 | {8,6,4,2}
  3 | {9,7,5,3}
  4 | {8,6,4}
  5 | {9,7,5}
  6 | {8,6}
  7 | {9,7}
  8 | {8}
  9 | {9}
(10 rows)

--Testcase 302:
explain (verbose, costs off)
select (fields->>'c2')::int c2, array_agg((fields->>'c2')::int) over (partition by (fields->>'c2')::int%2 order by (fields->>'c2')::int range between current row and unbounded following) from ft1 where (fields->>'c2')::int < 10 group by fields->>'c2' order by 1;
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((((fields ->> 'c2'::text)))::integer), (array_agg(((((fields ->> 'c2'::text)))::integer)) OVER (?)), ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2))
   Sort Key: ((((ft1.fields ->> 'c2'::text)))::integer)
   ->  WindowAgg
         Output: ((((fields ->> 'c2'::text)))::integer), array_agg(((((fields ->> 'c2'::text)))::integer)) OVER (?), ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2))
         ->  Sort
               Output: ((((fields ->> 'c2'::text)))::integer), ((fields ->> 'c2'::text)), (((((fields ->> 'c2'::text)))::integer % 2)), fields
               Sort Key: (((((ft1.fields ->> 'c2'::text)))::integer % 2)), ((((ft1.fields ->> 'c2'::text)))::integer)
               ->  HashAggregate
                     Output: (((fields ->> 'c2'::text)))::integer, ((fields ->> 'c2'::text)), ((((fields ->> 'c2'::text)))::integer % 2), fields
                     Group Key: (ft1.fields ->> 'c2'::text)
                     ->  Foreign Scan on public.ft1
                           Output: (fields ->> 'c2'::text), fields
                           InfluxDB query: SELECT * FROM "T1" WHERE (("c2" < 10))
(14 rows)

--Testcase 303:
select (fields->>'c2')::int c2, array_agg((fields->>'c2')::int) over (partition by (fields->>'c2')::int%2 order by (fields->>'c2')::int range between current row and unbounded following) from ft1 where (fields->>'c2')::int < 10 group by fields->>'c2' order by 1;
 c2 |  array_agg  
----+-------------
  0 | {0,2,4,6,8}
  1 | {1,3,5,7,9}
  2 | {2,4,6,8}
  3 | {3,5,7,9}
  4 | {4,6,8}
  5 | {5,7,9}
  6 | {6,8}
  7 | {7,9}
  8 | {8}
  9 | {9}
(10 rows)

-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
--Testcase 304:
PREPARE st1(int, int) AS SELECT t1.tags->>'c3' c3, t2.tags->>'c3' c3 FROM ft1 t1, ft2 t2 WHERE (t1.fields->>'C 1')::int = $1 AND (t2.fields->>'C 1')::int = $2;
--Testcase 305:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
                              QUERY PLAN                              
----------------------------------------------------------------------
 Nested Loop
   Output: (t1.tags ->> 'c3'::text), (t2.tags ->> 'c3'::text)
   ->  Foreign Scan on public.ft1 t1
         Output: t1."time", t1.tags, t1.fields
         InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 1))
   ->  Materialize
         Output: t2.tags
         ->  Foreign Scan on public.ft2 t2
               Output: t2.tags
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 2))
(10 rows)

--Testcase 306:
EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

--Testcase 307:
EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
--Testcase 308:
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int < $2 AND t1.tags->>'c3' IN (SELECT tags->>'c3' FROM ft2 t2 WHERE (fields->>'C 1')::int > $1 AND date(time) = '1970-01-17'::date) ORDER BY (fields->>'C 1')::int;
--Testcase 309:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort
   Output: t1."time", t1.tags, t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
   Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
   ->  Hash Semi Join
         Output: t1."time", t1.tags, t1.fields, ((t1.fields ->> 'C 1'::text))::integer
         Hash Cond: ((t1.tags ->> 'c3'::text) = (t2.tags ->> 'c3'::text))
         ->  Foreign Scan on public.ft1 t1
               Output: t1."time", t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 20))
         ->  Hash
               Output: t2.tags
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.tags
                     Filter: (date(t2."time") = '01-17-1970'::date)
                     InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" > 10))
(15 rows)

--Testcase 310:
EXECUTE st2(10, 20);
           time           |      tags       |                                fields                                
--------------------------+-----------------+----------------------------------------------------------------------
 Sat Jan 17 00:00:00 1970 | {"c3": "00016"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "16"}
(1 row)

--Testcase 311:
EXECUTE st2(101, 121);
           time           |      tags       |                                fields                                 
--------------------------+-----------------+-----------------------------------------------------------------------
 Sat Jan 17 00:00:00 1970 | {"c3": "00116"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "116"}
(1 row)

-- subquery using immutable function (can be sent to remote)
--Testcase 312:
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int < $2 AND t1.tags->>'c3' IN (SELECT tags->>'c3' FROM ft2 t2 WHERE (fields->>'C 1')::int > $1 AND date(time) = '1970-01-17'::date) ORDER BY (fields->>'C 1')::int;
--Testcase 313:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort
   Output: t1."time", t1.tags, t1.fields, (((t1.fields ->> 'C 1'::text))::integer)
   Sort Key: (((t1.fields ->> 'C 1'::text))::integer)
   ->  Hash Semi Join
         Output: t1."time", t1.tags, t1.fields, ((t1.fields ->> 'C 1'::text))::integer
         Hash Cond: ((t1.tags ->> 'c3'::text) = (t2.tags ->> 'c3'::text))
         ->  Foreign Scan on public.ft1 t1
               Output: t1."time", t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" < 20))
         ->  Hash
               Output: t2.tags
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.tags
                     Filter: (date(t2."time") = '01-17-1970'::date)
                     InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" > 10))
(15 rows)

--Testcase 314:
EXECUTE st3(10, 20);
           time           |      tags       |                                fields                                
--------------------------+-----------------+----------------------------------------------------------------------
 Sat Jan 17 00:00:00 1970 | {"c3": "00016"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "16"}
(1 row)

--Testcase 315:
EXECUTE st3(20, 30);
 time | tags | fields 
------+------+--------
(0 rows)

-- custom plan should be chosen initially
--Testcase 316:
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = $1;
--Testcase 317:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 1))
(3 rows)

--Testcase 318:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 1))
(3 rows)

--Testcase 319:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 1))
(3 rows)

--Testcase 320:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 1))
(3 rows)

--Testcase 321:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = 1))
(3 rows)

-- once we try it enough times, should switch to generic plan
--Testcase 322:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                        QUERY PLAN                         
-----------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = $1))
(3 rows)

-- value of $1 should not be sent to remote
--Testcase 323:
PREPARE st5(text,int) AS SELECT * FROM ft1 t1 WHERE fields->>'c8' = $1 and (fields->>'C 1')::int = $2;
--Testcase 324:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = 'foo')) AND (("C 1" = 1))
(3 rows)

--Testcase 325:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = 'foo')) AND (("C 1" = 1))
(3 rows)

--Testcase 326:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = 'foo')) AND (("C 1" = 1))
(3 rows)

--Testcase 327:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = 'foo')) AND (("C 1" = 1))
(3 rows)

--Testcase 328:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = 'foo')) AND (("C 1" = 1))
(3 rows)

--Testcase 329:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("c8" = $1)) AND (("C 1" = $2))
(3 rows)

--Testcase 330:
EXECUTE st5('foo', 1);
           time           |      tags       |                               fields                                
--------------------------+-----------------+---------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
(1 row)

-- altering FDW options requires replanning
--Testcase 331:
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE (t1.fields->>'C 1')::int = (t1.fields->>'c2')::int;
--Testcase 332:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T1" WHERE (("C 1" = "c2"))
(3 rows)

--Testcase 333:
PREPARE st7 AS INSERT INTO ft1_nsc (c1,c2,c3) VALUES (1001,101,'foo');
--Testcase 334:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1_nsc
   ->  Result
         Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::text
(3 rows)

--Testcase 335:
INSERT INTO "S 1".s1t0 SELECT * FROM "S 1".s1t1;
ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T0');
--Testcase 336:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "T0" WHERE (("C 1" = "c2"))
(3 rows)

--Testcase 337:
EXECUTE st6;
           time           |      tags       |                               fields                                
--------------------------+-----------------+---------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
 Sat Jan 03 00:00:00 1970 | {"c3": "00002"} | {"c2": "2", "c6": "2", "c7": "2         ", "c8": "foo", "C 1": "2"}
 Sun Jan 04 00:00:00 1970 | {"c3": "00003"} | {"c2": "3", "c6": "3", "c7": "3         ", "c8": "foo", "C 1": "3"}
 Mon Jan 05 00:00:00 1970 | {"c3": "00004"} | {"c2": "4", "c6": "4", "c7": "4         ", "c8": "foo", "C 1": "4"}
 Tue Jan 06 00:00:00 1970 | {"c3": "00005"} | {"c2": "5", "c6": "5", "c7": "5         ", "c8": "foo", "C 1": "5"}
 Wed Jan 07 00:00:00 1970 | {"c3": "00006"} | {"c2": "6", "c6": "6", "c7": "6         ", "c8": "foo", "C 1": "6"}
 Thu Jan 08 00:00:00 1970 | {"c3": "00007"} | {"c2": "7", "c6": "7", "c7": "7         ", "c8": "foo", "C 1": "7"}
 Fri Jan 09 00:00:00 1970 | {"c3": "00008"} | {"c2": "8", "c6": "8", "c7": "8         ", "c8": "foo", "C 1": "8"}
 Sat Jan 10 00:00:00 1970 | {"c3": "00009"} | {"c2": "9", "c6": "9", "c7": "9         ", "c8": "foo", "C 1": "9"}
(9 rows)

--Testcase 338:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1_nsc
   ->  Result
         Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::text
(3 rows)

--Testcase 339:
DELETE FROM "S 1".s1t0;
ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T1');
--Testcase 340:
PREPARE st8 AS SELECT count(tags->>'c3') FROM ft1 t1 WHERE (t1.fields->>'C 1')::int === (t1.fields->>'c2')::int;
--Testcase 341:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((tags ->> 'c3'::text))
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         Filter: (((t1.fields ->> 'C 1'::text))::integer === ((t1.fields ->> 'c2'::text))::integer)
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

-- Skip, influxdb_fdw does not support extensions
-- ALTER SERVER loopback OPTIONS (DROP extensions);
--Testcase 342:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((tags ->> 'c3'::text))
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         Filter: (((t1.fields ->> 'C 1'::text))::integer === ((t1.fields ->> 'c2'::text))::integer)
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

--Testcase 343:
EXECUTE st8;
 count 
-------
     9
(1 row)

-- ALTER SERVER loopback OPTIONS (ADD extensions 'influxdb_fdw');
-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
--Testcase 344:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                 QUERY PLAN                  
---------------------------------------------
 Limit
   Output: "time", tags, fields
   ->  Foreign Scan on public.ft1 t1
         Output: "time", tags, fields
         Filter: (t1.tableoid = '1259'::oid)
         InfluxDB query: SELECT * FROM "T1"
(6 rows)

--Testcase 345:
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass ORDER BY (fields->>'C 1')::int LIMIT 1;
           time           |      tags       |                               fields                                
--------------------------+-----------------+---------------------------------------------------------------------
 Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
(1 row)

--Testcase 346:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                         QUERY PLAN                         
------------------------------------------------------------
 Limit
   Output: ((tableoid)::regclass), "time", tags, fields
   ->  Foreign Scan on public.ft1 t1
         Output: (tableoid)::regclass, "time", tags, fields
         InfluxDB query: SELECT * FROM "T1"
(5 rows)

--Testcase 347:
SELECT tableoid::regclass, * FROM ft1 t1 ORDER BY (fields->>'C 1')::int LIMIT 1;
 tableoid |           time           |      tags       |                               fields                                
----------+--------------------------+-----------------+---------------------------------------------------------------------
 ft1      | Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
(1 row)

--Testcase 348:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
              QUERY PLAN              
--------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", tags, fields
   Filter: (t1.ctid = '(0,2)'::tid)
   InfluxDB query: SELECT * FROM "T1"
(4 rows)

--Testcase 349:
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 350:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                 QUERY PLAN                 
--------------------------------------------
 Limit
   Output: ctid, "time", tags, fields
   ->  Foreign Scan on public.ft1 t1
         Output: ctid, "time", tags, fields
         InfluxDB query: SELECT * FROM "T1"
(5 rows)

--Testcase 351:
SELECT ctid, * FROM ft1 t1 ORDER BY (fields->>'C 1')::int LIMIT 1;
      ctid      |           time           |      tags       |                               fields                                
----------------+--------------------------+-----------------+---------------------------------------------------------------------
 (4294967295,0) | Fri Jan 02 00:00:00 1970 | {"c3": "00001"} | {"c2": "1", "c6": "1", "c7": "1         ", "c8": "foo", "C 1": "1"}
(1 row)

-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
--Testcase 352:
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
--Testcase 353:
    SELECT fields->>'C 1' INTO v_c1 FROM ft1 WHERE (fields->>'C 1')::int = p_c1 LIMIT 1;
    PERFORM fields->>'C 1' FROM ft1 WHERE (fields->>'C 1')::int = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
--Testcase 354:
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

--Testcase 355:
DROP FUNCTION f_test(int);
-- ===================================================================
-- conversion error
-- ===================================================================
--ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE int;
--Testcase 356:
--SELECT * FROM ft1 WHERE c1 = 1;  -- ERROR
--Testcase 357:
--SELECT  ft1.c1,  ft2.c2, ft1.c8 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
--Testcase 358:
--SELECT  ft1.c1,  ft2.c2, ft1 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
--Testcase 359:
--SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
--ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE text;
/*
-- influxdb_fdw does not support transactions
-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
BEGIN;
DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
FETCH c;
SAVEPOINT s;
ERROR OUT;          -- ERROR
ROLLBACK TO s;
FETCH c;
SAVEPOINT s;
SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
ROLLBACK TO s;
FETCH c;
SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
COMMIT;
*/
-- ===================================================================
-- test handling of collations
-- ===================================================================
--Testcase 360:
create foreign table loct3 (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'loct3', schemaless 'true');
--Testcase 361:
create foreign table ft3 (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'loct3', schemaless 'true');
-- can be sent to remote
--Testcase 362:
explain (verbose, costs off) select * from ft3 where fields->>'f1' = 'foo';
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: fields
   InfluxDB query: SELECT * FROM "loct3" WHERE (("f1" = 'foo'))
(3 rows)

--Testcase 363:
explain (verbose, costs off) select * from ft3 where fields->>'f1' COLLATE "C" = 'foo';
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: fields
   InfluxDB query: SELECT * FROM "loct3" WHERE (("f1" = 'foo'))
(3 rows)

--Testcase 364:
explain (verbose, costs off) select * from ft3 where fields->>'f2' = 'foo';
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: fields
   InfluxDB query: SELECT * FROM "loct3" WHERE (("f2" = 'foo'))
(3 rows)

--Testcase 365:
explain (verbose, costs off) select * from ft3 where fields->>'f3' = 'foo';
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: fields
   InfluxDB query: SELECT * FROM "loct3" WHERE (("f3" = 'foo'))
(3 rows)

--Testcase 366:
explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.fields->>'f3' = l.fields->>'f3' and l.fields->>'f1' = 'foo';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Hash Join
   Output: f.fields, l.fields
   Hash Cond: ((f.fields ->> 'f3'::text) = (l.fields ->> 'f3'::text))
   ->  Foreign Scan on public.ft3 f
         Output: f.fields
         InfluxDB query: SELECT * FROM "loct3"
   ->  Hash
         Output: l.fields
         ->  Foreign Scan on public.loct3 l
               Output: l.fields
               InfluxDB query: SELECT * FROM "loct3" WHERE (("f1" = 'foo'))
(11 rows)

-- can't be sent to remote
--Testcase 367:
explain (verbose, costs off) select * from ft3 where fields->>'f1' COLLATE "POSIX" = 'foo';
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: fields
   InfluxDB query: SELECT * FROM "loct3" WHERE (("f1" = 'foo'))
(3 rows)

--Testcase 368:
explain (verbose, costs off) select * from ft3 where fields->>'f1' = 'foo' COLLATE "C";
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: fields
   Filter: ((ft3.fields ->> 'f1'::text) = 'foo'::text COLLATE "C")
   InfluxDB query: SELECT * FROM "loct3"
(4 rows)

--Testcase 369:
explain (verbose, costs off) select * from ft3 where fields->>'f2' COLLATE "C" = 'foo';
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: fields
   InfluxDB query: SELECT * FROM "loct3" WHERE (("f2" = 'foo'))
(3 rows)

--Testcase 370:
explain (verbose, costs off) select * from ft3 where fields->>'f2' = 'foo' COLLATE "C";
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: fields
   Filter: ((ft3.fields ->> 'f2'::text) = 'foo'::text COLLATE "C")
   InfluxDB query: SELECT * FROM "loct3"
(4 rows)

--Testcase 371:
explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.fields->>'f3' = l.fields->>'f3' COLLATE "POSIX" and l.fields->>'f1' = 'foo';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Hash Join
   Output: f.fields, l.fields
   Hash Cond: (((f.fields ->> 'f3'::text))::text = (l.fields ->> 'f3'::text COLLATE "POSIX"))
   ->  Foreign Scan on public.ft3 f
         Output: f.fields
         InfluxDB query: SELECT * FROM "loct3"
   ->  Hash
         Output: l.fields
         ->  Foreign Scan on public.loct3 l
               Output: l.fields
               InfluxDB query: SELECT * FROM "loct3" WHERE (("f1" = 'foo'))
(11 rows)

-- influxdb_fdw does not support UPDATE
-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
--Testcase 372:
EXPLAIN (verbose, costs off)
INSERT INTO ft2_nsc (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2_nsc ORDER BY c1 LIMIT 20;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2_nsc
   ->  Subquery Scan on "*SELECT*"
         Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1", NULL::integer, "*SELECT*"."?column?_2", NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::text
         ->  Limit
               Output: ((ft2_nsc_1.c1 + 1000)), ((ft2_nsc_1.c2 + 100)), ((ft2_nsc_1.c3 || ft2_nsc_1.c3)), ft2_nsc_1.c1
               ->  Sort
                     Output: ((ft2_nsc_1.c1 + 1000)), ((ft2_nsc_1.c2 + 100)), ((ft2_nsc_1.c3 || ft2_nsc_1.c3)), ft2_nsc_1.c1
                     Sort Key: ft2_nsc_1.c1
                     ->  Foreign Scan on public.ft2_nsc ft2_nsc_1
                           Output: (ft2_nsc_1.c1 + 1000), (ft2_nsc_1.c2 + 100), (ft2_nsc_1.c3 || ft2_nsc_1.c3), ft2_nsc_1.c1
                           InfluxDB query: SELECT "C 1", "c2", "c3" FROM "T1"
(11 rows)

--Testcase 373:
INSERT INTO ft2_nsc (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2_nsc ORDER BY c1 LIMIT 20;
--Testcase 374:
INSERT INTO ft2_nsc (c1,c2,c3) VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc');
--Testcase 375:
SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 WHERE (fields->>'c2')::int > 200;
  c1  | c2  | c3  | c6 |     c7     | c8 
------+-----+-----+----+------------+----
 1101 | 201 | aaa |    | ft2        | 
 1102 | 202 | bbb |    | ft2        | 
 1103 | 203 | ccc |    | ft2        | 
(3 rows)

--Testcase 376:
INSERT INTO ft2_nsc (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
--UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;  -- can be pushed down
--UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
--  FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
--UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
--  FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;
--Testcase 377:
EXPLAIN (verbose, costs off)
  DELETE FROM ft2_nsc WHERE c1 % 10 = 5;                               -- can be pushed down
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Delete on public.ft2_nsc
   ->  Foreign Scan on public.ft2_nsc
         Output: c3, "time"
         InfluxDB query: SELECT "c3", "C 1" FROM "T1" WHERE ((("C 1" % 10) = 5))
(4 rows)

--Testcase 378:
SELECT (fields->>'C 1')::int c1 FROM ft2 WHERE (fields->>'C 1')::int % 10 = 5 ORDER BY (fields->>'C 1')::int;
  c1  
------
    5
   15
   25
   35
   45
   55
   65
   75
   85
   95
  105
  115
  125
  135
  145
  155
  165
  175
  185
  195
  205
  215
  225
  235
  245
  255
  265
  275
  285
  295
  305
  315
  325
  335
  345
  355
  365
  375
  385
  395
  405
  415
  425
  435
  445
  455
  465
  475
  485
  495
  505
  515
  525
  535
  545
  555
  565
  575
  585
  595
  605
  615
  625
  635
  645
  655
  665
  675
  685
  695
  705
  715
  725
  735
  745
  755
  765
  775
  785
  795
  805
  815
  825
  835
  845
  855
  865
  875
  885
  895
  905
  915
  925
  935
  945
  955
  965
  975
  985
  995
 1005
 1015
 1105
(103 rows)

--Testcase 379:
DELETE FROM ft2_nsc WHERE c1 % 10 = 5;
--Testcase 380:
SELECT (fields->>'C 1')::int c1 FROM ft2 WHERE (fields->>'C 1')::int % 10 = 5;
 c1 
----
(0 rows)

--Testcase 381:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_nsc USING ft1_nsc WHERE ft1_nsc.c1 = ft2_nsc.c2 AND ft1_nsc.c1 % 10 = 2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2_nsc
   ->  Hash Join
         Output: ft2_nsc.c3, ft2_nsc."time", ft1_nsc.*
         Hash Cond: (ft2_nsc.c2 = ft1_nsc.c1)
         ->  Foreign Scan on public.ft2_nsc
               Output: ft2_nsc.c3, ft2_nsc."time", ft2_nsc.c2
               InfluxDB query: SELECT "c2", "c3" FROM "T1"
         ->  Hash
               Output: ft1_nsc.*, ft1_nsc.c1
               ->  Foreign Scan on public.ft1_nsc
                     Output: ft1_nsc.*, ft1_nsc.c1
                     InfluxDB query: SELECT "C 1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE ((("C 1" % 10) = 2))
(12 rows)

--Testcase 382:
DELETE FROM ft2_nsc USING ft1_nsc WHERE ft1_nsc.c1 = ft2_nsc.c2 AND ft1_nsc.c1 % 10 = 2;
--Testcase 383:
SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3 FROM ft2 ORDER BY (fields->>'C 1')::int;
  c1  | c2  |     c3     
------+-----+------------
    1 |   1 | 00001
    3 |   3 | 00003
    4 |   4 | 00004
    6 |   6 | 00006
    7 |   7 | 00007
    8 |   8 | 00008
    9 |   9 | 00009
   10 |   0 | 00010
   11 |   1 | 00011
   13 |   3 | 00013
   14 |   4 | 00014
   16 |   6 | 00016
   17 |   7 | 00017
   18 |   8 | 00018
   19 |   9 | 00019
   20 |   0 | 00020
   21 |   1 | 00021
   23 |   3 | 00023
   24 |   4 | 00024
   26 |   6 | 00026
   27 |   7 | 00027
   28 |   8 | 00028
   29 |   9 | 00029
   30 |   0 | 00030
   31 |   1 | 00031
   33 |   3 | 00033
   34 |   4 | 00034
   36 |   6 | 00036
   37 |   7 | 00037
   38 |   8 | 00038
   39 |   9 | 00039
   40 |   0 | 00040
   41 |   1 | 00041
   43 |   3 | 00043
   44 |   4 | 00044
   46 |   6 | 00046
   47 |   7 | 00047
   48 |   8 | 00048
   49 |   9 | 00049
   50 |   0 | 00050
   51 |   1 | 00051
   53 |   3 | 00053
   54 |   4 | 00054
   56 |   6 | 00056
   57 |   7 | 00057
   58 |   8 | 00058
   59 |   9 | 00059
   60 |   0 | 00060
   61 |   1 | 00061
   63 |   3 | 00063
   64 |   4 | 00064
   66 |   6 | 00066
   67 |   7 | 00067
   68 |   8 | 00068
   69 |   9 | 00069
   70 |   0 | 00070
   71 |   1 | 00071
   73 |   3 | 00073
   74 |   4 | 00074
   76 |   6 | 00076
   77 |   7 | 00077
   78 |   8 | 00078
   79 |   9 | 00079
   80 |   0 | 00080
   81 |   1 | 00081
   83 |   3 | 00083
   84 |   4 | 00084
   86 |   6 | 00086
   87 |   7 | 00087
   88 |   8 | 00088
   89 |   9 | 00089
   90 |   0 | 00090
   91 |   1 | 00091
   93 |   3 | 00093
   94 |   4 | 00094
   96 |   6 | 00096
   97 |   7 | 00097
   98 |   8 | 00098
   99 |   9 | 00099
  100 |   0 | 00100
  101 |   1 | 00101
  103 |   3 | 00103
  104 |   4 | 00104
  106 |   6 | 00106
  107 |   7 | 00107
  108 |   8 | 00108
  109 |   9 | 00109
  110 |   0 | 00110
  111 |   1 | 00111
  113 |   3 | 00113
  114 |   4 | 00114
  116 |   6 | 00116
  117 |   7 | 00117
  118 |   8 | 00118
  119 |   9 | 00119
  120 |   0 | 00120
  121 |   1 | 00121
  123 |   3 | 00123
  124 |   4 | 00124
  126 |   6 | 00126
  127 |   7 | 00127
  128 |   8 | 00128
  129 |   9 | 00129
  130 |   0 | 00130
  131 |   1 | 00131
  133 |   3 | 00133
  134 |   4 | 00134
  136 |   6 | 00136
  137 |   7 | 00137
  138 |   8 | 00138
  139 |   9 | 00139
  140 |   0 | 00140
  141 |   1 | 00141
  143 |   3 | 00143
  144 |   4 | 00144
  146 |   6 | 00146
  147 |   7 | 00147
  148 |   8 | 00148
  149 |   9 | 00149
  150 |   0 | 00150
  151 |   1 | 00151
  153 |   3 | 00153
  154 |   4 | 00154
  156 |   6 | 00156
  157 |   7 | 00157
  158 |   8 | 00158
  159 |   9 | 00159
  160 |   0 | 00160
  161 |   1 | 00161
  163 |   3 | 00163
  164 |   4 | 00164
  166 |   6 | 00166
  167 |   7 | 00167
  168 |   8 | 00168
  169 |   9 | 00169
  170 |   0 | 00170
  171 |   1 | 00171
  173 |   3 | 00173
  174 |   4 | 00174
  176 |   6 | 00176
  177 |   7 | 00177
  178 |   8 | 00178
  179 |   9 | 00179
  180 |   0 | 00180
  181 |   1 | 00181
  183 |   3 | 00183
  184 |   4 | 00184
  186 |   6 | 00186
  187 |   7 | 00187
  188 |   8 | 00188
  189 |   9 | 00189
  190 |   0 | 00190
  191 |   1 | 00191
  193 |   3 | 00193
  194 |   4 | 00194
  196 |   6 | 00196
  197 |   7 | 00197
  198 |   8 | 00198
  199 |   9 | 00199
  200 |   0 | 00200
  201 |   1 | 00201
  203 |   3 | 00203
  204 |   4 | 00204
  206 |   6 | 00206
  207 |   7 | 00207
  208 |   8 | 00208
  209 |   9 | 00209
  210 |   0 | 00210
  211 |   1 | 00211
  213 |   3 | 00213
  214 |   4 | 00214
  216 |   6 | 00216
  217 |   7 | 00217
  218 |   8 | 00218
  219 |   9 | 00219
  220 |   0 | 00220
  221 |   1 | 00221
  223 |   3 | 00223
  224 |   4 | 00224
  226 |   6 | 00226
  227 |   7 | 00227
  228 |   8 | 00228
  229 |   9 | 00229
  230 |   0 | 00230
  231 |   1 | 00231
  233 |   3 | 00233
  234 |   4 | 00234
  236 |   6 | 00236
  237 |   7 | 00237
  238 |   8 | 00238
  239 |   9 | 00239
  240 |   0 | 00240
  241 |   1 | 00241
  243 |   3 | 00243
  244 |   4 | 00244
  246 |   6 | 00246
  247 |   7 | 00247
  248 |   8 | 00248
  249 |   9 | 00249
  250 |   0 | 00250
  251 |   1 | 00251
  253 |   3 | 00253
  254 |   4 | 00254
  256 |   6 | 00256
  257 |   7 | 00257
  258 |   8 | 00258
  259 |   9 | 00259
  260 |   0 | 00260
  261 |   1 | 00261
  263 |   3 | 00263
  264 |   4 | 00264
  266 |   6 | 00266
  267 |   7 | 00267
  268 |   8 | 00268
  269 |   9 | 00269
  270 |   0 | 00270
  271 |   1 | 00271
  273 |   3 | 00273
  274 |   4 | 00274
  276 |   6 | 00276
  277 |   7 | 00277
  278 |   8 | 00278
  279 |   9 | 00279
  280 |   0 | 00280
  281 |   1 | 00281
  283 |   3 | 00283
  284 |   4 | 00284
  286 |   6 | 00286
  287 |   7 | 00287
  288 |   8 | 00288
  289 |   9 | 00289
  290 |   0 | 00290
  291 |   1 | 00291
  293 |   3 | 00293
  294 |   4 | 00294
  296 |   6 | 00296
  297 |   7 | 00297
  298 |   8 | 00298
  299 |   9 | 00299
  300 |   0 | 00300
  301 |   1 | 00301
  303 |   3 | 00303
  304 |   4 | 00304
  306 |   6 | 00306
  307 |   7 | 00307
  308 |   8 | 00308
  309 |   9 | 00309
  310 |   0 | 00310
  311 |   1 | 00311
  313 |   3 | 00313
  314 |   4 | 00314
  316 |   6 | 00316
  317 |   7 | 00317
  318 |   8 | 00318
  319 |   9 | 00319
  320 |   0 | 00320
  321 |   1 | 00321
  323 |   3 | 00323
  324 |   4 | 00324
  326 |   6 | 00326
  327 |   7 | 00327
  328 |   8 | 00328
  329 |   9 | 00329
  330 |   0 | 00330
  331 |   1 | 00331
  333 |   3 | 00333
  334 |   4 | 00334
  336 |   6 | 00336
  337 |   7 | 00337
  338 |   8 | 00338
  339 |   9 | 00339
  340 |   0 | 00340
  341 |   1 | 00341
  343 |   3 | 00343
  344 |   4 | 00344
  346 |   6 | 00346
  347 |   7 | 00347
  348 |   8 | 00348
  349 |   9 | 00349
  350 |   0 | 00350
  351 |   1 | 00351
  353 |   3 | 00353
  354 |   4 | 00354
  356 |   6 | 00356
  357 |   7 | 00357
  358 |   8 | 00358
  359 |   9 | 00359
  360 |   0 | 00360
  361 |   1 | 00361
  363 |   3 | 00363
  364 |   4 | 00364
  366 |   6 | 00366
  367 |   7 | 00367
  368 |   8 | 00368
  369 |   9 | 00369
  370 |   0 | 00370
  371 |   1 | 00371
  373 |   3 | 00373
  374 |   4 | 00374
  376 |   6 | 00376
  377 |   7 | 00377
  378 |   8 | 00378
  379 |   9 | 00379
  380 |   0 | 00380
  381 |   1 | 00381
  383 |   3 | 00383
  384 |   4 | 00384
  386 |   6 | 00386
  387 |   7 | 00387
  388 |   8 | 00388
  389 |   9 | 00389
  390 |   0 | 00390
  391 |   1 | 00391
  393 |   3 | 00393
  394 |   4 | 00394
  396 |   6 | 00396
  397 |   7 | 00397
  398 |   8 | 00398
  399 |   9 | 00399
  400 |   0 | 00400
  401 |   1 | 00401
  403 |   3 | 00403
  404 |   4 | 00404
  406 |   6 | 00406
  407 |   7 | 00407
  408 |   8 | 00408
  409 |   9 | 00409
  410 |   0 | 00410
  411 |   1 | 00411
  413 |   3 | 00413
  414 |   4 | 00414
  416 |   6 | 00416
  417 |   7 | 00417
  418 |   8 | 00418
  419 |   9 | 00419
  420 |   0 | 00420
  421 |   1 | 00421
  423 |   3 | 00423
  424 |   4 | 00424
  426 |   6 | 00426
  427 |   7 | 00427
  428 |   8 | 00428
  429 |   9 | 00429
  430 |   0 | 00430
  431 |   1 | 00431
  433 |   3 | 00433
  434 |   4 | 00434
  436 |   6 | 00436
  437 |   7 | 00437
  438 |   8 | 00438
  439 |   9 | 00439
  440 |   0 | 00440
  441 |   1 | 00441
  443 |   3 | 00443
  444 |   4 | 00444
  446 |   6 | 00446
  447 |   7 | 00447
  448 |   8 | 00448
  449 |   9 | 00449
  450 |   0 | 00450
  451 |   1 | 00451
  453 |   3 | 00453
  454 |   4 | 00454
  456 |   6 | 00456
  457 |   7 | 00457
  458 |   8 | 00458
  459 |   9 | 00459
  460 |   0 | 00460
  461 |   1 | 00461
  463 |   3 | 00463
  464 |   4 | 00464
  466 |   6 | 00466
  467 |   7 | 00467
  468 |   8 | 00468
  469 |   9 | 00469
  470 |   0 | 00470
  471 |   1 | 00471
  473 |   3 | 00473
  474 |   4 | 00474
  476 |   6 | 00476
  477 |   7 | 00477
  478 |   8 | 00478
  479 |   9 | 00479
  480 |   0 | 00480
  481 |   1 | 00481
  483 |   3 | 00483
  484 |   4 | 00484
  486 |   6 | 00486
  487 |   7 | 00487
  488 |   8 | 00488
  489 |   9 | 00489
  490 |   0 | 00490
  491 |   1 | 00491
  493 |   3 | 00493
  494 |   4 | 00494
  496 |   6 | 00496
  497 |   7 | 00497
  498 |   8 | 00498
  499 |   9 | 00499
  500 |   0 | 00500
  501 |   1 | 00501
  503 |   3 | 00503
  504 |   4 | 00504
  506 |   6 | 00506
  507 |   7 | 00507
  508 |   8 | 00508
  509 |   9 | 00509
  510 |   0 | 00510
  511 |   1 | 00511
  513 |   3 | 00513
  514 |   4 | 00514
  516 |   6 | 00516
  517 |   7 | 00517
  518 |   8 | 00518
  519 |   9 | 00519
  520 |   0 | 00520
  521 |   1 | 00521
  523 |   3 | 00523
  524 |   4 | 00524
  526 |   6 | 00526
  527 |   7 | 00527
  528 |   8 | 00528
  529 |   9 | 00529
  530 |   0 | 00530
  531 |   1 | 00531
  533 |   3 | 00533
  534 |   4 | 00534
  536 |   6 | 00536
  537 |   7 | 00537
  538 |   8 | 00538
  539 |   9 | 00539
  540 |   0 | 00540
  541 |   1 | 00541
  543 |   3 | 00543
  544 |   4 | 00544
  546 |   6 | 00546
  547 |   7 | 00547
  548 |   8 | 00548
  549 |   9 | 00549
  550 |   0 | 00550
  551 |   1 | 00551
  553 |   3 | 00553
  554 |   4 | 00554
  556 |   6 | 00556
  557 |   7 | 00557
  558 |   8 | 00558
  559 |   9 | 00559
  560 |   0 | 00560
  561 |   1 | 00561
  563 |   3 | 00563
  564 |   4 | 00564
  566 |   6 | 00566
  567 |   7 | 00567
  568 |   8 | 00568
  569 |   9 | 00569
  570 |   0 | 00570
  571 |   1 | 00571
  573 |   3 | 00573
  574 |   4 | 00574
  576 |   6 | 00576
  577 |   7 | 00577
  578 |   8 | 00578
  579 |   9 | 00579
  580 |   0 | 00580
  581 |   1 | 00581
  583 |   3 | 00583
  584 |   4 | 00584
  586 |   6 | 00586
  587 |   7 | 00587
  588 |   8 | 00588
  589 |   9 | 00589
  590 |   0 | 00590
  591 |   1 | 00591
  593 |   3 | 00593
  594 |   4 | 00594
  596 |   6 | 00596
  597 |   7 | 00597
  598 |   8 | 00598
  599 |   9 | 00599
  600 |   0 | 00600
  601 |   1 | 00601
  603 |   3 | 00603
  604 |   4 | 00604
  606 |   6 | 00606
  607 |   7 | 00607
  608 |   8 | 00608
  609 |   9 | 00609
  610 |   0 | 00610
  611 |   1 | 00611
  613 |   3 | 00613
  614 |   4 | 00614
  616 |   6 | 00616
  617 |   7 | 00617
  618 |   8 | 00618
  619 |   9 | 00619
  620 |   0 | 00620
  621 |   1 | 00621
  623 |   3 | 00623
  624 |   4 | 00624
  626 |   6 | 00626
  627 |   7 | 00627
  628 |   8 | 00628
  629 |   9 | 00629
  630 |   0 | 00630
  631 |   1 | 00631
  633 |   3 | 00633
  634 |   4 | 00634
  636 |   6 | 00636
  637 |   7 | 00637
  638 |   8 | 00638
  639 |   9 | 00639
  640 |   0 | 00640
  641 |   1 | 00641
  643 |   3 | 00643
  644 |   4 | 00644
  646 |   6 | 00646
  647 |   7 | 00647
  648 |   8 | 00648
  649 |   9 | 00649
  650 |   0 | 00650
  651 |   1 | 00651
  653 |   3 | 00653
  654 |   4 | 00654
  656 |   6 | 00656
  657 |   7 | 00657
  658 |   8 | 00658
  659 |   9 | 00659
  660 |   0 | 00660
  661 |   1 | 00661
  663 |   3 | 00663
  664 |   4 | 00664
  666 |   6 | 00666
  667 |   7 | 00667
  668 |   8 | 00668
  669 |   9 | 00669
  670 |   0 | 00670
  671 |   1 | 00671
  673 |   3 | 00673
  674 |   4 | 00674
  676 |   6 | 00676
  677 |   7 | 00677
  678 |   8 | 00678
  679 |   9 | 00679
  680 |   0 | 00680
  681 |   1 | 00681
  683 |   3 | 00683
  684 |   4 | 00684
  686 |   6 | 00686
  687 |   7 | 00687
  688 |   8 | 00688
  689 |   9 | 00689
  690 |   0 | 00690
  691 |   1 | 00691
  693 |   3 | 00693
  694 |   4 | 00694
  696 |   6 | 00696
  697 |   7 | 00697
  698 |   8 | 00698
  699 |   9 | 00699
  700 |   0 | 00700
  701 |   1 | 00701
  703 |   3 | 00703
  704 |   4 | 00704
  706 |   6 | 00706
  707 |   7 | 00707
  708 |   8 | 00708
  709 |   9 | 00709
  710 |   0 | 00710
  711 |   1 | 00711
  713 |   3 | 00713
  714 |   4 | 00714
  716 |   6 | 00716
  717 |   7 | 00717
  718 |   8 | 00718
  719 |   9 | 00719
  720 |   0 | 00720
  721 |   1 | 00721
  723 |   3 | 00723
  724 |   4 | 00724
  726 |   6 | 00726
  727 |   7 | 00727
  728 |   8 | 00728
  729 |   9 | 00729
  730 |   0 | 00730
  731 |   1 | 00731
  733 |   3 | 00733
  734 |   4 | 00734
  736 |   6 | 00736
  737 |   7 | 00737
  738 |   8 | 00738
  739 |   9 | 00739
  740 |   0 | 00740
  741 |   1 | 00741
  743 |   3 | 00743
  744 |   4 | 00744
  746 |   6 | 00746
  747 |   7 | 00747
  748 |   8 | 00748
  749 |   9 | 00749
  750 |   0 | 00750
  751 |   1 | 00751
  753 |   3 | 00753
  754 |   4 | 00754
  756 |   6 | 00756
  757 |   7 | 00757
  758 |   8 | 00758
  759 |   9 | 00759
  760 |   0 | 00760
  761 |   1 | 00761
  763 |   3 | 00763
  764 |   4 | 00764
  766 |   6 | 00766
  767 |   7 | 00767
  768 |   8 | 00768
  769 |   9 | 00769
  770 |   0 | 00770
  771 |   1 | 00771
  773 |   3 | 00773
  774 |   4 | 00774
  776 |   6 | 00776
  777 |   7 | 00777
  778 |   8 | 00778
  779 |   9 | 00779
  780 |   0 | 00780
  781 |   1 | 00781
  783 |   3 | 00783
  784 |   4 | 00784
  786 |   6 | 00786
  787 |   7 | 00787
  788 |   8 | 00788
  789 |   9 | 00789
  790 |   0 | 00790
  791 |   1 | 00791
  793 |   3 | 00793
  794 |   4 | 00794
  796 |   6 | 00796
  797 |   7 | 00797
  798 |   8 | 00798
  799 |   9 | 00799
  800 |   0 | 00800
  801 |   1 | 00801
  803 |   3 | 00803
  804 |   4 | 00804
  806 |   6 | 00806
  807 |   7 | 00807
  808 |   8 | 00808
  809 |   9 | 00809
  810 |   0 | 00810
  811 |   1 | 00811
  813 |   3 | 00813
  814 |   4 | 00814
  816 |   6 | 00816
  817 |   7 | 00817
  818 |   8 | 00818
  819 |   9 | 00819
  820 |   0 | 00820
  821 |   1 | 00821
  823 |   3 | 00823
  824 |   4 | 00824
  826 |   6 | 00826
  827 |   7 | 00827
  828 |   8 | 00828
  829 |   9 | 00829
  830 |   0 | 00830
  831 |   1 | 00831
  833 |   3 | 00833
  834 |   4 | 00834
  836 |   6 | 00836
  837 |   7 | 00837
  838 |   8 | 00838
  839 |   9 | 00839
  840 |   0 | 00840
  841 |   1 | 00841
  843 |   3 | 00843
  844 |   4 | 00844
  846 |   6 | 00846
  847 |   7 | 00847
  848 |   8 | 00848
  849 |   9 | 00849
  850 |   0 | 00850
  851 |   1 | 00851
  853 |   3 | 00853
  854 |   4 | 00854
  856 |   6 | 00856
  857 |   7 | 00857
  858 |   8 | 00858
  859 |   9 | 00859
  860 |   0 | 00860
  861 |   1 | 00861
  863 |   3 | 00863
  864 |   4 | 00864
  866 |   6 | 00866
  867 |   7 | 00867
  868 |   8 | 00868
  869 |   9 | 00869
  870 |   0 | 00870
  871 |   1 | 00871
  873 |   3 | 00873
  874 |   4 | 00874
  876 |   6 | 00876
  877 |   7 | 00877
  878 |   8 | 00878
  879 |   9 | 00879
  880 |   0 | 00880
  881 |   1 | 00881
  883 |   3 | 00883
  884 |   4 | 00884
  886 |   6 | 00886
  887 |   7 | 00887
  888 |   8 | 00888
  889 |   9 | 00889
  890 |   0 | 00890
  891 |   1 | 00891
  893 |   3 | 00893
  894 |   4 | 00894
  896 |   6 | 00896
  897 |   7 | 00897
  898 |   8 | 00898
  899 |   9 | 00899
  900 |   0 | 00900
  901 |   1 | 00901
  903 |   3 | 00903
  904 |   4 | 00904
  906 |   6 | 00906
  907 |   7 | 00907
  908 |   8 | 00908
  909 |   9 | 00909
  910 |   0 | 00910
  911 |   1 | 00911
  913 |   3 | 00913
  914 |   4 | 00914
  916 |   6 | 00916
  917 |   7 | 00917
  918 |   8 | 00918
  919 |   9 | 00919
  920 |   0 | 00920
  921 |   1 | 00921
  923 |   3 | 00923
  924 |   4 | 00924
  926 |   6 | 00926
  927 |   7 | 00927
  928 |   8 | 00928
  929 |   9 | 00929
  930 |   0 | 00930
  931 |   1 | 00931
  933 |   3 | 00933
  934 |   4 | 00934
  936 |   6 | 00936
  937 |   7 | 00937
  938 |   8 | 00938
  939 |   9 | 00939
  940 |   0 | 00940
  941 |   1 | 00941
  943 |   3 | 00943
  944 |   4 | 00944
  946 |   6 | 00946
  947 |   7 | 00947
  948 |   8 | 00948
  949 |   9 | 00949
  950 |   0 | 00950
  951 |   1 | 00951
  953 |   3 | 00953
  954 |   4 | 00954
  956 |   6 | 00956
  957 |   7 | 00957
  958 |   8 | 00958
  959 |   9 | 00959
  960 |   0 | 00960
  961 |   1 | 00961
  963 |   3 | 00963
  964 |   4 | 00964
  966 |   6 | 00966
  967 |   7 | 00967
  968 |   8 | 00968
  969 |   9 | 00969
  970 |   0 | 00970
  971 |   1 | 00971
  973 |   3 | 00973
  974 |   4 | 00974
  976 |   6 | 00976
  977 |   7 | 00977
  978 |   8 | 00978
  979 |   9 | 00979
  980 |   0 | 00980
  981 |   1 | 00981
  983 |   3 | 00983
  984 |   4 | 00984
  986 |   6 | 00986
  987 |   7 | 00987
  988 |   8 | 00988
  989 |   9 | 00989
  990 |   0 | 00990
  991 |   1 | 00991
  993 |   3 | 00993
  994 |   4 | 00994
  996 |   6 | 00996
  997 |   7 | 00997
  998 |   8 | 00998
  999 |   9 | 00999
 1000 |   0 | 01000
 1001 | 101 | 0000100001
 1003 | 103 | 0000300003
 1004 | 104 | 0000400004
 1006 | 106 | 0000600006
 1007 | 107 | 0000700007
 1008 | 108 | 0000800008
 1009 | 109 | 0000900009
 1010 | 100 | 0001000010
 1011 | 101 | 0001100011
 1013 | 103 | 0001300013
 1014 | 104 | 0001400014
 1016 | 106 | 0001600016
 1017 | 107 | 0001700017
 1018 | 108 | 0001800018
 1019 | 109 | 0001900019
 1020 | 100 | 0002000020
 1101 | 201 | aaa
 1103 | 203 | ccc
 1104 | 204 | ddd
(819 rows)

--Testcase 384:
EXPLAIN (verbose, costs off)
INSERT INTO ft2_nsc (c1,c2,c3) VALUES (1200,999,'foo');
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2_nsc
   ->  Result
         Output: 1200, 999, NULL::integer, 'foo'::text, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::text
(3 rows)

--Testcase 385:
INSERT INTO ft2_nsc (c1,c2,c3) VALUES (1200,999,'foo');
--Testcase 386:
SELECT (fields->>'C 1')::int c1 FROM ft2 WHERE (fields->>'C 1')::int = 1200 AND (fields->>'c2')::int = 999;
  c1  
------
 1200
(1 row)

--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;             -- can be pushed down
--UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
--Testcase 387:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_nsc WHERE c1 = 1200;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Delete on public.ft2_nsc
   ->  Foreign Scan on public.ft2_nsc
         Output: c3, "time"
         InfluxDB query: SELECT "c3", "C 1" FROM "T1" WHERE (("C 1" = 1200))
(4 rows)

--Testcase 388:
SELECT (fields->>'C 1')::int c1 FROM ft2 WHERE (fields->>'C 1')::int = 1200;
  c1  
------
 1200
(1 row)

--Testcase 389:
DELETE FROM ft2_nsc WHERE c1 = 1200;
--Testcase 390:
SELECT (fields->>'C 1')::int c1 FROM ft2 WHERE (fields->>'C 1')::int = 1200;
 c1 
----
(0 rows)

-- Test UPDATE/DELETE with RETURNING on a three-table join
--Testcase 391:
INSERT INTO ft2_nsc (c1,c2,c3)
  SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c3 = 'foo'
--  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
--  RETURNING ft2, ft2.*, ft4, ft4.*;       -- can be pushed down
--UPDATE ft2 SET c3 = 'foo'
--  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
--  RETURNING ft2, ft2.*, ft4, ft4.*;
--Testcase 392:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_nsc
  USING ft4_nsc LEFT JOIN ft5_nsc ON (ft4_nsc.c1 = ft5_nsc.c1)
  WHERE ft2_nsc.c1 > 1200 AND ft2_nsc.c1 % 10 = 0 AND ft2_nsc.c2 = ft4_nsc.c1;                          -- can be pushed down
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2_nsc
   ->  Hash Right Join
         Output: ft2_nsc.c3, ft2_nsc."time", ft4_nsc.*, ft5_nsc.*
         Hash Cond: (ft5_nsc.c1 = ft4_nsc.c1)
         ->  Foreign Scan on public.ft5_nsc
               Output: ft5_nsc.*, ft5_nsc.c1
               InfluxDB query: SELECT "c1", "c2", "c3" FROM "T4"
         ->  Hash
               Output: ft2_nsc.c3, ft2_nsc."time", ft4_nsc.*, ft4_nsc.c1
               ->  Hash Join
                     Output: ft2_nsc.c3, ft2_nsc."time", ft4_nsc.*, ft4_nsc.c1
                     Hash Cond: (ft4_nsc.c1 = ft2_nsc.c2)
                     ->  Foreign Scan on public.ft4_nsc
                           Output: ft4_nsc.*, ft4_nsc.c1
                           InfluxDB query: SELECT "c1", "c2", "c3" FROM "T3"
                     ->  Hash
                           Output: ft2_nsc.c3, ft2_nsc."time", ft2_nsc.c2
                           ->  Foreign Scan on public.ft2_nsc
                                 Output: ft2_nsc.c3, ft2_nsc."time", ft2_nsc.c2
                                 InfluxDB query: SELECT "c2", "c3" FROM "T1" WHERE (("C 1" > 1200)) AND ((("C 1" % 10) = 0))
(20 rows)

--Testcase 393:
SELECT 100 FROM ft2,
  ft4 LEFT JOIN ft5 ON ((ft4.fields->>'c1')::int = (ft5.fields->>'c1')::int)
  WHERE (ft2.fields->>'C 1')::int > 1200 AND (ft2.fields->>'C 1')::int % 10 = 0 AND (ft2.fields->>'c2')::int = (ft4.fields->>'c1')::int;
 ?column? 
----------
      100
      100
      100
      100
      100
      100
      100
      100
      100
      100
(10 rows)

--Testcase 394:
DELETE FROM ft2_nsc
  USING ft4_nsc LEFT JOIN ft5_nsc ON (ft4_nsc.c1 = ft5_nsc.c1)
  WHERE ft2_nsc.c1 > 1200 AND ft2_nsc.c1 % 10 = 0 AND ft2_nsc.c2 = ft4_nsc.c1;
--Testcase 395:
SELECT 100 FROM ft2,
  ft4 LEFT JOIN ft5 ON ((ft4.fields->>'c1')::int = (ft5.fields->>'c1')::int)
  WHERE (ft2.fields->>'C 1')::int > 1200 AND (ft2.fields->>'C 1')::int % 10 = 0 AND (ft2.fields->>'c2')::int = (ft4.fields->>'c1')::int;
 ?column? 
----------
(0 rows)

--Testcase 396:
DELETE FROM ft2_nsc WHERE ft2_nsc.c1 > 1200;
-- Test UPDATE with a MULTIEXPR sub-select
-- (maybe someday this'll be remotely executable, but not today)
--EXPLAIN (verbose, costs off)
--UPDATE ft2 AS target SET (c2, c7) = (
--    SELECT c2 * 10, c7
--        FROM ft2 AS src
--        WHERE target.c1 = src.c1
--) WHERE c1 > 1100;
--UPDATE ft2 AS target SET (c2, c7) = (
--    SELECT c2 * 10, c7
--        FROM ft2 AS src
--        WHERE targ--et.c1 = src.c1
--) WHERE c1 > 1100;
--UPDATE ft2 AS target SET (c2) = (
--    SELECT c2 / 10
--        FROM ft2 AS src
--        WHERE targ--et.c1 = src.c1
--) WHERE c1 > 1100;
-- Test UPDATE/DELETE with WHERE or JOIN/ON conditions containing
-- user-defined operators/functions
--Testcase 397:
INSERT INTO ft2_nsc (c1,c2,c3)
  SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c3 = 'bar' WHERE influxdb_fdw_abs(c1) > 2000 RETURNING *;            -- can't be pushed down
--UPDATE ft2 SET c3 = 'bar' WHERE influxdb_fdw_abs(c1) > 2000 RETURNING *;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c3 = 'baz'
--  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
--  RETURNING ft2.*, ft4.*, ft5.*;                                                    -- can't be pushed down
--UPDATE ft2 SET c3 = 'baz'
--  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
--  RETURNING ft2.*, ft4.*, ft5.*;
--Testcase 398:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_nsc
  USING ft4_nsc INNER JOIN ft5_nsc ON (ft4_nsc.c1 === ft5_nsc.c1)
  WHERE ft2_nsc.c1 > 2000 AND ft2_nsc.c2 = ft4_nsc.c1;                       -- can't be pushed down
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Delete on public.ft2_nsc
   ->  Nested Loop
         Output: ft2_nsc.c3, ft2_nsc."time", ft4_nsc.*, ft5_nsc.*
         Join Filter: (ft4_nsc.c1 === ft5_nsc.c1)
         ->  Hash Join
               Output: ft2_nsc.c3, ft2_nsc."time", ft4_nsc.*, ft4_nsc.c1
               Hash Cond: (ft4_nsc.c1 = ft2_nsc.c2)
               ->  Foreign Scan on public.ft4_nsc
                     Output: ft4_nsc.*, ft4_nsc.c1
                     InfluxDB query: SELECT "c1", "c2", "c3" FROM "T3"
               ->  Hash
                     Output: ft2_nsc.c3, ft2_nsc."time", ft2_nsc.c2
                     ->  Foreign Scan on public.ft2_nsc
                           Output: ft2_nsc.c3, ft2_nsc."time", ft2_nsc.c2
                           InfluxDB query: SELECT "c2", "c3" FROM "T1" WHERE (("C 1" > 2000))
         ->  Materialize
               Output: ft5_nsc.*, ft5_nsc.c1
               ->  Foreign Scan on public.ft5_nsc
                     Output: ft5_nsc.*, ft5_nsc.c1
                     InfluxDB query: SELECT "c1", "c2", "c3" FROM "T4"
(20 rows)

--Testcase 399:
SELECT (ft2.fields->>'C 1')::int c1, (ft2.fields->>'c2')::int c2, ft2.tags->>'c3' c3 
  FROM ft2, ft4 INNER JOIN ft5 ON ((ft4.fields->>'c1')::int === (ft5.fields->>'c1')::int)
  WHERE (ft2.fields->>'C 1')::int > 2000 AND (ft2.fields->>'c2')::int = (ft4.fields->>'c1')::int;
  c1  | c2 |  c3   
------+----+-------
 2006 |  6 | 02006
(1 row)

--Testcase 400:
DELETE FROM ft2_nsc
  USING ft4_nsc INNER JOIN ft5_nsc ON (ft4_nsc.c1 === ft5_nsc.c1)
  WHERE ft2_nsc.c1 > 2000 AND ft2_nsc.c2 = ft4_nsc.c1;  
--Testcase 401:
SELECT (ft2.fields->>'C 1')::int c1, (ft2.fields->>'c2')::int c2, ft2.tags->>'c3' c3 
  FROM ft2, ft4 INNER JOIN ft5 ON ((ft4.fields->>'c1')::int === (ft5.fields->>'c1')::int)
  WHERE (ft2.fields->>'C 1')::int > 2000 AND (ft2.fields->>'c2')::int = (ft4.fields->>'c1')::int;
 c1 | c2 | c3 
----+----+----
(0 rows)

--Testcase 402:
DELETE FROM ft2_nsc WHERE ft2_nsc.c1 > 2000;
-- Test that trigger on remote table works as expected
--Testcase 403:
CREATE OR REPLACE FUNCTION "S 1".F_BRTRIG() RETURNS trigger AS $$
BEGIN
    NEW.c3 = NEW.c3 || '_trig_update';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
--Testcase 404:
CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
    ON "S 1".s1t1 FOR EACH ROW EXECUTE PROCEDURE "S 1".F_BRTRIG();
--Testcase 405:
INSERT INTO ft2_nsc (c1,c2,c3) VALUES (1208, 818, 'fff');
--Testcase 406:
SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 WHERE (fields->>'C 1')::int = 1208;
  c1  | c2  | c3  | c6 |     c7     | c8 
------+-----+-----+----+------------+----
 1208 | 818 | fff |    | ft2        | 
(1 row)

--Testcase 407:
INSERT INTO ft2_nsc (c1,c2,c3,c6) VALUES (1218, 818, 'ggg', '(--;');
--Testcase 408:
SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft2 WHERE (fields->>'C 1')::int = 1218;
  c1  | c2  | c3  |  c6  |     c7     | c8 
------+-----+-----+------+------------+----
 1218 | 818 | ggg | (--; | ft2        | 
(1 row)

--UPDATE ft2 SET c2 = c2 + 600 WHERE c1 % 10 = 8 AND c1 < 1200 RETURNING *;
-- Test errors thrown on remote side during update
ALTER TABLE "S 1"."T 1" ADD CONSTRAINT c2positive CHECK ((fields->>'c2')::int >= 0);
-- influxdb_fdw does not support key, ON CONFLICT
--INSERT INTO ft1(c1, c2) VALUES(11, 12);  -- duplicate key
--Testcase 409:
INSERT INTO ft1_nsc(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
ERROR:  ON CONFLICT is not supported
--Testcase 410:
INSERT INTO ft1_nsc(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 411:
INSERT INTO ft1_nsc(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
--UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
/*
-- influxdb_fdw does not support transactions
-- Test savepoint/rollback behavior
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
begin;
update ft2 set c2 = 42 where c2 = 0;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
savepoint s1;
update ft2 set c2 = 44 where c2 = 4;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
release savepoint s1;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
savepoint s2;
update ft2 set c2 = 46 where c2 = 6;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
rollback to savepoint s2;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
release savepoint s2;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
savepoint s3;
update ft2 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
rollback to savepoint s3;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
release savepoint s3;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- none of the above is committed yet remotely
select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
commit;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
*/
-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
--Testcase 412:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY fields->>'c6' DESC NULLS LAST, (fields->>'C 1')::int OFFSET 795 LIMIT 10;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: "time", tags, fields, ((fields ->> 'c6'::text)), (((fields ->> 'C 1'::text))::integer)
   ->  Sort
         Output: "time", tags, fields, ((fields ->> 'c6'::text)), (((fields ->> 'C 1'::text))::integer)
         Sort Key: ((ft1.fields ->> 'c6'::text)) DESC NULLS LAST, (((ft1.fields ->> 'C 1'::text))::integer)
         ->  Foreign Scan on public.ft1
               Output: "time", tags, fields, (fields ->> 'c6'::text), ((fields ->> 'C 1'::text))::integer
               InfluxDB query: SELECT * FROM "T1"
(8 rows)

--Testcase 413:
SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 ORDER BY fields->>'c6' DESC NULLS LAST, (fields->>'C 1')::int OFFSET 795 LIMIT 10;
  c1  | c2  |     c3     |  c6  |     c7     | c8  
------+-----+------------+------+------------+-----
  960 |   0 | 00960      | 0    | 0          | foo
  970 |   0 | 00970      | 0    | 0          | foo
  980 |   0 | 00980      | 0    | 0          | foo
  990 |   0 | 00990      | 0    | 0          | foo
 1000 |   0 | 01000      | 0    | 0          | foo
 1218 | 818 | ggg        | (--; | ft2        | 
 1001 | 101 | 0000100001 |      | ft2        | 
 1003 | 103 | 0000300003 |      | ft2        | 
 1004 | 104 | 0000400004 |      | ft2        | 
 1006 | 106 | 0000600006 |      | ft2        | 
(10 rows)

-- ORDER BY DESC NULLS FIRST options
--Testcase 414:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY fields->>'c6' DESC NULLS FIRST, (fields->>'C 1')::int OFFSET 15 LIMIT 10;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit
   Output: "time", tags, fields, ((fields ->> 'c6'::text)), (((fields ->> 'C 1'::text))::integer)
   ->  Sort
         Output: "time", tags, fields, ((fields ->> 'c6'::text)), (((fields ->> 'C 1'::text))::integer)
         Sort Key: ((ft1.fields ->> 'c6'::text)) DESC, (((ft1.fields ->> 'C 1'::text))::integer)
         ->  Foreign Scan on public.ft1
               Output: "time", tags, fields, (fields ->> 'c6'::text), ((fields ->> 'C 1'::text))::integer
               InfluxDB query: SELECT * FROM "T1"
(8 rows)

--Testcase 415:
SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 ORDER BY fields->>'c6' DESC NULLS FIRST, (fields->>'C 1')::int OFFSET 15 LIMIT 10;
  c1  | c2  |     c3     | c6 |     c7     | c8  
------+-----+------------+----+------------+-----
 1020 | 100 | 0002000020 |    | ft2        | 
 1101 | 201 | aaa        |    | ft2        | 
 1103 | 203 | ccc        |    | ft2        | 
 1104 | 204 | ddd        |    | ft2        | 
 1208 | 818 | fff        |    | ft2        | 
    9 |   9 | 00009      | 9  | 9          | foo
   19 |   9 | 00019      | 9  | 9          | foo
   29 |   9 | 00029      | 9  | 9          | foo
   39 |   9 | 00039      | 9  | 9          | foo
   49 |   9 | 00049      | 9  | 9          | foo
(10 rows)

-- ORDER BY ASC NULLS FIRST options
--Testcase 416:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY fields->>'c6' ASC NULLS FIRST, (fields->>'C 1')::int OFFSET 15 LIMIT 10;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit
   Output: "time", tags, fields, ((fields ->> 'c6'::text)), (((fields ->> 'C 1'::text))::integer)
   ->  Sort
         Output: "time", tags, fields, ((fields ->> 'c6'::text)), (((fields ->> 'C 1'::text))::integer)
         Sort Key: ((ft1.fields ->> 'c6'::text)) NULLS FIRST, (((ft1.fields ->> 'C 1'::text))::integer)
         ->  Foreign Scan on public.ft1
               Output: "time", tags, fields, (fields ->> 'c6'::text), ((fields ->> 'C 1'::text))::integer
               InfluxDB query: SELECT * FROM "T1"
(8 rows)

--Testcase 417:
SELECT (fields->>'C 1')::int c1, (fields->>'c2')::int c2, tags->>'c3' c3, fields->>'c6' c6, fields->>'c7' c7, fields->>'c8' c8 FROM ft1 ORDER BY fields->>'c6' ASC NULLS FIRST, (fields->>'C 1')::int OFFSET 15 LIMIT 10;
  c1  | c2  |     c3     |  c6  |     c7     | c8  
------+-----+------------+------+------------+-----
 1020 | 100 | 0002000020 |      | ft2        | 
 1101 | 201 | aaa        |      | ft2        | 
 1103 | 203 | ccc        |      | ft2        | 
 1104 | 204 | ddd        |      | ft2        | 
 1208 | 818 | fff        |      | ft2        | 
 1218 | 818 | ggg        | (--; | ft2        | 
   10 |   0 | 00010      | 0    | 0          | foo
   20 |   0 | 00020      | 0    | 0          | foo
   30 |   0 | 00030      | 0    | 0          | foo
   40 |   0 | 00040      | 0    | 0          | foo
(10 rows)

-- ===================================================================
-- test check constraints
-- ===================================================================
-- Consistent check constraints provide consistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK ((fields->>'c2')::int >= 0);
--Testcase 418:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE (fields->>'c2')::int < 0;
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan
   Output: (count(*))
   InfluxDB query: SELECT count(*) FROM "T1" WHERE (("c2" < 0))
(3 rows)

-- InfluxDB return null value because it does not have any record.
--Testcase 419:
SELECT count(*) FROM ft1 WHERE (fields->>'c2')::int < 0;
 count 
-------
(0 rows)

SET constraint_exclusion = 'on';
--Testcase 420:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE (fields->>'c2')::int < 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 421:
SELECT count(*) FROM ft1 WHERE (fields->>'c2')::int < 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- check constraint is enforced on the remote side, not locally
-- INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
-- UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK ((fields->>'c2')::int < 0);
--Testcase 422:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE (fields->>'c2')::int >= 0;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Foreign Scan
   Output: (count(*))
   InfluxDB query: SELECT count(*) FROM "T1" WHERE (("c2" >= 0))
(3 rows)

--Testcase 423:
SELECT count(*) FROM ft1 WHERE (fields->>'c2')::int >= 0;
 count 
-------
   821
(1 row)

SET constraint_exclusion = 'on';
--Testcase 424:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE (fields->>'c2')::int >= 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 425:
SELECT count(*) FROM ft1 WHERE (fields->>'c2')::int >= 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- local check constraint is not actually enforced
--Testcase 426:
INSERT INTO ft1_nsc(c1, c2) VALUES(1111, 2);
-- UPDATE ft1 SET c2 = c2 + 1 WHERE c1 = 1;
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- influxdb_fdw does not support this feature
-- ===================================================================
-- test WITH CHECK OPTION constraints
-- ===================================================================
--Testcase 427:
CREATE FUNCTION row_before_insupd_trigfunc() RETURNS trigger AS $$BEGIN NEW.a := NEW.a + 10; RETURN NEW; END$$ LANGUAGE plpgsql;
--Testcase 428:
CREATE FOREIGN TABLE base_tbl (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'base_tbl', schemaless 'true');
--ALTER FOREIGN TABLE base_tbl SET (autovacuum_enabled = 'false');
CREATE FOREIGN TABLE base_tbl_nsc (a int, b int) SERVER influxdb_svr OPTIONS (table 'base_tbl');
--Testcase 429:
CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON base_tbl_nsc FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
--Testcase 430:
CREATE FOREIGN TABLE foreign_tbl (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'base_tbl', schemaless 'true');
--Testcase 431:
CREATE VIEW rw_view AS SELECT * FROM base_tbl
  WHERE (fields->>'a')::int < (fields->>'b')::int WITH CHECK OPTION;
CREATE VIEW rw_view_nsc AS SELECT * FROM base_tbl_nsc
  WHERE a < b WITH CHECK OPTION;
--Testcase 432:
\d+ rw_view
                          View "public.rw_view"
 Column | Type  | Collation | Nullable | Default | Storage  | Description 
--------+-------+-----------+----------+---------+----------+-------------
 fields | jsonb |           |          |         | extended | 
View definition:
 SELECT base_tbl.fields
   FROM base_tbl
  WHERE ((base_tbl.fields ->> 'a'::text)::integer) < ((base_tbl.fields ->> 'b'::text)::integer);
Options: check_option=cascaded

--Testcase 433:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view_nsc VALUES (0, 5);
          QUERY PLAN           
-------------------------------
 Insert on public.base_tbl_nsc
   ->  Result
         Output: 0, 5
(3 rows)

--Testcase 434:
INSERT INTO rw_view_nsc VALUES (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view_nsc"
DETAIL:  Failing row contains (10, 5).
--Testcase 435:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view_nsc VALUES (0, 15);
          QUERY PLAN           
-------------------------------
 Insert on public.base_tbl_nsc
   ->  Result
         Output: 0, 15
(3 rows)

--Testcase 436:
INSERT INTO rw_view_nsc VALUES (0, 15); -- ok
--Testcase 437:
SELECT * FROM foreign_tbl;
         fields         
------------------------
 {"a": "10", "b": "5"}
 {"a": "10", "b": "15"}
(2 rows)

--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 5;
--UPDATE rw_view SET b = b + 5; -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 15;
--UPDATE rw_view SET b = b + 15; -- ok
--SELECT * FROM foreign_tbl;
--Testcase 438:
DELETE FROM foreign_tbl;
DROP FOREIGN TABLE foreign_tbl CASCADE;
--Testcase 439:
DROP TRIGGER row_before_insupd_trigger ON base_tbl_nsc;
--Testcase 440:
DROP FOREIGN TABLE base_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
DROP FOREIGN TABLE base_tbl_nsc CASCADE;
NOTICE:  drop cascades to view rw_view_nsc
-- influxdb_fdw does not support partitions
-- test WCO for partitions
--Testcase 441:
CREATE FOREIGN TABLE child_tbl (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'child_tbl', schemaless 'true');
--ALTER FOREIGN TABLE child_tbl SET (autovacuum_enabled = 'false');
CREATE FOREIGN TABLE child_tbl_nsc (a int, b int) SERVER influxdb_svr OPTIONS (table 'child_tbl');
--Testcase 442:
CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON child_tbl_nsc FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
--Testcase 443:
CREATE FOREIGN TABLE foreign_tbl (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'child_tbl', schemaless 'true');
--Testcase 444:
CREATE TABLE parent_tbl (a int, b int) PARTITION BY RANGE(a);
ALTER TABLE parent_tbl ATTACH PARTITION child_tbl_nsc FOR VALUES FROM (0) TO (100);
--Testcase 445:
CREATE VIEW rw_view AS SELECT * FROM parent_tbl
  WHERE a < b WITH CHECK OPTION;
--Testcase 446:
\d+ rw_view
                           View "public.rw_view"
 Column |  Type   | Collation | Nullable | Default | Storage | Description 
--------+---------+-----------+----------+---------+---------+-------------
 a      | integer |           |          |         | plain   | 
 b      | integer |           |          |         | plain   | 
View definition:
 SELECT parent_tbl.a,
    parent_tbl.b
   FROM parent_tbl
  WHERE parent_tbl.a < parent_tbl.b;
Options: check_option=cascaded

--Testcase 447:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 5);
         QUERY PLAN          
-----------------------------
 Insert on public.parent_tbl
   ->  Result
         Output: 0, 5
(3 rows)

--Testcase 448:
INSERT INTO rw_view VALUES (0, 5); -- should fail
ERROR:  Not support partition insert
--Testcase 449:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15);
         QUERY PLAN          
-----------------------------
 Insert on public.parent_tbl
   ->  Result
         Output: 0, 15
(3 rows)

--Testcase 450:
INSERT INTO rw_view VALUES (0, 15); -- ok
ERROR:  Not support partition insert
--Testcase 451:
SELECT * FROM foreign_tbl;
 fields 
--------
(0 rows)

--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 5;
--UPDATE rw_view SET b = b + 5; -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 15;
--UPDATE rw_view SET b = b + 15; -- ok
--SELECT * FROM foreign_tbl;
--Testcase 452:
DROP FOREIGN TABLE foreign_tbl CASCADE;
--Testcase 453:
DROP TRIGGER row_before_insupd_trigger ON child_tbl_nsc;
--Testcase 454:
DROP FOREIGN TABLE child_tbl CASCADE;
DROP FOREIGN TABLE child_tbl_nsc CASCADE;
--Testcase 455:
DROP TABLE parent_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
--Testcase 456:
DROP FUNCTION row_before_insupd_trigfunc;
-- ===================================================================
-- test serial columns (ie, sequence-based defaults)
-- ===================================================================
--Testcase 457:
create foreign table loc1 (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'loc1', schemaless 'true');
--alter foreign table loc1 set (autovacuum_enabled = 'false');
create foreign table loc1_nsc (f1 serial, f2 text)
  server influxdb_svr options(table 'loc1');
--Testcase 458:
create foreign table rem1 (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'loc1', schemaless 'true');
create foreign table rem1_nsc (f1 serial, f2 text)
  server influxdb_svr options(table 'loc1');
--Testcase 459:
select pg_catalog.setval('rem1_nsc_f1_seq', 10, false);
 setval 
--------
     10
(1 row)

--Testcase 460:
insert into loc1_nsc(f2) values('hi');
--Testcase 461:
insert into rem1_nsc(f2) values('hi remote');
--Testcase 462:
insert into loc1_nsc(f2) values('bye');
--Testcase 463:
insert into rem1_nsc(f2) values('bye remote');
--Testcase 464:
select * from loc1;
              fields              
----------------------------------
 {"f1": "1", "f2": "hi"}
 {"f1": "10", "f2": "hi remote"}
 {"f1": "2", "f2": "bye"}
 {"f1": "11", "f2": "bye remote"}
(4 rows)

--Testcase 465:
select * from rem1;
              fields              
----------------------------------
 {"f1": "1", "f2": "hi"}
 {"f1": "10", "f2": "hi remote"}
 {"f1": "2", "f2": "bye"}
 {"f1": "11", "f2": "bye remote"}
(4 rows)

-- ===================================================================
-- test generated columns
-- ===================================================================
--Testcase 466:
create foreign table gloc1 (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'gloc1', schemaless 'true');
--alter foreign table gloc1 set (autovacuum_enabled = 'false');
create foreign table gloc1_nsc (a int, b int generated always as (a * 2) stored)
  server influxdb_svr options(table 'gloc1');
ERROR:  syntax error at or near "("
LINE 1: ...table gloc1_nsc (a int, b int generated always as (a * 2) st...
                                                             ^
--Testcase 467:
create foreign table grem1 (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'gloc1', schemaless 'true');
create foreign table grem1_nsc (
  a int,
  b int generated always as (a * 2) stored)
  server influxdb_svr options(table 'gloc1');
ERROR:  syntax error at or near "("
LINE 3:   b int generated always as (a * 2) stored)
                                    ^
--Testcase 468:
insert into grem1_nsc (a) values (1), (22);
ERROR:  relation "grem1_nsc" does not exist
LINE 1: insert into grem1_nsc (a) values (1), (22);
                    ^
--update grem1 set a = 22 where a = 2;
--Testcase 469:
select * from gloc1;
 fields 
--------
(0 rows)

--Testcase 470:
select * from grem1;
 fields 
--------
(0 rows)

-- Clean up:
delete from grem1_nsc;
ERROR:  relation "grem1_nsc" does not exist
LINE 1: delete from grem1_nsc;
                    ^
-- ===================================================================
-- test local triggers
-- ===================================================================
-- Trigger functions "borrowed" from triggers regress test.
--Testcase 471:
CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
	RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
		TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;$$;
--Testcase 472:
CREATE TRIGGER trig_stmt_before BEFORE DELETE OR INSERT OR UPDATE ON rem1_nsc
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 473:
CREATE TRIGGER trig_stmt_after AFTER DELETE OR INSERT OR UPDATE ON rem1_nsc
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 474:
CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger
LANGUAGE plpgsql AS $$

declare
	oldnew text[];
	relid text;
    argstr text;
begin

	relid := TG_relid::regclass;
	argstr := '';
	for i in 0 .. TG_nargs - 1 loop
		if i > 0 then
			argstr := argstr || ', ';
		end if;
		argstr := argstr || TG_argv[i];
	end loop;

    RAISE NOTICE '%(%) % % % ON %',
		tg_name, argstr, TG_when, TG_level, TG_OP, relid;
    oldnew := '{}'::text[];
	if TG_OP != 'INSERT' then
		oldnew := array_append(oldnew, format('OLD: %s', OLD));
	end if;

	if TG_OP != 'DELETE' then
		oldnew := array_append(oldnew, format('NEW: %s', NEW));
	end if;

    RAISE NOTICE '%', array_to_string(oldnew, ',');

	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
-- Test basic functionality
--Testcase 475:
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 476:
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 477:
delete from rem1_nsc;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_nsc
NOTICE:  OLD: (1,hi)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_nsc
NOTICE:  OLD: (10,"hi remote")
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_nsc
NOTICE:  OLD: (2,bye)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_nsc
NOTICE:  OLD: (11,"bye remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_nsc
NOTICE:  OLD: (1,hi)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_nsc
NOTICE:  OLD: (10,"hi remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_nsc
NOTICE:  OLD: (2,bye)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_nsc
NOTICE:  OLD: (11,"bye remote")
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = AFTER, level = STATEMENT
--Testcase 478:
insert into rem1_nsc values(1,'insert');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1_nsc
NOTICE:  NEW: (1,insert)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1_nsc
NOTICE:  NEW: (1,insert)
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = AFTER, level = STATEMENT
--update rem1 set f2 = 'update' where f1 = 1;
--update rem1 set f2 = f2 || f2;
-- cleanup
--Testcase 479:
DROP TRIGGER trig_row_before ON rem1_nsc;
--Testcase 480:
DROP TRIGGER trig_row_after ON rem1_nsc;
--Testcase 481:
DROP TRIGGER trig_stmt_before ON rem1_nsc;
--Testcase 482:
DROP TRIGGER trig_stmt_after ON rem1_nsc;
--Testcase 483:
DELETE from rem1_nsc;
-- Test multiple AFTER ROW triggers on a foreign table
--Testcase 484:
CREATE TRIGGER trig_row_after1
AFTER INSERT OR UPDATE OR DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 485:
CREATE TRIGGER trig_row_after2
AFTER INSERT OR UPDATE OR DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 486:
insert into rem1_nsc values(1,'insert');
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW INSERT ON rem1_nsc
NOTICE:  NEW: (1,insert)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW INSERT ON rem1_nsc
NOTICE:  NEW: (1,insert)
--update rem1 set f2 = 'update' where f1 = 1;
--update rem1 set f2 = f2 || f2;
--Testcase 487:
delete from rem1_nsc;
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW DELETE ON rem1_nsc
NOTICE:  OLD: (1,insert)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW DELETE ON rem1_nsc
NOTICE:  OLD: (1,insert)
-- cleanup
--Testcase 488:
DROP TRIGGER trig_row_after1 ON rem1_nsc;
--Testcase 489:
DROP TRIGGER trig_row_after2 ON rem1_nsc;
-- Test WHEN conditions
--Testcase 490:
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1_nsc
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 491:
CREATE TRIGGER trig_row_after_insupd
AFTER INSERT OR UPDATE ON rem1_nsc
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Insert or update not matching: nothing happens
--Testcase 492:
INSERT INTO rem1_nsc values(1, 'insert');
--UPDATE rem1 set f2 = 'test';
-- Insert or update matching: triggers are fired
--Testcase 493:
INSERT INTO rem1_nsc values(2, 'update');
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW INSERT ON rem1_nsc
NOTICE:  NEW: (2,update)
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW INSERT ON rem1_nsc
NOTICE:  NEW: (2,update)
--UPDATE rem1 set f2 = 'update update' where f1 = '2';
--Testcase 494:
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1_nsc
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 495:
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1_nsc
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Trigger is fired for f1=2, not for f1=1
--Testcase 496:
DELETE FROM rem1_nsc;
NOTICE:  trig_row_before_delete(23, skidoo) BEFORE ROW DELETE ON rem1_nsc
NOTICE:  OLD: (2,update)
NOTICE:  trig_row_after_delete(23, skidoo) AFTER ROW DELETE ON rem1_nsc
NOTICE:  OLD: (2,update)
-- cleanup
--Testcase 497:
DROP TRIGGER trig_row_before_insupd ON rem1_nsc;
--Testcase 498:
DROP TRIGGER trig_row_after_insupd ON rem1_nsc;
--Testcase 499:
DROP TRIGGER trig_row_before_delete ON rem1_nsc;
--Testcase 500:
DROP TRIGGER trig_row_after_delete ON rem1_nsc;
-- Test various RETURN statements in BEFORE triggers.
--Testcase 501:
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
--Testcase 502:
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- The new values should have 'triggered' appended
--Testcase 503:
INSERT INTO rem1_nsc values(1, 'insert');
--Testcase 504:
SELECT * from loc1;
                 fields                  
-----------------------------------------
 {"f1": "1", "f2": "insert triggered !"}
(1 row)

--Testcase 505:
INSERT INTO rem1_nsc values(2, 'insert');
--Testcase 506:
SELECT fields->>'f2' f2 FROM rem1 WHERE (fields->>'f1')::int = 2;
         f2         
--------------------
 insert triggered !
(1 row)

--Testcase 507:
SELECT * from loc1;
                 fields                  
-----------------------------------------
 {"f1": "1", "f2": "insert triggered !"}
 {"f1": "2", "f2": "insert triggered !"}
(2 rows)

--UPDATE rem1 set f2 = '';
--SELECT * from loc1;
--UPDATE rem1 set f2 = 'skidoo' RETURNING f2;
--SELECT * from loc1;
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f1 = 10;          -- all columns should be transmitted
--UPDATE rem1 set f1 = 10;
--SELECT * from loc1;
--Testcase 508:
DELETE FROM rem1_nsc;
-- Add a second trigger, to check that the changes are propagated correctly
-- from trigger to trigger
--Testcase 509:
CREATE TRIGGER trig_row_before_insupd2
BEFORE INSERT OR UPDATE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
--Testcase 510:
INSERT INTO rem1_nsc values(1, 'insert');
--Testcase 511:
SELECT * from loc1;
                       fields                        
-----------------------------------------------------
 {"f1": "1", "f2": "insert triggered ! triggered !"}
(1 row)

--Testcase 512:
INSERT INTO rem1_nsc values(2, 'insert');
--Testcase 513:
SELECT fields->>'f2' f2 FROM rem1 WHERE (fields->>'f1')::int = 2;
               f2               
--------------------------------
 insert triggered ! triggered !
(1 row)

--Testcase 514:
SELECT * from loc1;
                       fields                        
-----------------------------------------------------
 {"f1": "1", "f2": "insert triggered ! triggered !"}
 {"f1": "2", "f2": "insert triggered ! triggered !"}
(2 rows)

--UPDATE rem1 set f2 = '';
--SELECT * from loc1;
--UPDATE rem1 set f2 = 'skidoo' RETURNING f2;
--SELECT * from loc1;
--Testcase 515:
DROP TRIGGER trig_row_before_insupd ON rem1_nsc;
--Testcase 516:
DROP TRIGGER trig_row_before_insupd2 ON rem1_nsc;
--Testcase 517:
DELETE from rem1_nsc;
--Testcase 518:
INSERT INTO rem1_nsc VALUES (1, 'test');
-- Test with a trigger returning NULL
--Testcase 519:
CREATE FUNCTION trig_null() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql;
--Testcase 520:
CREATE TRIGGER trig_null
BEFORE INSERT OR UPDATE OR DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trig_null();
-- Nothing should have changed.
--Testcase 521:
INSERT INTO rem1_nsc VALUES (2, 'test2');
--Testcase 522:
SELECT * from loc1;
          fields           
---------------------------
 {"f1": "1", "f2": "test"}
(1 row)

--UPDATE rem1 SET f2 = 'test2';
--SELECT * from loc1;
--Testcase 523:
DELETE from rem1_nsc;
--Testcase 524:
SELECT * from loc1;
          fields           
---------------------------
 {"f1": "1", "f2": "test"}
(1 row)

--Testcase 525:
DROP TRIGGER trig_null ON rem1_nsc;
--Testcase 526:
DELETE from rem1_nsc;
-- Test a combination of local and remote triggers
--Testcase 527:
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 528:
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 529:
CREATE TRIGGER trig_local_before BEFORE INSERT OR UPDATE ON loc1_nsc
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
--Testcase 530:
INSERT INTO rem1_nsc(f2) VALUES ('test');
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1_nsc
NOTICE:  NEW: (12,test)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1_nsc
NOTICE:  NEW: (12,test)
--UPDATE rem1 SET f2 = 'testo';
-- Test returning a system attribute
--Testcase 531:
INSERT INTO rem1_nsc(f2) VALUES ('test');
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1_nsc
NOTICE:  NEW: (13,test)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1_nsc
NOTICE:  NEW: (13,test)
--Testcase 532:
SELECT * FROM rem1 WHERE fields->>'f2' = 'test';
           fields           
----------------------------
 {"f1": "12", "f2": "test"}
 {"f1": "13", "f2": "test"}
(2 rows)

-- cleanup
--Testcase 533:
DROP TRIGGER trig_row_before ON rem1_nsc;
--Testcase 534:
DROP TRIGGER trig_row_after ON rem1_nsc;
--Testcase 535:
DROP TRIGGER trig_local_before ON loc1_nsc;
-- Test direct foreign table modification functionality
-- Test with statement-level triggers
--Testcase 536:
CREATE TRIGGER trig_stmt_before
	BEFORE DELETE OR INSERT OR UPDATE ON rem1_nsc
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f2 = '';          -- can be pushed down
--Testcase 537:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_nsc;                 -- can be pushed down
                 QUERY PLAN                 
--------------------------------------------
 Delete on public.rem1_nsc
   ->  Foreign Delete on public.rem1_nsc
         InfluxDB query: DELETE FROM "loc1"
(3 rows)

--Testcase 538:
DROP TRIGGER trig_stmt_before ON rem1_nsc;
--Testcase 539:
CREATE TRIGGER trig_stmt_after
	AFTER DELETE OR INSERT OR UPDATE ON rem1_nsc
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f2 = '';          -- can be pushed down
--Testcase 540:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_nsc;                 -- can be pushed down
                 QUERY PLAN                 
--------------------------------------------
 Delete on public.rem1_nsc
   ->  Foreign Delete on public.rem1_nsc
         InfluxDB query: DELETE FROM "loc1"
(3 rows)

--Testcase 541:
DROP TRIGGER trig_stmt_after ON rem1_nsc;
-- Test with row-level ON INSERT triggers
--Testcase 542:
CREATE TRIGGER trig_row_before_insert
BEFORE INSERT ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f2 = '';          -- can be pushed down
--Testcase 543:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_nsc;                 -- can be pushed down
                 QUERY PLAN                 
--------------------------------------------
 Delete on public.rem1_nsc
   ->  Foreign Delete on public.rem1_nsc
         InfluxDB query: DELETE FROM "loc1"
(3 rows)

--Testcase 544:
DROP TRIGGER trig_row_before_insert ON rem1_nsc;
--Testcase 545:
CREATE TRIGGER trig_row_after_insert
AFTER INSERT ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f2 = '';          -- can be pushed down
--Testcase 546:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_nsc;                 -- can be pushed down
                 QUERY PLAN                 
--------------------------------------------
 Delete on public.rem1_nsc
   ->  Foreign Delete on public.rem1_nsc
         InfluxDB query: DELETE FROM "loc1"
(3 rows)

--Testcase 547:
DROP TRIGGER trig_row_after_insert ON rem1_nsc;
-- Test with row-level ON UPDATE triggers
--Testcase 548:
CREATE TRIGGER trig_row_before_update
BEFORE UPDATE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f2 = '';          -- can't be pushed down
--Testcase 549:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_nsc;                 -- can be pushed down
                 QUERY PLAN                 
--------------------------------------------
 Delete on public.rem1_nsc
   ->  Foreign Delete on public.rem1_nsc
         InfluxDB query: DELETE FROM "loc1"
(3 rows)

--Testcase 550:
DROP TRIGGER trig_row_before_update ON rem1_nsc;
--Testcase 551:
CREATE TRIGGER trig_row_after_update
AFTER UPDATE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f2 = '';          -- can't be pushed down
--Testcase 552:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_nsc;                 -- can be pushed down
                 QUERY PLAN                 
--------------------------------------------
 Delete on public.rem1_nsc
   ->  Foreign Delete on public.rem1_nsc
         InfluxDB query: DELETE FROM "loc1"
(3 rows)

--Testcase 553:
DROP TRIGGER trig_row_after_update ON rem1_nsc;
-- Test with row-level ON DELETE triggers
--Testcase 554:
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f2 = '';          -- can be pushed down
--Testcase 555:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_nsc;                 -- can't be pushed down
                      QUERY PLAN                       
-------------------------------------------------------
 Delete on public.rem1_nsc
   ->  Foreign Scan on public.rem1_nsc
         Output: rem1_nsc.*
         InfluxDB query: SELECT "f1", "f2" FROM "loc1"
(4 rows)

--Testcase 556:
DROP TRIGGER trig_row_before_delete ON rem1_nsc;
--Testcase 557:
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1_nsc
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--EXPLAIN (verbose, costs off)
--UPDATE rem1 set f2 = '';          -- can be pushed down
--Testcase 558:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_nsc;                 -- can't be pushed down
                      QUERY PLAN                       
-------------------------------------------------------
 Delete on public.rem1_nsc
   ->  Foreign Scan on public.rem1_nsc
         Output: rem1_nsc.*
         InfluxDB query: SELECT "f1", "f2" FROM "loc1"
(4 rows)

--Testcase 559:
DROP TRIGGER trig_row_after_delete ON rem1_nsc;
-- ===================================================================
-- test inheritance features
-- ===================================================================
--Testcase 560:
CREATE TABLE a (aa TEXT);
--CREATE TABLE loct (aa TEXT, bb TEXT);
ALTER TABLE a SET (autovacuum_enabled = 'false');
--ALTER TABLE loct SET (autovacuum_enabled = 'false');
-- Because influxdb_fdw does not support UPDATE, to test locally 
-- we create local table.
--Testcase 561:
CREATE TABLE b (bb TEXT) INHERITS (a);
--Testcase 562:
INSERT INTO a(aa) VALUES('aaa');
--Testcase 563:
INSERT INTO a(aa) VALUES('aaaa');
--Testcase 564:
INSERT INTO a(aa) VALUES('aaaaa');
--Testcase 565:
INSERT INTO b(aa) VALUES('bbb');
--Testcase 566:
INSERT INTO b(aa) VALUES('bbbb');
--Testcase 567:
INSERT INTO b(aa) VALUES('bbbbb');
--Testcase 568:
SELECT tableoid::regclass, * FROM a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
 b        | bbb
 b        | bbbb
 b        | bbbbb
(6 rows)

--Testcase 569:
SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb 
----------+-------+----
 b        | bbb   | 
 b        | bbbb  | 
 b        | bbbbb | 
(3 rows)

--Testcase 570:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
(3 rows)

--Testcase 571:
UPDATE a SET aa = 'zzzzzz' WHERE aa LIKE 'aaaa%';
--Testcase 572:
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
 b        | bbb
 b        | bbbb
 b        | bbbbb
(6 rows)

--Testcase 573:
SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb 
----------+-------+----
 b        | bbb   | 
 b        | bbbb  | 
 b        | bbbbb | 
(3 rows)

--Testcase 574:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 575:
UPDATE b SET aa = 'new';
--Testcase 576:
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
 b        | new
 b        | new
 b        | new
(6 rows)

--Testcase 577:
SELECT tableoid::regclass, * FROM b;
 tableoid | aa  | bb 
----------+-----+----
 b        | new | 
 b        | new | 
 b        | new | 
(3 rows)

--Testcase 578:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 579:
UPDATE a SET aa = 'newtoo';
--Testcase 580:
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
 b        | newtoo
 b        | newtoo
 b        | newtoo
(6 rows)

--Testcase 581:
SELECT tableoid::regclass, * FROM b;
 tableoid |   aa   | bb 
----------+--------+----
 b        | newtoo | 
 b        | newtoo | 
 b        | newtoo | 
(3 rows)

--Testcase 582:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
(3 rows)

--Testcase 583:
DELETE FROM a;
--Testcase 584:
SELECT tableoid::regclass, * FROM a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 585:
SELECT tableoid::regclass, * FROM b;
 tableoid | aa | bb 
----------+----+----
(0 rows)

--Testcase 586:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 587:
DROP TABLE a CASCADE;
NOTICE:  drop cascades to table b
--DROP TABLE loct;
-- Check SELECT FOR UPDATE/SHARE with an inherited source table
--Testcase 588:
create foreign table loct1 (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'loct1', schemaless 'true');
create foreign table loct1_nsc (f1 int, f2 int, f3 int) server influxdb_svr options(table 'loct1');
--Testcase 589:
create foreign table loct2 (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'loct2', schemaless 'true');
create foreign table loct2_nsc (f1 int, f2 int, f3 int) server influxdb_svr options(table 'loct2');
--alter table loct1 set (autovacuum_enabled = 'false');
--alter table loct2 set (autovacuum_enabled = 'false');
--Testcase 590:
create foreign table foo (fields jsonb OPTIONS(fields 'true')) SERVER influxdb_svr OPTIONS (table 'foo', schemaless 'true');
create foreign table foo_nsc (f1 int, f2 int)
  server influxdb_svr options (table 'foo');
--Testcase 591:
create foreign table foo2 (fields jsonb OPTIONS(fields 'true')) inherits (foo)
  server influxdb_svr options (table 'loct1', schemaless 'true');
NOTICE:  merging column "fields" with inherited definition
create foreign table foo2_nsc (f3 int) inherits (foo_nsc)
  server influxdb_svr options (table 'loct1');
--Testcase 592:
create foreign table bar (fields jsonb OPTIONS(fields 'true'))
  server influxdb_svr options (table 'bar', schemaless 'true');
create foreign table bar_nsc (f1 int, f2 int)
  server influxdb_svr options (table 'bar');
--Testcase 593:
create foreign table bar2 (fields jsonb OPTIONS(fields 'true')) inherits (bar)
  server influxdb_svr options (table 'loct2', schemaless 'true');
NOTICE:  merging column "fields" with inherited definition
create foreign table bar2_nsc (f3 int) inherits (bar_nsc)
  server influxdb_svr options (table 'loct2');
--alter table foo set (autovacuum_enabled = 'false');
--alter table bar set (autovacuum_enabled = 'false');
--Testcase 594:
insert into foo_nsc values(1,1);
--Testcase 595:
insert into foo_nsc values(3,3);
--Testcase 596:
insert into foo2_nsc values(2,2,2);
--Testcase 597:
insert into foo2_nsc values(4,4,4);
--Testcase 598:
insert into bar_nsc values(1,11);
--Testcase 599:
insert into bar_nsc values(2,22);
--Testcase 600:
insert into bar_nsc values(6,66);
--Testcase 601:
insert into bar2_nsc values(3,33,33);
--Testcase 602:
insert into bar2_nsc values(4,44,44);
--Testcase 603:
insert into bar2_nsc values(7,77,77);
--Testcase 604:
explain (verbose, costs off)
select * from bar where fields->>'f1' in (select fields->>'f1' from foo);
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Hash Join
   Output: bar.fields
   Inner Unique: true
   Hash Cond: ((bar.fields ->> 'f1'::text) = (foo.fields ->> 'f1'::text))
   ->  Append
         ->  Foreign Scan on public.bar
               Output: bar.fields
               InfluxDB query: SELECT * FROM "bar"
         ->  Foreign Scan on public.bar2
               Output: bar2.fields
               InfluxDB query: SELECT * FROM "loct2"
   ->  Hash
         Output: foo.fields
         ->  HashAggregate
               Output: foo.fields
               Group Key: (foo.fields ->> 'f1'::text)
               ->  Result
                     Output: foo.fields, (foo.fields ->> 'f1'::text)
                     ->  Append
                           ->  Foreign Scan on public.foo
                                 Output: foo.fields
                                 InfluxDB query: SELECT * FROM "foo"
                           ->  Foreign Scan on public.foo2
                                 Output: foo2.fields
                                 InfluxDB query: SELECT * FROM "loct1"
(25 rows)

--Testcase 605:
select * from bar where fields->>'f1' in (select fields->>'f1' from foo);
               fields                
-------------------------------------
 {"f1": "1", "f2": "11"}
 {"f1": "2", "f2": "22"}
 {"f1": "3", "f2": "33", "f3": "33"}
 {"f1": "4", "f2": "44", "f3": "44"}
(4 rows)

--Testcase 606:
explain (verbose, costs off)
select * from bar where fields->>'f1' in (select fields->>'f1' from foo);
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Hash Join
   Output: bar.fields
   Inner Unique: true
   Hash Cond: ((bar.fields ->> 'f1'::text) = (foo.fields ->> 'f1'::text))
   ->  Append
         ->  Foreign Scan on public.bar
               Output: bar.fields
               InfluxDB query: SELECT * FROM "bar"
         ->  Foreign Scan on public.bar2
               Output: bar2.fields
               InfluxDB query: SELECT * FROM "loct2"
   ->  Hash
         Output: foo.fields
         ->  HashAggregate
               Output: foo.fields
               Group Key: (foo.fields ->> 'f1'::text)
               ->  Result
                     Output: foo.fields, (foo.fields ->> 'f1'::text)
                     ->  Append
                           ->  Foreign Scan on public.foo
                                 Output: foo.fields
                                 InfluxDB query: SELECT * FROM "foo"
                           ->  Foreign Scan on public.foo2
                                 Output: foo2.fields
                                 InfluxDB query: SELECT * FROM "loct1"
(25 rows)

--Testcase 607:
select * from bar where fields->>'f1' in (select fields->>'f1' from foo);
               fields                
-------------------------------------
 {"f1": "1", "f2": "11"}
 {"f1": "2", "f2": "22"}
 {"f1": "3", "f2": "33", "f3": "33"}
 {"f1": "4", "f2": "44", "f3": "44"}
(4 rows)

/*
-- influxdb_fdw does not support UPDATE
-- Check UPDATE with inherited target and an inherited source table
explain (verbose, costs off)
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);

select tableoid::regclass, * from bar order by 1,2;

-- Check UPDATE with inherited target and an appendrel subquery
explain (verbose, costs off)
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;

select tableoid::regclass, * from bar order by 1,2;

-- Test forcing the remote server to produce sorted data for a merge join,
-- but the foreign table is an inheritance child.
truncate table loct1;
truncate table only foo;
\set num_rows_foo 2000
insert into loct1 select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
insert into foo select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
SET enable_hashjoin to false;
SET enable_nestloop to false;
alter foreign table foo2 options (use_remote_estimate 'true');
create index i_loct1_f1 on loct1(f1);
create index i_foo_f1 on foo(f1);
analyze foo;
analyze loct1;
-- inner join; expressions in the clauses appear in the equivalence class list
explain (verbose, costs off)
	select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
explain (verbose, costs off)
	select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
RESET enable_hashjoin;
RESET enable_nestloop;

-- Test that WHERE CURRENT OF is not supported
begin;
declare c cursor for select * from bar where f1 = 7;
fetch from c;
update bar set f2 = null where current of c;
rollback;

explain (verbose, costs off)
delete from foo where f1 < 5 returning *;
delete from foo where f1 < 5 returning *;
explain (verbose, costs off)
update bar set f2 = f2 + 100 returning *;
update bar set f2 = f2 + 100 returning *;

-- Test that UPDATE/DELETE with inherited target works with row-level triggers
CREATE TRIGGER trig_row_before
BEFORE UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');

CREATE TRIGGER trig_row_after
AFTER UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');

explain (verbose, costs off)
update bar set f2 = f2 + 100;
update bar set f2 = f2 + 100;

explain (verbose, costs off)
delete from bar where f2 < 400;
delete from bar where f2 < 400;

-- cleanup
drop table foo cascade;
drop table bar cascade;
drop table loct1;
drop table loct2;

-- Test pushing down UPDATE/DELETE joins to the remote server
create table parent (a int, b text);
create table loct1 (a int, b text);
create table loct2 (a int, b text);
create foreign table remt1 (a int, b text)
  server influxdb_svr options (table 'loct1');
create foreign table remt2 (a int, b text)
  server influxdb_svr options (table 'loct2');
alter foreign table remt1 inherit parent;

insert into remt1 values (1, 'foo');
insert into remt1 values (2, 'bar');
insert into remt2 values (1, 'foo');
insert into remt2 values (2, 'bar');

analyze remt1;
analyze remt2;

explain (verbose, costs off)
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
explain (verbose, costs off)
delete from parent using remt2 where parent.a = remt2.a returning parent;
delete from parent using remt2 where parent.a = remt2.a returning parent;

-- cleanup
drop foreign table remt1;
drop foreign table remt2;
drop table loct1;
drop table loct2;
drop table parent;
*/
/*
-- Skip test because influxdb does not support partitions table, COPY
-- ===================================================================
-- test tuple routing for foreign-table partitions
-- ===================================================================

-- Test insert tuple routing
create table itrtest (a int, b text) partition by list (a);
create table loct1 (a int check (a in (1)), b text);
create foreign table remp1 (a int check (a in (1)), b text) server loopback options (table_name 'loct1');
create table loct2 (a int check (a in (2)), b text);
create foreign table remp2 (b text, a int check (a in (2))) server loopback options (table_name 'loct2');
alter table itrtest attach partition remp1 for values in (1);
alter table itrtest attach partition remp2 for values in (2);

insert into itrtest values (1, 'foo');
insert into itrtest values (1, 'bar') returning *;
insert into itrtest values (2, 'baz');
insert into itrtest values (2, 'qux') returning *;
insert into itrtest values (1, 'test1'), (2, 'test2') returning *;

select tableoid::regclass, * FROM itrtest;
select tableoid::regclass, * FROM remp1;
select tableoid::regclass, * FROM remp2;

delete from itrtest;

create unique index loct1_idx on loct1 (a);

-- DO NOTHING without an inference specification is supported
insert into itrtest values (1, 'foo') on conflict do nothing returning *;
insert into itrtest values (1, 'foo') on conflict do nothing returning *;

-- But other cases are not supported
insert into itrtest values (1, 'bar') on conflict (a) do nothing;
insert into itrtest values (1, 'bar') on conflict (a) do update set b = excluded.b;

select tableoid::regclass, * FROM itrtest;

delete from itrtest;

drop index loct1_idx;

-- Test that remote triggers work with insert tuple routing
create function br_insert_trigfunc() returns trigger as $$
begin
	new.b := new.b || ' triggered !';
	return new;
end
$$ language plpgsql;
create trigger loct1_br_insert_trigger before insert on loct1
	for each row execute procedure br_insert_trigfunc();
create trigger loct2_br_insert_trigger before insert on loct2
	for each row execute procedure br_insert_trigfunc();

-- The new values are concatenated with ' triggered !'
insert into itrtest values (1, 'foo') returning *;
insert into itrtest values (2, 'qux') returning *;
insert into itrtest values (1, 'test1'), (2, 'test2') returning *;
with result as (insert into itrtest values (1, 'test1'), (2, 'test2') returning *) select * from result;

drop trigger loct1_br_insert_trigger on loct1;
drop trigger loct2_br_insert_trigger on loct2;

drop table itrtest;
drop table loct1;
drop table loct2;

-- Test update tuple routing
create table utrtest (a int, b text) partition by list (a);
create table loct (a int check (a in (1)), b text);
create foreign table remp (a int check (a in (1)), b text) server loopback options (table_name 'loct');
create table locp (a int check (a in (2)), b text);
alter table utrtest attach partition remp for values in (1);
alter table utrtest attach partition locp for values in (2);

insert into utrtest values (1, 'foo');
insert into utrtest values (2, 'qux');

select tableoid::regclass, * FROM utrtest;
select tableoid::regclass, * FROM remp;
select tableoid::regclass, * FROM locp;

-- It's not allowed to move a row from a partition that is foreign to another
update utrtest set a = 2 where b = 'foo' returning *;

-- But the reverse is allowed
update utrtest set a = 1 where b = 'qux' returning *;

select tableoid::regclass, * FROM utrtest;
select tableoid::regclass, * FROM remp;
select tableoid::regclass, * FROM locp;

-- The executor should not let unexercised FDWs shut down
update utrtest set a = 1 where b = 'foo';

-- Test that remote triggers work with update tuple routing
create trigger loct_br_insert_trigger before insert on loct
	for each row execute procedure br_insert_trigfunc();

delete from utrtest;
insert into utrtest values (2, 'qux');

-- Check case where the foreign partition is a subplan target rel
explain (verbose, costs off)
update utrtest set a = 1 where a = 1 or a = 2 returning *;
-- The new values are concatenated with ' triggered !'
update utrtest set a = 1 where a = 1 or a = 2 returning *;

delete from utrtest;
insert into utrtest values (2, 'qux');

-- Check case where the foreign partition isn't a subplan target rel
explain (verbose, costs off)
update utrtest set a = 1 where a = 2 returning *;
-- The new values are concatenated with ' triggered !'
update utrtest set a = 1 where a = 2 returning *;

drop trigger loct_br_insert_trigger on loct;

-- We can move rows to a foreign partition that has been updated already,
-- but can't move rows to a foreign partition that hasn't been updated yet

delete from utrtest;
insert into utrtest values (1, 'foo');
insert into utrtest values (2, 'qux');

-- Test the former case:
-- with a direct modification plan
explain (verbose, costs off)
update utrtest set a = 1 returning *;
update utrtest set a = 1 returning *;

delete from utrtest;
insert into utrtest values (1, 'foo');
insert into utrtest values (2, 'qux');

-- with a non-direct modification plan
explain (verbose, costs off)
update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;

-- Change the definition of utrtest so that the foreign partition get updated
-- after the local partition
delete from utrtest;
alter table utrtest detach partition remp;
drop foreign table remp;
alter table loct drop constraint loct_a_check;
alter table loct add check (a in (3));
create foreign table remp (a int check (a in (3)), b text) server loopback options (table_name 'loct');
alter table utrtest attach partition remp for values in (3);
insert into utrtest values (2, 'qux');
insert into utrtest values (3, 'xyzzy');

-- Test the latter case:
-- with a direct modification plan
explain (verbose, costs off)
update utrtest set a = 3 returning *;
update utrtest set a = 3 returning *; -- ERROR

-- with a non-direct modification plan
explain (verbose, costs off)
update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *;
update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *; -- ERROR

drop table utrtest;
drop table loct;

-- Test copy tuple routing
create table ctrtest (a int, b text) partition by list (a);
create table loct1 (a int check (a in (1)), b text);
create foreign table remp1 (a int check (a in (1)), b text) server loopback options (table_name 'loct1');
create table loct2 (a int check (a in (2)), b text);
create foreign table remp2 (b text, a int check (a in (2))) server loopback options (table_name 'loct2');
alter table ctrtest attach partition remp1 for values in (1);
alter table ctrtest attach partition remp2 for values in (2);

copy ctrtest from stdin;
1	foo
2	qux
\.

select tableoid::regclass, * FROM ctrtest;
select tableoid::regclass, * FROM remp1;
select tableoid::regclass, * FROM remp2;

-- Copying into foreign partitions directly should work as well
copy remp1 from stdin;
1	bar
\.

select tableoid::regclass, * FROM remp1;

drop table ctrtest;
drop table loct1;
drop table loct2;

-- ===================================================================
-- test COPY FROM
-- ===================================================================

create table loc2 (f1 int, f2 text);
alter table loc2 set (autovacuum_enabled = 'false');
create foreign table rem2 (f1 int, f2 text) server loopback options(table_name 'loc2');

-- Test basic functionality
copy rem2 from stdin;
1	foo
2	bar
\.
select * from rem2;

delete from rem2;

-- Test check constraints
alter table loc2 add constraint loc2_f1positive check (f1 >= 0);
alter foreign table rem2 add constraint rem2_f1positive check (f1 >= 0);

-- check constraint is enforced on the remote side, not locally
copy rem2 from stdin;
1	foo
2	bar
\.
copy rem2 from stdin; -- ERROR
-1	xyzzy
\.
select * from rem2;

alter foreign table rem2 drop constraint rem2_f1positive;
alter table loc2 drop constraint loc2_f1positive;

delete from rem2;

-- Test local triggers
create trigger trig_stmt_before before insert on rem2
	for each statement execute procedure trigger_func();
create trigger trig_stmt_after after insert on rem2
	for each statement execute procedure trigger_func();
create trigger trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');

copy rem2 from stdin;
1	foo
2	bar
\.
select * from rem2;

drop trigger trig_row_before on rem2;
drop trigger trig_row_after on rem2;
drop trigger trig_stmt_before on rem2;
drop trigger trig_stmt_after on rem2;

delete from rem2;

create trigger trig_row_before_insert before insert on rem2
	for each row execute procedure trig_row_before_insupdate();

-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
1	foo
2	bar
\.
select * from rem2;

drop trigger trig_row_before_insert on rem2;

delete from rem2;

create trigger trig_null before insert on rem2
	for each row execute procedure trig_null();

-- Nothing happens
copy rem2 from stdin;
1	foo
2	bar
\.
select * from rem2;

drop trigger trig_null on rem2;

delete from rem2;

-- Test remote triggers
create trigger trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();

-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
1	foo
2	bar
\.
select * from rem2;

drop trigger trig_row_before_insert on loc2;

delete from rem2;

create trigger trig_null before insert on loc2
	for each row execute procedure trig_null();

-- Nothing happens
copy rem2 from stdin;
1	foo
2	bar
\.
select * from rem2;

drop trigger trig_null on loc2;

delete from rem2;

-- Test a combination of local and remote triggers
create trigger rem2_trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger rem2_trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger loc2_trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();

copy rem2 from stdin;
1	foo
2	bar
\.
select * from rem2;

drop trigger rem2_trig_row_before on rem2;
drop trigger rem2_trig_row_after on rem2;
drop trigger loc2_trig_row_before_insert on loc2;

delete from rem2;

-- test COPY FROM with foreign table created in the same transaction
create table loc3 (f1 int, f2 text);
begin;
create foreign table rem3 (f1 int, f2 text)
	server loopback options(table_name 'loc3');
copy rem3 from stdin;
1	foo
2	bar
\.
commit;
select * from rem3;
drop foreign table rem3;
drop table loc3;
*/
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
--Testcase 608:
CREATE SCHEMA import_influx1;
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO import_influx1 OPTIONS (schemaless 'true');
--Testcase 609:
\det+ import_influx1.*
                                       List of foreign tables
     Schema     | Table |    Server    |                 FDW options                  | Description 
----------------+-------+--------------+----------------------------------------------+-------------
 import_influx1 | T1    | influxdb_svr | ("table" 'T1', schemaless 'true', tags 'c3') | 
 import_influx1 | T2    | influxdb_svr | ("table" 'T2', schemaless 'true', tags 'c2') | 
 import_influx1 | T3    | influxdb_svr | ("table" 'T3', schemaless 'true', tags 'c3') | 
 import_influx1 | T4    | influxdb_svr | ("table" 'T4', schemaless 'true', tags 'c3') | 
 import_influx1 | bar   | influxdb_svr | ("table" 'bar', schemaless 'true')           | 
 import_influx1 | foo   | influxdb_svr | ("table" 'foo', schemaless 'true')           | 
 import_influx1 | loc1  | influxdb_svr | ("table" 'loc1', schemaless 'true')          | 
 import_influx1 | loct1 | influxdb_svr | ("table" 'loct1', schemaless 'true')         | 
 import_influx1 | loct2 | influxdb_svr | ("table" 'loct2', schemaless 'true')         | 
(9 rows)

--Testcase 610:
\d import_influx1.*
                          Foreign table "import_influx1.T1"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'T1', schemaless 'true', tags 'c3')

                          Foreign table "import_influx1.T2"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'T2', schemaless 'true', tags 'c2')

                          Foreign table "import_influx1.T3"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'T3', schemaless 'true', tags 'c3')

                          Foreign table "import_influx1.T4"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'T4', schemaless 'true', tags 'c3')

                          Foreign table "import_influx1.bar"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'bar', schemaless 'true')

                          Foreign table "import_influx1.foo"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'foo', schemaless 'true')

                         Foreign table "import_influx1.loc1"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'loc1', schemaless 'true')

                         Foreign table "import_influx1.loct1"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'loct1', schemaless 'true')

                         Foreign table "import_influx1.loct2"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: influxdb_svr
FDW options: ("table" 'loct2', schemaless 'true')

-- Options
--Testcase 611:
CREATE SCHEMA import_influx2;
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO import_influx2
  OPTIONS (import_default 'true', schemaless 'true');
ERROR:  invalid option "import_default"
--Testcase 612:
\det+ import_influx2.*
               List of foreign tables
 Schema | Table | Server | FDW options | Description 
--------+-------+--------+-------------+-------------
(0 rows)

--Testcase 613:
\d import_influx2.*
--Testcase 614:
CREATE SCHEMA import_influx3;
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO import_influx3
  OPTIONS (import_collate 'false', import_not_null 'false', schemaless 'true');
ERROR:  invalid option "import_collate"
--Testcase 615:
\det+ import_influx3.*
               List of foreign tables
 Schema | Table | Server | FDW options | Description 
--------+-------+--------+-------------+-------------
(0 rows)

--Testcase 616:
\d import_influx3.*
-- Check LIMIT TO and EXCEPT
--Testcase 617:
CREATE SCHEMA import_influx4;
IMPORT FOREIGN SCHEMA public LIMIT TO ("T1", loct, nonesuch)
  FROM SERVER influxdb_svr INTO import_influx4 OPTIONS (schemaless 'true');
--Testcase 618:
\det+ import_influx4.*
                                       List of foreign tables
     Schema     | Table |    Server    |                 FDW options                  | Description 
----------------+-------+--------------+----------------------------------------------+-------------
 import_influx4 | T1    | influxdb_svr | ("table" 'T1', schemaless 'true', tags 'c3') | 
(1 row)

IMPORT FOREIGN SCHEMA public EXCEPT ("T1", loct, nonesuch)
  FROM SERVER influxdb_svr INTO import_influx4 OPTIONS (schemaless 'true');
--Testcase 619:
\det+ import_influx4.*
                                       List of foreign tables
     Schema     | Table |    Server    |                 FDW options                  | Description 
----------------+-------+--------------+----------------------------------------------+-------------
 import_influx4 | T1    | influxdb_svr | ("table" 'T1', schemaless 'true', tags 'c3') | 
 import_influx4 | T2    | influxdb_svr | ("table" 'T2', schemaless 'true', tags 'c2') | 
 import_influx4 | T3    | influxdb_svr | ("table" 'T3', schemaless 'true', tags 'c3') | 
 import_influx4 | T4    | influxdb_svr | ("table" 'T4', schemaless 'true', tags 'c3') | 
 import_influx4 | bar   | influxdb_svr | ("table" 'bar', schemaless 'true')           | 
 import_influx4 | foo   | influxdb_svr | ("table" 'foo', schemaless 'true')           | 
 import_influx4 | loc1  | influxdb_svr | ("table" 'loc1', schemaless 'true')          | 
 import_influx4 | loct1 | influxdb_svr | ("table" 'loct1', schemaless 'true')         | 
 import_influx4 | loct2 | influxdb_svr | ("table" 'loct2', schemaless 'true')         | 
(9 rows)

-- Assorted error cases
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO import_influx4 OPTIONS (schemaless 'true');
ERROR:  relation "T1" already exists
CONTEXT:  importing foreign table "T1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER influxdb_svr INTO import_influx4 OPTIONS (schemaless 'true');
ERROR:  relation "T1" already exists
CONTEXT:  importing foreign table "T1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER influxdb_svr INTO notthere OPTIONS (schemaless 'true');
ERROR:  schema "notthere" does not exist
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere OPTIONS (schemaless 'true');
ERROR:  server "nowhere" does not exist
/*
-- Skip these test, influxdb_fdw does not support fetch_size option, partition table
-- Check case of a type present only on the remote server.
-- We can fake this by dropping the type locally in our transaction.
CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
CREATE TABLE import_source.t5 (c1 int, c2 text collate "C", "Col" "Colors");

CREATE SCHEMA import_dest5;
BEGIN;
DROP TYPE "Colors" CASCADE;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
  FROM SERVER loopback INTO import_dest5;  -- ERROR

ROLLBACK;

BEGIN;


CREATE SERVER fetch101 FOREIGN DATA WRAPPER postgres_fdw OPTIONS( fetch_size '101' );

SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];

ALTER SERVER fetch101 OPTIONS( SET fetch_size '202' );

SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];

SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=202'];

CREATE FOREIGN TABLE table30000 ( x int ) SERVER fetch101 OPTIONS ( fetch_size '30000' );

SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];

ALTER FOREIGN TABLE table30000 OPTIONS ( SET fetch_size '60000');

SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];

SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=60000'];

ROLLBACK;

-- ===================================================================
-- test partitionwise joins
-- ===================================================================
SET enable_partitionwise_join=on;

CREATE TABLE fprt1 (a int, b int, c varchar) PARTITION BY RANGE(a);
CREATE TABLE fprt1_p1 (LIKE fprt1);
CREATE TABLE fprt1_p2 (LIKE fprt1);
ALTER TABLE fprt1_p1 SET (autovacuum_enabled = 'false');
ALTER TABLE fprt1_p2 SET (autovacuum_enabled = 'false');
INSERT INTO fprt1_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 2) i;
INSERT INTO fprt1_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 2) i;
CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
	SERVER loopback OPTIONS (table_name 'fprt1_p1', use_remote_estimate 'true');
CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
	SERVER loopback OPTIONS (TABLE_NAME 'fprt1_p2');
ANALYZE fprt1;
ANALYZE fprt1_p1;
ANALYZE fprt1_p2;

CREATE TABLE fprt2 (a int, b int, c varchar) PARTITION BY RANGE(b);
CREATE TABLE fprt2_p1 (LIKE fprt2);
CREATE TABLE fprt2_p2 (LIKE fprt2);
ALTER TABLE fprt2_p1 SET (autovacuum_enabled = 'false');
ALTER TABLE fprt2_p2 SET (autovacuum_enabled = 'false');
INSERT INTO fprt2_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 3) i;
INSERT INTO fprt2_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 3) i;
CREATE FOREIGN TABLE ftprt2_p1 (b int, c varchar, a int)
	SERVER loopback OPTIONS (table_name 'fprt2_p1', use_remote_estimate 'true');
ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1 FOR VALUES FROM (0) TO (250);
CREATE FOREIGN TABLE ftprt2_p2 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
	SERVER loopback OPTIONS (table_name 'fprt2_p2', use_remote_estimate 'true');
ANALYZE fprt2;
ANALYZE fprt2_p1;
ANALYZE fprt2_p2;

-- inner join three tables
EXPLAIN (COSTS OFF)
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;

-- left outer join + nullable clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;

-- with whole-row reference; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;

-- join with lateral reference
EXPLAIN (COSTS OFF)
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;

-- with PHVs, partitionwise join selected but no join pushdown
EXPLAIN (COSTS OFF)
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;

-- test FOR UPDATE; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;

RESET enable_partitionwise_join;


-- ===================================================================
-- test partitionwise aggregates
-- ===================================================================

CREATE TABLE pagg_tab (a int, b int, c text) PARTITION BY RANGE(a);

CREATE TABLE pagg_tab_p1 (LIKE pagg_tab);
CREATE TABLE pagg_tab_p2 (LIKE pagg_tab);
CREATE TABLE pagg_tab_p3 (LIKE pagg_tab);

INSERT INTO pagg_tab_p1 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 10;
INSERT INTO pagg_tab_p2 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 20 and (i % 30) >= 10;
INSERT INTO pagg_tab_p3 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 30 and (i % 30) >= 20;

-- Create foreign partitions
CREATE FOREIGN TABLE fpagg_tab_p1 PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10) SERVER loopback OPTIONS (table_name 'pagg_tab_p1');
CREATE FOREIGN TABLE fpagg_tab_p2 PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20) SERVER loopback OPTIONS (table_name 'pagg_tab_p2');
CREATE FOREIGN TABLE fpagg_tab_p3 PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30) SERVER loopback OPTIONS (table_name 'pagg_tab_p3');

ANALYZE pagg_tab;
ANALYZE fpagg_tab_p1;
ANALYZE fpagg_tab_p2;
ANALYZE fpagg_tab_p3;

-- When GROUP BY clause matches with PARTITION KEY.
-- Plan with partitionwise aggregates is disabled
SET enable_partitionwise_aggregate TO false;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;

-- Plan with partitionwise aggregates is enabled
SET enable_partitionwise_aggregate TO true;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;

-- Check with whole-row reference
-- Should have all the columns in the target list for the given relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;

-- When GROUP BY clause does not match with PARTITION KEY.
EXPLAIN (COSTS OFF)
SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
*/
/*
-- Skip test, influxdb_fdw does not support nosuperuser
-- ===================================================================
-- access rights and superuser
-- ===================================================================

-- Non-superuser cannot create a FDW without a password in the connstr
CREATE ROLE regress_nosuper NOSUPERUSER;

GRANT USAGE ON FOREIGN DATA WRAPPER influxdb_fdw TO regress_nosuper;

SET ROLE regress_nosuper;

SHOW is_superuser;

-- This will be OK, we can create the FDW
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER loopback_nopw FOREIGN DATA WRAPPER influxdb_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;

-- But creation of user mappings for non-superusers should fail
CREATE USER MAPPING FOR public SERVER loopback_nopw;
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback_nopw;

CREATE FOREIGN TABLE ft1_nopw (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum
) SERVER loopback_nopw OPTIONS (schema_name 'public', table_name 'ft1');

SELECT * FROM ft1_nopw LIMIT 1;

-- If we add a password to the connstr it'll fail, because we don't allow passwords
-- in connstrs only in user mappings.

DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER loopback_nopw OPTIONS (ADD password 'dummypw')$$;
    END;
$d$;

-- If we add a password for our user mapping instead, we should get a different
-- error because the password wasn't actually *used* when we run with trust auth.
--
-- This won't work with installcheck, but neither will most of the FDW checks.

ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD password 'dummypw');

SELECT * FROM ft1_nopw LIMIT 1;

-- Unpriv user cannot make the mapping passwordless
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD password_required 'false');


SELECT * FROM ft1_nopw LIMIT 1;

RESET ROLE;

-- But the superuser can
ALTER USER MAPPING FOR regress_nosuper SERVER loopback_nopw OPTIONS (ADD password_required 'false');

SET ROLE regress_nosuper;

-- Should finally work now
SELECT * FROM ft1_nopw LIMIT 1;

-- unpriv user also cannot set sslcert / sslkey on the user mapping
-- first set password_required so we see the right error messages
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (SET password_required 'true');
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD sslcert 'foo.crt');
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD sslkey 'foo.key');

-- We're done with the role named after a specific user and need to check the
-- changes to the public mapping.
DROP USER MAPPING FOR CURRENT_USER SERVER loopback_nopw;

-- This will fail again as it'll resolve the user mapping for public, which
-- lacks password_required=false
SELECT * FROM ft1_nopw LIMIT 1;

RESET ROLE;

-- The user mapping for public is passwordless and lacks the password_required=false
-- mapping option, but will work because the current user is a superuser.
SELECT * FROM ft1_nopw LIMIT 1;

-- cleanup
DROP USER MAPPING FOR public SERVER loopback_nopw;
DROP OWNED BY regress_nosuper;
DROP ROLE regress_nosuper;
*/
-- influxdb_fdw does not support transactions
-- Two-phase transactions are not supported.
--BEGIN;
--Testcase 620:
SELECT count(*) FROM ft1;
 count 
-------
   822
(1 row)

-- error here
--PREPARE TRANSACTION 'fdw_tpc';
--ROLLBACK;
-- Clean-up
DELETE FROM ft1_nsc;
DELETE FROM ft2_nsc;
DELETE FROM ft4_nsc;
DELETE FROM ft5_nsc;
DELETE FROM foo_nsc;
DELETE FROM bar_nsc;
DELETE FROM loct1_nsc;
DELETE FROM loct2_nsc;
DELETE FROM rem1_nsc;
DROP FOREIGN TABLE foo_nsc cascade;
NOTICE:  drop cascades to foreign table foo2_nsc
DROP FOREIGN TABLE bar_nsc cascade;
NOTICE:  drop cascades to foreign table bar2_nsc
DROP FOREIGN TABLE loct1_nsc;
DROP FOREIGN TABLE loct2_nsc;
DROP FOREIGN TABLE "S 1".s1t0;
DROP FOREIGN TABLE "S 1".s1t1;
DROP FOREIGN TABLE "S 1".s1t2;
DROP FOREIGN TABLE "S 1".s1t3;
DROP FOREIGN TABLE "S 1".s1t4;
DROP FOREIGN TABLE ft1_nsc;
DROP FOREIGN TABLE ft2_nsc;
DROP FOREIGN TABLE ft4_nsc;
DROP FOREIGN TABLE ft5_nsc;
DROP TYPE IF EXISTS user_enum;
DROP SCHEMA IF EXISTS "S 1" CASCADE;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to foreign table "S 1"."T 0"
drop cascades to foreign table "S 1"."T 1"
drop cascades to foreign table "S 1"."T 2"
drop cascades to foreign table "S 1"."T 3"
drop cascades to foreign table "S 1"."T 4"
drop cascades to function "S 1".f_brtrig()
DROP FUNCTION IF EXISTS trigger_func();
DROP FUNCTION IF EXISTS trig_row_before_insupdate();
DROP FUNCTION IF EXISTS trig_null();
DROP SCHEMA IF EXISTS import_influx1 CASCADE;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to foreign table import_influx1."T1"
drop cascades to foreign table import_influx1."T2"
drop cascades to foreign table import_influx1."T3"
drop cascades to foreign table import_influx1."T4"
drop cascades to foreign table import_influx1.bar
drop cascades to foreign table import_influx1.foo
drop cascades to foreign table import_influx1.loc1
drop cascades to foreign table import_influx1.loct1
drop cascades to foreign table import_influx1.loct2
DROP SCHEMA IF EXISTS import_influx2 CASCADE;
DROP SCHEMA IF EXISTS import_influx3 CASCADE;
DROP SCHEMA IF EXISTS import_influx4 CASCADE;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to foreign table import_influx4."T1"
drop cascades to foreign table import_influx4."T2"
drop cascades to foreign table import_influx4."T3"
drop cascades to foreign table import_influx4."T4"
drop cascades to foreign table import_influx4.bar
drop cascades to foreign table import_influx4.foo
drop cascades to foreign table import_influx4.loc1
drop cascades to foreign table import_influx4.loct1
drop cascades to foreign table import_influx4.loct2
--Testcase 621:
DROP USER MAPPING FOR public SERVER testserver1;
--Testcase 622:
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr;
--Testcase 623:
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr2;
--Testcase 624:
DROP SERVER testserver1 CASCADE;
--Testcase 625:
DROP SERVER influxdb_svr CASCADE;
NOTICE:  drop cascades to 18 other objects
DETAIL:  drop cascades to foreign table ft1
drop cascades to foreign table ft2
drop cascades to foreign table ft4
drop cascades to foreign table ft5
drop cascades to foreign table loct3
drop cascades to foreign table ft3
drop cascades to foreign table loc1
drop cascades to foreign table loc1_nsc
drop cascades to foreign table rem1
drop cascades to foreign table rem1_nsc
drop cascades to foreign table gloc1
drop cascades to foreign table grem1
drop cascades to foreign table loct1
drop cascades to foreign table loct2
drop cascades to foreign table foo
drop cascades to foreign table foo2
drop cascades to foreign table bar
drop cascades to foreign table bar2
--Testcase 626:
DROP SERVER influxdb_svr2 CASCADE;
NOTICE:  drop cascades to foreign table ft6
--Testcase 627:
DROP EXTENSION influxdb_fdw;
