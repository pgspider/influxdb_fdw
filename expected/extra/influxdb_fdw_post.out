-- SET datestyle=ISO;
-- ===================================================================
-- create FDW objects
-- ===================================================================
CREATE EXTENSION influxdb_fdw;
CREATE SERVER testserver1 FOREIGN DATA WRAPPER influxdb_fdw;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER influxdb_svr FOREIGN DATA WRAPPER influxdb_fdw
            OPTIONS (dbname 'postdb', host 'http://localhost', port '8086')$$;
        EXECUTE $$CREATE SERVER influxdb_svr2 FOREIGN DATA WRAPPER influxdb_fdw
            OPTIONS (dbname 'postdb', host 'http://localhost', port '8086')$$;
    END;
$d$;
CREATE USER MAPPING FOR public SERVER testserver1 OPTIONS (user 'value', password 'value');
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr OPTIONS (user 'user', password 'pass');
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr2 OPTIONS (user 'user', password 'pass');
-- import time column as timestamp and text type
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
CREATE SCHEMA "S 1";
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO "S 1";
-- ===================================================================
-- create foreign tables
-- ===================================================================
CREATE FOREIGN TABLE ft1 (
	time timestamp,
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	-- c4 timestamptz,
	-- c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 text
) SERVER influxdb_svr;
ALTER FOREIGN TABLE ft1 DROP COLUMN c0;
CREATE FOREIGN TABLE ft2 (
	time timestamp,
	c1 int NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	-- c4 timestamptz,
	-- c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 text
) SERVER influxdb_svr;
ALTER FOREIGN TABLE ft2 DROP COLUMN cx;
CREATE FOREIGN TABLE ft4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr OPTIONS (table 'T3');
CREATE FOREIGN TABLE ft5 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr OPTIONS (table 'T4');
CREATE FOREIGN TABLE ft6 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr2 OPTIONS (table 'T4');
-- ===================================================================
-- tests for validator
-- ===================================================================
-- requiressl, krbsrvname and gsslib are omitted because they depend on
-- configure options
ALTER SERVER testserver1 OPTIONS (
	-- use_remote_estimate 'false',
	-- updatable 'true',
	-- fdw_startup_cost '123.456',
	-- fdw_tuple_cost '0.123',
	-- service 'value',
	-- connect_timeout 'value',
	dbname 'value',
	host 'value',
	port 'value'
	-- hostaddr 'value',
	-- client_encoding 'value',
	-- application_name 'value',
	-- fallback_application_name 'value',
	-- keepalives 'value',
	-- keepalives_idle 'value',
	-- keepalives_interval 'value',
	-- tcp_user_timeout 'value',
	-- requiressl 'value',
	-- sslcompression 'value',
	-- sslmode 'value',
	-- sslcert 'value',
	-- sslkey 'value',
	-- sslrootcert 'value',
	-- sslcrl 'value'
	-- --requirepeer 'value',
	-- krbsrvname 'value',
	-- gsslib 'value',
	-- replication 'value'
);
-- Error, invalid list syntax
ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo; bar');
ERROR:  invalid option "extensions"
HINT:  Valid options in this context are: host, port, dbname
-- OK but gets a warning
ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo, bar');
ERROR:  invalid option "extensions"
HINT:  Valid options in this context are: host, port, dbname
ALTER SERVER testserver1 OPTIONS (DROP extensions);
ERROR:  option "extensions" not found
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (DROP user, DROP password);
ALTER FOREIGN TABLE ft1 OPTIONS (table 'T1');
ALTER FOREIGN TABLE ft2 OPTIONS (table 'T1');
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 OPTIONS (column_name 'C1');
ALTER FOREIGN TABLE ft2 ALTER COLUMN c1 OPTIONS (column_name 'C1');
--Testcase 1:
\det+
                    List of foreign tables
 Schema | Table |    Server     |  FDW options   | Description 
--------+-------+---------------+----------------+-------------
 public | ft1   | influxdb_svr  | ("table" 'T1') | 
 public | ft2   | influxdb_svr  | ("table" 'T1') | 
 public | ft4   | influxdb_svr  | ("table" 'T3') | 
 public | ft5   | influxdb_svr  | ("table" 'T4') | 
 public | ft6   | influxdb_svr2 | ("table" 'T4') | 
(5 rows)

--Testcase 2:
SELECT * FROM "S 1"."T1" LIMIT 10;
             time             | C1 | c2 |  c3   | c6 |     c7     | c8  
------------------------------+----+----+-------+----+------------+-----
 Thu Jan 01 16:00:00 1970 PST |  1 |  1 | 00001 | 1  | 1          | foo
 Fri Jan 02 16:00:00 1970 PST |  2 |  2 | 00002 | 2  | 2          | foo
 Sat Jan 03 16:00:00 1970 PST |  3 |  3 | 00003 | 3  | 3          | foo
 Sun Jan 04 16:00:00 1970 PST |  4 |  4 | 00004 | 4  | 4          | foo
 Mon Jan 05 16:00:00 1970 PST |  5 |  5 | 00005 | 5  | 5          | foo
 Tue Jan 06 16:00:00 1970 PST |  6 |  6 | 00006 | 6  | 6          | foo
 Wed Jan 07 16:00:00 1970 PST |  7 |  7 | 00007 | 7  | 7          | foo
 Thu Jan 08 16:00:00 1970 PST |  8 |  8 | 00008 | 8  | 8          | foo
 Fri Jan 09 16:00:00 1970 PST |  9 |  9 | 00009 | 9  | 9          | foo
 Sat Jan 10 16:00:00 1970 PST | 10 |  0 | 00010 | 0  | 0          | foo
(10 rows)

--Testcase 3:
SELECT * FROM ft1 LIMIT 10;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
 Tue Jan 06 00:00:00 1970 |  5 |  5 | 00005 | 5  | 5          | foo
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo
 Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
 Fri Jan 09 00:00:00 1970 |  8 |  8 | 00008 | 8  | 8          | foo
 Sat Jan 10 00:00:00 1970 |  9 |  9 | 00009 | 9  | 9          | foo
 Sun Jan 11 00:00:00 1970 | 10 |  0 | 00010 | 0  | 0          | foo
(10 rows)

--Testcase 4:
SELECT * FROM ft2 LIMIT 10;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
 Tue Jan 06 00:00:00 1970 |  5 |  5 | 00005 | 5  | 5          | foo
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo
 Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
 Fri Jan 09 00:00:00 1970 |  8 |  8 | 00008 | 8  | 8          | foo
 Sat Jan 10 00:00:00 1970 |  9 |  9 | 00009 | 9  | 9          | foo
 Sun Jan 11 00:00:00 1970 | 10 |  0 | 00010 | 0  | 0          | foo
(10 rows)

--Testcase 5:
SELECT * FROM ft4 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
  2 |  3 | AAA002
  4 |  5 | AAA004
  6 |  7 | AAA006
  8 |  9 | AAA008
 10 | 11 | AAA010
 12 | 13 | AAA012
 14 | 15 | AAA014
 16 | 17 | AAA016
 18 | 19 | AAA018
 20 | 21 | AAA020
(10 rows)

--Testcase 6:
SELECT * FROM ft5 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
  3 |  4 | AAA003
  6 |  7 | AAA006
  9 | 10 | AAA009
 12 | 13 | AAA012
 15 | 16 | AAA015
 18 | 19 | AAA018
 21 | 22 | AAA021
 24 | 25 | AAA024
 27 | 28 | AAA027
 30 | 31 | AAA030
(10 rows)

--Testcase 7:
SELECT * FROM ft6 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
  3 |  4 | AAA003
  6 |  7 | AAA006
  9 | 10 | AAA009
 12 | 13 | AAA012
 15 | 16 | AAA015
 18 | 19 | AAA018
 21 | 22 | AAA021
 24 | 25 | AAA024
 27 | 28 | AAA027
 30 | 31 | AAA030
(10 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
--Testcase 8:
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

ALTER SERVER influxdb_svr OPTIONS (SET dbname 'no such database');
--Testcase 9:
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  influxdb_fdw : database not found: no such database
DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER influxdb_svr
            OPTIONS (SET dbname 'postdb')$$;
    END;
$d$;
--Testcase 10:
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

-- Test that alteration of user mapping options causes reconnection
ALTER USER MAPPING FOR CURRENT_USER SERVER influxdb_svr
  OPTIONS (ADD user 'no such user');               -- error
ERROR:  option "user" provided more than once
--Testcase 11:
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

ALTER USER MAPPING FOR CURRENT_USER SERVER influxdb_svr
  OPTIONS (DROP user);
--Testcase 12:
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

\set VERBOSITY default
-- Now we should be able to run ANALYZE.
-- To exercise multiple code paths, we use local stats on ft1
-- and remote-estimate mode on ft2.
ANALYZE ft1;
WARNING:  skipping "ft1" --- cannot analyze this foreign table
ALTER FOREIGN TABLE ft2 OPTIONS (use_remote_estimate 'true');
ERROR:  invalid option "use_remote_estimate"
HINT:  Valid options in this context are: table, tags
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
--Testcase 13:
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
           QUERY PLAN            
---------------------------------
 Limit
   ->  Sort
         Sort Key: c3, c1
         ->  Foreign Scan on ft1
(4 rows)

--Testcase 14:
SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sun Apr 12 00:00:00 1970 | 101 |  1 | 00101 | 1  | 1          | foo
 Mon Apr 13 00:00:00 1970 | 102 |  2 | 00102 | 2  | 2          | foo
 Tue Apr 14 00:00:00 1970 | 103 |  3 | 00103 | 3  | 3          | foo
 Wed Apr 15 00:00:00 1970 | 104 |  4 | 00104 | 4  | 4          | foo
 Thu Apr 16 00:00:00 1970 | 105 |  5 | 00105 | 5  | 5          | foo
 Fri Apr 17 00:00:00 1970 | 106 |  6 | 00106 | 6  | 6          | foo
 Sat Apr 18 00:00:00 1970 | 107 |  7 | 00107 | 7  | 7          | foo
 Sun Apr 19 00:00:00 1970 | 108 |  8 | 00108 | 8  | 8          | foo
 Mon Apr 20 00:00:00 1970 | 109 |  9 | 00109 | 9  | 9          | foo
 Tue Apr 21 00:00:00 1970 | 110 |  0 | 00110 | 0  | 0          | foo
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
--Testcase 15:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8, tableoid
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8, tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: "time", c1, c2, c3, c6, c7, c8, tableoid
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

--Testcase 16:
SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sun Apr 12 00:00:00 1970 | 101 |  1 | 00101 | 1  | 1          | foo
 Mon Apr 13 00:00:00 1970 | 102 |  2 | 00102 | 2  | 2          | foo
 Tue Apr 14 00:00:00 1970 | 103 |  3 | 00103 | 3  | 3          | foo
 Wed Apr 15 00:00:00 1970 | 104 |  4 | 00104 | 4  | 4          | foo
 Thu Apr 16 00:00:00 1970 | 105 |  5 | 00105 | 5  | 5          | foo
 Fri Apr 17 00:00:00 1970 | 106 |  6 | 00106 | 6  | 6          | foo
 Sat Apr 18 00:00:00 1970 | 107 |  7 | 00107 | 7  | 7          | foo
 Sun Apr 19 00:00:00 1970 | 108 |  8 | 00108 | 8  | 8          | foo
 Mon Apr 20 00:00:00 1970 | 109 |  9 | 00109 | 9  | 9          | foo
 Tue Apr 21 00:00:00 1970 | 110 |  0 | 00110 | 0  | 0          | foo
(10 rows)

-- whole-row reference
--Testcase 17:
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.*, c3, c1
   ->  Sort
         Output: t1.*, c3, c1
         Sort Key: t1.c3, t1.c1
         ->  Foreign Scan on public.ft1 t1
               Output: t1.*, c3, c1
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

--Testcase 18:
SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                             t1                              
-------------------------------------------------------------
 ("Sun Apr 12 00:00:00 1970",101,1,00101,1,"1         ",foo)
 ("Mon Apr 13 00:00:00 1970",102,2,00102,2,"2         ",foo)
 ("Tue Apr 14 00:00:00 1970",103,3,00103,3,"3         ",foo)
 ("Wed Apr 15 00:00:00 1970",104,4,00104,4,"4         ",foo)
 ("Thu Apr 16 00:00:00 1970",105,5,00105,5,"5         ",foo)
 ("Fri Apr 17 00:00:00 1970",106,6,00106,6,"6         ",foo)
 ("Sat Apr 18 00:00:00 1970",107,7,00107,7,"7         ",foo)
 ("Sun Apr 19 00:00:00 1970",108,8,00108,8,"8         ",foo)
 ("Mon Apr 20 00:00:00 1970",109,9,00109,9,"9         ",foo)
 ("Tue Apr 21 00:00:00 1970",110,0,00110,0,"0         ",foo)
(10 rows)

-- empty result
--Testcase 19:
SELECT * FROM ft1 WHERE false;
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

-- with WHERE clause
--Testcase 20:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c7 >= '1'::bpchar)
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 101)) AND (("c6" = '1'))
(4 rows)

--Testcase 21:
SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sun Apr 12 00:00:00 1970 | 101 |  1 | 00101 | 1  | 1          | foo
(1 row)

-- with FOR UPDATE/SHARE
--Testcase 22:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 LockRows
   Output: "time", c1, c2, c3, c6, c7, c8, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: "time", c1, c2, c3, c6, c7, c8, t1.*
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 101))
(5 rows)

--Testcase 23:
SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sun Apr 12 00:00:00 1970 | 101 |  1 | 00101 | 1  | 1          | foo
(1 row)

--Testcase 24:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 LockRows
   Output: "time", c1, c2, c3, c6, c7, c8, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: "time", c1, c2, c3, c6, c7, c8, t1.*
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 102))
(5 rows)

--Testcase 25:
SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Mon Apr 13 00:00:00 1970 | 102 |  2 | 00102 | 2  | 2          | foo
(1 row)

-- aggregate
--Testcase 26:
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
--Testcase 27:
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
 Tue Jan 06 00:00:00 1970 |  5 |  5 | 00005 | 5  | 5          | foo
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo
 Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
 Fri Jan 09 00:00:00 1970 |  8 |  8 | 00008 | 8  | 8          | foo
 Sat Jan 10 00:00:00 1970 |  9 |  9 | 00009 | 9  | 9          | foo
 Sun Jan 11 00:00:00 1970 | 10 |  0 | 00010 | 0  | 0          | foo
(10 rows)

-- subquery+MAX
-- TODO
-- SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
--Testcase 28:
SELECT * FROM ft1 t1 WHERE t1.c2 = (SELECT MAX(c2) FROM ft2 t2) ORDER BY c1;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sat Jan 10 00:00:00 1970 |   9 |  9 | 00009 | 9  | 9          | foo
 Tue Jan 20 00:00:00 1970 |  19 |  9 | 00019 | 9  | 9          | foo
 Fri Jan 30 00:00:00 1970 |  29 |  9 | 00029 | 9  | 9          | foo
 Mon Feb 09 00:00:00 1970 |  39 |  9 | 00039 | 9  | 9          | foo
 Thu Feb 19 00:00:00 1970 |  49 |  9 | 00049 | 9  | 9          | foo
 Sun Mar 01 00:00:00 1970 |  59 |  9 | 00059 | 9  | 9          | foo
 Wed Mar 11 00:00:00 1970 |  69 |  9 | 00069 | 9  | 9          | foo
 Sat Mar 21 00:00:00 1970 |  79 |  9 | 00079 | 9  | 9          | foo
 Tue Mar 31 00:00:00 1970 |  89 |  9 | 00089 | 9  | 9          | foo
 Fri Apr 10 00:00:00 1970 |  99 |  9 | 00099 | 9  | 9          | foo
 Mon Apr 20 00:00:00 1970 | 109 |  9 | 00109 | 9  | 9          | foo
 Thu Apr 30 00:00:00 1970 | 119 |  9 | 00119 | 9  | 9          | foo
 Sun May 10 00:00:00 1970 | 129 |  9 | 00129 | 9  | 9          | foo
 Wed May 20 00:00:00 1970 | 139 |  9 | 00139 | 9  | 9          | foo
 Sat May 30 00:00:00 1970 | 149 |  9 | 00149 | 9  | 9          | foo
 Tue Jun 09 00:00:00 1970 | 159 |  9 | 00159 | 9  | 9          | foo
 Fri Jun 19 00:00:00 1970 | 169 |  9 | 00169 | 9  | 9          | foo
 Mon Jun 29 00:00:00 1970 | 179 |  9 | 00179 | 9  | 9          | foo
 Thu Jul 09 00:00:00 1970 | 189 |  9 | 00189 | 9  | 9          | foo
 Sun Jul 19 00:00:00 1970 | 199 |  9 | 00199 | 9  | 9          | foo
 Wed Jul 29 00:00:00 1970 | 209 |  9 | 00209 | 9  | 9          | foo
 Sat Aug 08 00:00:00 1970 | 219 |  9 | 00219 | 9  | 9          | foo
 Tue Aug 18 00:00:00 1970 | 229 |  9 | 00229 | 9  | 9          | foo
 Fri Aug 28 00:00:00 1970 | 239 |  9 | 00239 | 9  | 9          | foo
 Mon Sep 07 00:00:00 1970 | 249 |  9 | 00249 | 9  | 9          | foo
 Thu Sep 17 00:00:00 1970 | 259 |  9 | 00259 | 9  | 9          | foo
 Sun Sep 27 00:00:00 1970 | 269 |  9 | 00269 | 9  | 9          | foo
 Wed Oct 07 00:00:00 1970 | 279 |  9 | 00279 | 9  | 9          | foo
 Sat Oct 17 00:00:00 1970 | 289 |  9 | 00289 | 9  | 9          | foo
 Tue Oct 27 00:00:00 1970 | 299 |  9 | 00299 | 9  | 9          | foo
 Fri Nov 06 00:00:00 1970 | 309 |  9 | 00309 | 9  | 9          | foo
 Mon Nov 16 00:00:00 1970 | 319 |  9 | 00319 | 9  | 9          | foo
 Thu Nov 26 00:00:00 1970 | 329 |  9 | 00329 | 9  | 9          | foo
 Sun Dec 06 00:00:00 1970 | 339 |  9 | 00339 | 9  | 9          | foo
 Wed Dec 16 00:00:00 1970 | 349 |  9 | 00349 | 9  | 9          | foo
 Sat Dec 26 00:00:00 1970 | 359 |  9 | 00359 | 9  | 9          | foo
 Tue Jan 05 00:00:00 1971 | 369 |  9 | 00369 | 9  | 9          | foo
 Fri Jan 15 00:00:00 1971 | 379 |  9 | 00379 | 9  | 9          | foo
 Mon Jan 25 00:00:00 1971 | 389 |  9 | 00389 | 9  | 9          | foo
 Thu Feb 04 00:00:00 1971 | 399 |  9 | 00399 | 9  | 9          | foo
 Sun Feb 14 00:00:00 1971 | 409 |  9 | 00409 | 9  | 9          | foo
 Wed Feb 24 00:00:00 1971 | 419 |  9 | 00419 | 9  | 9          | foo
 Sat Mar 06 00:00:00 1971 | 429 |  9 | 00429 | 9  | 9          | foo
 Tue Mar 16 00:00:00 1971 | 439 |  9 | 00439 | 9  | 9          | foo
 Fri Mar 26 00:00:00 1971 | 449 |  9 | 00449 | 9  | 9          | foo
 Mon Apr 05 00:00:00 1971 | 459 |  9 | 00459 | 9  | 9          | foo
 Thu Apr 15 00:00:00 1971 | 469 |  9 | 00469 | 9  | 9          | foo
 Sun Apr 25 00:00:00 1971 | 479 |  9 | 00479 | 9  | 9          | foo
 Wed May 05 00:00:00 1971 | 489 |  9 | 00489 | 9  | 9          | foo
 Sat May 15 00:00:00 1971 | 499 |  9 | 00499 | 9  | 9          | foo
 Tue May 25 00:00:00 1971 | 509 |  9 | 00509 | 9  | 9          | foo
 Fri Jun 04 00:00:00 1971 | 519 |  9 | 00519 | 9  | 9          | foo
 Mon Jun 14 00:00:00 1971 | 529 |  9 | 00529 | 9  | 9          | foo
 Thu Jun 24 00:00:00 1971 | 539 |  9 | 00539 | 9  | 9          | foo
 Sun Jul 04 00:00:00 1971 | 549 |  9 | 00549 | 9  | 9          | foo
 Wed Jul 14 00:00:00 1971 | 559 |  9 | 00559 | 9  | 9          | foo
 Sat Jul 24 00:00:00 1971 | 569 |  9 | 00569 | 9  | 9          | foo
 Tue Aug 03 00:00:00 1971 | 579 |  9 | 00579 | 9  | 9          | foo
 Fri Aug 13 00:00:00 1971 | 589 |  9 | 00589 | 9  | 9          | foo
 Mon Aug 23 00:00:00 1971 | 599 |  9 | 00599 | 9  | 9          | foo
 Thu Sep 02 00:00:00 1971 | 609 |  9 | 00609 | 9  | 9          | foo
 Sun Sep 12 00:00:00 1971 | 619 |  9 | 00619 | 9  | 9          | foo
 Wed Sep 22 00:00:00 1971 | 629 |  9 | 00629 | 9  | 9          | foo
 Sat Oct 02 00:00:00 1971 | 639 |  9 | 00639 | 9  | 9          | foo
 Tue Oct 12 00:00:00 1971 | 649 |  9 | 00649 | 9  | 9          | foo
 Fri Oct 22 00:00:00 1971 | 659 |  9 | 00659 | 9  | 9          | foo
 Mon Nov 01 00:00:00 1971 | 669 |  9 | 00669 | 9  | 9          | foo
 Thu Nov 11 00:00:00 1971 | 679 |  9 | 00679 | 9  | 9          | foo
 Sun Nov 21 00:00:00 1971 | 689 |  9 | 00689 | 9  | 9          | foo
 Wed Dec 01 00:00:00 1971 | 699 |  9 | 00699 | 9  | 9          | foo
 Sat Dec 11 00:00:00 1971 | 709 |  9 | 00709 | 9  | 9          | foo
 Tue Dec 21 00:00:00 1971 | 719 |  9 | 00719 | 9  | 9          | foo
 Fri Dec 31 00:00:00 1971 | 729 |  9 | 00729 | 9  | 9          | foo
 Mon Jan 10 00:00:00 1972 | 739 |  9 | 00739 | 9  | 9          | foo
 Thu Jan 20 00:00:00 1972 | 749 |  9 | 00749 | 9  | 9          | foo
 Sun Jan 30 00:00:00 1972 | 759 |  9 | 00759 | 9  | 9          | foo
 Wed Feb 09 00:00:00 1972 | 769 |  9 | 00769 | 9  | 9          | foo
 Sat Feb 19 00:00:00 1972 | 779 |  9 | 00779 | 9  | 9          | foo
 Tue Feb 29 00:00:00 1972 | 789 |  9 | 00789 | 9  | 9          | foo
 Fri Mar 10 00:00:00 1972 | 799 |  9 | 00799 | 9  | 9          | foo
 Mon Mar 20 00:00:00 1972 | 809 |  9 | 00809 | 9  | 9          | foo
 Thu Mar 30 00:00:00 1972 | 819 |  9 | 00819 | 9  | 9          | foo
 Sun Apr 09 00:00:00 1972 | 829 |  9 | 00829 | 9  | 9          | foo
 Wed Apr 19 00:00:00 1972 | 839 |  9 | 00839 | 9  | 9          | foo
 Sat Apr 29 00:00:00 1972 | 849 |  9 | 00849 | 9  | 9          | foo
 Tue May 09 00:00:00 1972 | 859 |  9 | 00859 | 9  | 9          | foo
 Fri May 19 00:00:00 1972 | 869 |  9 | 00869 | 9  | 9          | foo
 Mon May 29 00:00:00 1972 | 879 |  9 | 00879 | 9  | 9          | foo
 Thu Jun 08 00:00:00 1972 | 889 |  9 | 00889 | 9  | 9          | foo
 Sun Jun 18 00:00:00 1972 | 899 |  9 | 00899 | 9  | 9          | foo
 Wed Jun 28 00:00:00 1972 | 909 |  9 | 00909 | 9  | 9          | foo
 Sat Jul 08 00:00:00 1972 | 919 |  9 | 00919 | 9  | 9          | foo
 Tue Jul 18 00:00:00 1972 | 929 |  9 | 00929 | 9  | 9          | foo
 Fri Jul 28 00:00:00 1972 | 939 |  9 | 00939 | 9  | 9          | foo
 Mon Aug 07 00:00:00 1972 | 949 |  9 | 00949 | 9  | 9          | foo
 Thu Aug 17 00:00:00 1972 | 959 |  9 | 00959 | 9  | 9          | foo
 Sun Aug 27 00:00:00 1972 | 969 |  9 | 00969 | 9  | 9          | foo
 Wed Sep 06 00:00:00 1972 | 979 |  9 | 00979 | 9  | 9          | foo
 Sat Sep 16 00:00:00 1972 | 989 |  9 | 00989 | 9  | 9          | foo
 Tue Sep 26 00:00:00 1972 | 999 |  9 | 00999 | 9  | 9          | foo
(100 rows)

-- used in CTE
--Testcase 29:
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.time FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |           time           
----+----+-------+--------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970
(10 rows)

-- fixed values
--Testcase 30:
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
SET enable_hashjoin TO false;
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 31:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C1" FROM ft2 t1 JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C1") OFFSET 100 LIMIT 10;
                        QUERY PLAN                         
-----------------------------------------------------------
 Limit
   Output: t1.c1, t2."C1"
   ->  Merge Join
         Output: t1.c1, t2."C1"
         Merge Cond: (t2."C1" = t1.c1)
         ->  Sort
               Output: t2."C1"
               Sort Key: t2."C1"
               ->  Foreign Scan on "S 1"."T1" t2
                     Output: t2."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(17 rows)

--Testcase 32:
SELECT t1.c1, t2."C1" FROM ft2 t1 JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C1") OFFSET 100 LIMIT 10;
 c1  | C1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 33:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C1" FROM ft2 t1 LEFT JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C1") OFFSET 100 LIMIT 10;
                        QUERY PLAN                         
-----------------------------------------------------------
 Limit
   Output: t1.c1, t2."C1"
   ->  Merge Right Join
         Output: t1.c1, t2."C1"
         Merge Cond: (t2."C1" = t1.c1)
         ->  Sort
               Output: t2."C1"
               Sort Key: t2."C1"
               ->  Foreign Scan on "S 1"."T1" t2
                     Output: t2."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(17 rows)

--Testcase 34:
SELECT t1.c1, t2."C1" FROM ft2 t1 LEFT JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C1") OFFSET 100 LIMIT 10;
 c1  | C1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
--Testcase 35:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C1" FROM "S 1"."T1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1."C1"
   ->  Merge Left Join
         Output: t1."C1"
         Merge Cond: (t1."C1" = t3.c1)
         ->  Sort
               Output: t1."C1"
               Sort Key: t1."C1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Materialize
               Output: t3.c1
               ->  Merge Join
                     Output: t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(28 rows)

--Testcase 36:
SELECT t1."C1" FROM "S 1"."T1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
 C1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
--Testcase 37:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C1", t2.c1, t3.c1 FROM "S 1"."T1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1."C1", t2.c1, t3.c1
   ->  Merge Left Join
         Output: t1."C1", t2.c1, t3.c1
         Merge Cond: (t1."C1" = t3.c1)
         ->  Sort
               Output: t1."C1"
               Sort Key: t1."C1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Materialize
               Output: t3.c1, t2.c1
               ->  Merge Left Join
                     Output: t3.c1, t2.c1
                     Merge Cond: (t3.c1 = t2.c1)
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(28 rows)

--Testcase 38:
SELECT t1."C1", t2.c1, t3.c1 FROM "S 1"."T1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
 C1  | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
--Testcase 39:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C1", t2.c1, t3.c1 FROM "S 1"."T1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1."C1", t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1."C1", t2.c1, t3.c1
         Merge Cond: (t1."C1" = t3.c1)
         ->  Sort
               Output: t1."C1"
               Sort Key: t1."C1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Sort
               Output: t2.c1, t3.c1
               Sort Key: t3.c1
               ->  Merge Full Join
                     Output: t2.c1, t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(29 rows)

--Testcase 40:
SELECT t1."C1", t2.c1, t3.c1 FROM "S 1"."T1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
 C1  | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
--Testcase 41:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

--Testcase 42:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 100)) AND (("c2" = 0))
(3 rows)

--Testcase 43:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c1 IS NULL)
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

--Testcase 44:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c1 IS NOT NULL)
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

--Testcase 45:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (round((abs(t1.c1))::numeric, 0) = '1'::numeric)
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

--Testcase 46:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = (- "C1")))
(3 rows)

--Testcase 47:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE 1 = c1!;           -- OpExpr(r)
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: ('1'::numeric = ((t1.c1)::bigint !))
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

--Testcase 48:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: ((t1.c1 IS NOT NULL) IS DISTINCT FROM (t1.c1 IS NOT NULL))
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

--Testcase 49:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c1 = ANY (ARRAY[t1.c2, 1, (t1.c1 + 0)]))
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

--Testcase 50:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- SubscriptingRef
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c1 = (ARRAY[t1.c1, t1.c2, 3])[1])
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

--Testcase 51:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c6" = 'foo''s\\bar'))
(3 rows)

--Testcase 52:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo'))
(3 rows)

-- parameterized remote path for foreign table
--Testcase 53:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T1" a, ft2 b WHERE a."C1" = 47 AND b.c1 = a.c2;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."time", a."C1", a.c2, a.c3, a.c6, a.c7, a.c8, b."time", b.c1, b.c2, b.c3, b.c6, b.c7, b.c8
   Hash Cond: (b.c1 = a.c2)
   ->  Foreign Scan on public.ft2 b
         Output: b."time", b.c1, b.c2, b.c3, b.c6, b.c7, b.c8
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
   ->  Hash
         Output: a."time", a."C1", a.c2, a.c3, a.c6, a.c7, a.c8
         ->  Foreign Scan on "S 1"."T1" a
               Output: a."time", a."C1", a.c2, a.c3, a.c6, a.c7, a.c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 47))
(11 rows)

--Testcase 54:
SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  |           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----+--------------------------+----+----+-------+----+------------+-----
 Tue Feb 17 00:00:00 1970 | 47 |  7 | 00047 | 7  | 7          | foo | Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
(1 row)

-- check both safe and unsafe join conditions
--Testcase 55:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."time", a.c1, a.c2, a.c3, a.c6, a.c7, a.c8, b."time", b.c1, b.c2, b.c3, b.c6, b.c7, b.c8
   Hash Cond: ((b.c1 = a.c1) AND ((b.c7)::text = upper((a.c7)::text)))
   ->  Foreign Scan on public.ft2 b
         Output: b."time", b.c1, b.c2, b.c3, b.c6, b.c7, b.c8
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
   ->  Hash
         Output: a."time", a.c1, a.c2, a.c3, a.c6, a.c7, a.c8
         ->  Foreign Scan on public.ft2 a
               Output: a."time", a.c1, a.c2, a.c3, a.c6, a.c7, a.c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c2" = 6)) AND (("c8" = 'foo'))
(11 rows)

--Testcase 56:
SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  |           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----+--------------------------+-----+----+-------+----+------------+-----
 Wed Jan 07 00:00:00 1970 |   6 |  6 | 00006 | 6  | 6          | foo | Wed Jan 07 00:00:00 1970 |   6 |  6 | 00006 | 6  | 6          | foo
 Sat Jan 17 00:00:00 1970 |  16 |  6 | 00016 | 6  | 6          | foo | Sat Jan 17 00:00:00 1970 |  16 |  6 | 00016 | 6  | 6          | foo
 Tue Jan 27 00:00:00 1970 |  26 |  6 | 00026 | 6  | 6          | foo | Tue Jan 27 00:00:00 1970 |  26 |  6 | 00026 | 6  | 6          | foo
 Fri Feb 06 00:00:00 1970 |  36 |  6 | 00036 | 6  | 6          | foo | Fri Feb 06 00:00:00 1970 |  36 |  6 | 00036 | 6  | 6          | foo
 Mon Feb 16 00:00:00 1970 |  46 |  6 | 00046 | 6  | 6          | foo | Mon Feb 16 00:00:00 1970 |  46 |  6 | 00046 | 6  | 6          | foo
 Thu Feb 26 00:00:00 1970 |  56 |  6 | 00056 | 6  | 6          | foo | Thu Feb 26 00:00:00 1970 |  56 |  6 | 00056 | 6  | 6          | foo
 Sun Mar 08 00:00:00 1970 |  66 |  6 | 00066 | 6  | 6          | foo | Sun Mar 08 00:00:00 1970 |  66 |  6 | 00066 | 6  | 6          | foo
 Wed Mar 18 00:00:00 1970 |  76 |  6 | 00076 | 6  | 6          | foo | Wed Mar 18 00:00:00 1970 |  76 |  6 | 00076 | 6  | 6          | foo
 Sat Mar 28 00:00:00 1970 |  86 |  6 | 00086 | 6  | 6          | foo | Sat Mar 28 00:00:00 1970 |  86 |  6 | 00086 | 6  | 6          | foo
 Tue Apr 07 00:00:00 1970 |  96 |  6 | 00096 | 6  | 6          | foo | Tue Apr 07 00:00:00 1970 |  96 |  6 | 00096 | 6  | 6          | foo
 Fri Apr 17 00:00:00 1970 | 106 |  6 | 00106 | 6  | 6          | foo | Fri Apr 17 00:00:00 1970 | 106 |  6 | 00106 | 6  | 6          | foo
 Mon Apr 27 00:00:00 1970 | 116 |  6 | 00116 | 6  | 6          | foo | Mon Apr 27 00:00:00 1970 | 116 |  6 | 00116 | 6  | 6          | foo
 Thu May 07 00:00:00 1970 | 126 |  6 | 00126 | 6  | 6          | foo | Thu May 07 00:00:00 1970 | 126 |  6 | 00126 | 6  | 6          | foo
 Sun May 17 00:00:00 1970 | 136 |  6 | 00136 | 6  | 6          | foo | Sun May 17 00:00:00 1970 | 136 |  6 | 00136 | 6  | 6          | foo
 Wed May 27 00:00:00 1970 | 146 |  6 | 00146 | 6  | 6          | foo | Wed May 27 00:00:00 1970 | 146 |  6 | 00146 | 6  | 6          | foo
 Sat Jun 06 00:00:00 1970 | 156 |  6 | 00156 | 6  | 6          | foo | Sat Jun 06 00:00:00 1970 | 156 |  6 | 00156 | 6  | 6          | foo
 Tue Jun 16 00:00:00 1970 | 166 |  6 | 00166 | 6  | 6          | foo | Tue Jun 16 00:00:00 1970 | 166 |  6 | 00166 | 6  | 6          | foo
 Fri Jun 26 00:00:00 1970 | 176 |  6 | 00176 | 6  | 6          | foo | Fri Jun 26 00:00:00 1970 | 176 |  6 | 00176 | 6  | 6          | foo
 Mon Jul 06 00:00:00 1970 | 186 |  6 | 00186 | 6  | 6          | foo | Mon Jul 06 00:00:00 1970 | 186 |  6 | 00186 | 6  | 6          | foo
 Thu Jul 16 00:00:00 1970 | 196 |  6 | 00196 | 6  | 6          | foo | Thu Jul 16 00:00:00 1970 | 196 |  6 | 00196 | 6  | 6          | foo
 Sun Jul 26 00:00:00 1970 | 206 |  6 | 00206 | 6  | 6          | foo | Sun Jul 26 00:00:00 1970 | 206 |  6 | 00206 | 6  | 6          | foo
 Wed Aug 05 00:00:00 1970 | 216 |  6 | 00216 | 6  | 6          | foo | Wed Aug 05 00:00:00 1970 | 216 |  6 | 00216 | 6  | 6          | foo
 Sat Aug 15 00:00:00 1970 | 226 |  6 | 00226 | 6  | 6          | foo | Sat Aug 15 00:00:00 1970 | 226 |  6 | 00226 | 6  | 6          | foo
 Tue Aug 25 00:00:00 1970 | 236 |  6 | 00236 | 6  | 6          | foo | Tue Aug 25 00:00:00 1970 | 236 |  6 | 00236 | 6  | 6          | foo
 Fri Sep 04 00:00:00 1970 | 246 |  6 | 00246 | 6  | 6          | foo | Fri Sep 04 00:00:00 1970 | 246 |  6 | 00246 | 6  | 6          | foo
 Mon Sep 14 00:00:00 1970 | 256 |  6 | 00256 | 6  | 6          | foo | Mon Sep 14 00:00:00 1970 | 256 |  6 | 00256 | 6  | 6          | foo
 Thu Sep 24 00:00:00 1970 | 266 |  6 | 00266 | 6  | 6          | foo | Thu Sep 24 00:00:00 1970 | 266 |  6 | 00266 | 6  | 6          | foo
 Sun Oct 04 00:00:00 1970 | 276 |  6 | 00276 | 6  | 6          | foo | Sun Oct 04 00:00:00 1970 | 276 |  6 | 00276 | 6  | 6          | foo
 Wed Oct 14 00:00:00 1970 | 286 |  6 | 00286 | 6  | 6          | foo | Wed Oct 14 00:00:00 1970 | 286 |  6 | 00286 | 6  | 6          | foo
 Sat Oct 24 00:00:00 1970 | 296 |  6 | 00296 | 6  | 6          | foo | Sat Oct 24 00:00:00 1970 | 296 |  6 | 00296 | 6  | 6          | foo
 Tue Nov 03 00:00:00 1970 | 306 |  6 | 00306 | 6  | 6          | foo | Tue Nov 03 00:00:00 1970 | 306 |  6 | 00306 | 6  | 6          | foo
 Fri Nov 13 00:00:00 1970 | 316 |  6 | 00316 | 6  | 6          | foo | Fri Nov 13 00:00:00 1970 | 316 |  6 | 00316 | 6  | 6          | foo
 Mon Nov 23 00:00:00 1970 | 326 |  6 | 00326 | 6  | 6          | foo | Mon Nov 23 00:00:00 1970 | 326 |  6 | 00326 | 6  | 6          | foo
 Thu Dec 03 00:00:00 1970 | 336 |  6 | 00336 | 6  | 6          | foo | Thu Dec 03 00:00:00 1970 | 336 |  6 | 00336 | 6  | 6          | foo
 Sun Dec 13 00:00:00 1970 | 346 |  6 | 00346 | 6  | 6          | foo | Sun Dec 13 00:00:00 1970 | 346 |  6 | 00346 | 6  | 6          | foo
 Wed Dec 23 00:00:00 1970 | 356 |  6 | 00356 | 6  | 6          | foo | Wed Dec 23 00:00:00 1970 | 356 |  6 | 00356 | 6  | 6          | foo
 Sat Jan 02 00:00:00 1971 | 366 |  6 | 00366 | 6  | 6          | foo | Sat Jan 02 00:00:00 1971 | 366 |  6 | 00366 | 6  | 6          | foo
 Tue Jan 12 00:00:00 1971 | 376 |  6 | 00376 | 6  | 6          | foo | Tue Jan 12 00:00:00 1971 | 376 |  6 | 00376 | 6  | 6          | foo
 Fri Jan 22 00:00:00 1971 | 386 |  6 | 00386 | 6  | 6          | foo | Fri Jan 22 00:00:00 1971 | 386 |  6 | 00386 | 6  | 6          | foo
 Mon Feb 01 00:00:00 1971 | 396 |  6 | 00396 | 6  | 6          | foo | Mon Feb 01 00:00:00 1971 | 396 |  6 | 00396 | 6  | 6          | foo
 Thu Feb 11 00:00:00 1971 | 406 |  6 | 00406 | 6  | 6          | foo | Thu Feb 11 00:00:00 1971 | 406 |  6 | 00406 | 6  | 6          | foo
 Sun Feb 21 00:00:00 1971 | 416 |  6 | 00416 | 6  | 6          | foo | Sun Feb 21 00:00:00 1971 | 416 |  6 | 00416 | 6  | 6          | foo
 Wed Mar 03 00:00:00 1971 | 426 |  6 | 00426 | 6  | 6          | foo | Wed Mar 03 00:00:00 1971 | 426 |  6 | 00426 | 6  | 6          | foo
 Sat Mar 13 00:00:00 1971 | 436 |  6 | 00436 | 6  | 6          | foo | Sat Mar 13 00:00:00 1971 | 436 |  6 | 00436 | 6  | 6          | foo
 Tue Mar 23 00:00:00 1971 | 446 |  6 | 00446 | 6  | 6          | foo | Tue Mar 23 00:00:00 1971 | 446 |  6 | 00446 | 6  | 6          | foo
 Fri Apr 02 00:00:00 1971 | 456 |  6 | 00456 | 6  | 6          | foo | Fri Apr 02 00:00:00 1971 | 456 |  6 | 00456 | 6  | 6          | foo
 Mon Apr 12 00:00:00 1971 | 466 |  6 | 00466 | 6  | 6          | foo | Mon Apr 12 00:00:00 1971 | 466 |  6 | 00466 | 6  | 6          | foo
 Thu Apr 22 00:00:00 1971 | 476 |  6 | 00476 | 6  | 6          | foo | Thu Apr 22 00:00:00 1971 | 476 |  6 | 00476 | 6  | 6          | foo
 Sun May 02 00:00:00 1971 | 486 |  6 | 00486 | 6  | 6          | foo | Sun May 02 00:00:00 1971 | 486 |  6 | 00486 | 6  | 6          | foo
 Wed May 12 00:00:00 1971 | 496 |  6 | 00496 | 6  | 6          | foo | Wed May 12 00:00:00 1971 | 496 |  6 | 00496 | 6  | 6          | foo
 Sat May 22 00:00:00 1971 | 506 |  6 | 00506 | 6  | 6          | foo | Sat May 22 00:00:00 1971 | 506 |  6 | 00506 | 6  | 6          | foo
 Tue Jun 01 00:00:00 1971 | 516 |  6 | 00516 | 6  | 6          | foo | Tue Jun 01 00:00:00 1971 | 516 |  6 | 00516 | 6  | 6          | foo
 Fri Jun 11 00:00:00 1971 | 526 |  6 | 00526 | 6  | 6          | foo | Fri Jun 11 00:00:00 1971 | 526 |  6 | 00526 | 6  | 6          | foo
 Mon Jun 21 00:00:00 1971 | 536 |  6 | 00536 | 6  | 6          | foo | Mon Jun 21 00:00:00 1971 | 536 |  6 | 00536 | 6  | 6          | foo
 Thu Jul 01 00:00:00 1971 | 546 |  6 | 00546 | 6  | 6          | foo | Thu Jul 01 00:00:00 1971 | 546 |  6 | 00546 | 6  | 6          | foo
 Sun Jul 11 00:00:00 1971 | 556 |  6 | 00556 | 6  | 6          | foo | Sun Jul 11 00:00:00 1971 | 556 |  6 | 00556 | 6  | 6          | foo
 Wed Jul 21 00:00:00 1971 | 566 |  6 | 00566 | 6  | 6          | foo | Wed Jul 21 00:00:00 1971 | 566 |  6 | 00566 | 6  | 6          | foo
 Sat Jul 31 00:00:00 1971 | 576 |  6 | 00576 | 6  | 6          | foo | Sat Jul 31 00:00:00 1971 | 576 |  6 | 00576 | 6  | 6          | foo
 Tue Aug 10 00:00:00 1971 | 586 |  6 | 00586 | 6  | 6          | foo | Tue Aug 10 00:00:00 1971 | 586 |  6 | 00586 | 6  | 6          | foo
 Fri Aug 20 00:00:00 1971 | 596 |  6 | 00596 | 6  | 6          | foo | Fri Aug 20 00:00:00 1971 | 596 |  6 | 00596 | 6  | 6          | foo
 Mon Aug 30 00:00:00 1971 | 606 |  6 | 00606 | 6  | 6          | foo | Mon Aug 30 00:00:00 1971 | 606 |  6 | 00606 | 6  | 6          | foo
 Thu Sep 09 00:00:00 1971 | 616 |  6 | 00616 | 6  | 6          | foo | Thu Sep 09 00:00:00 1971 | 616 |  6 | 00616 | 6  | 6          | foo
 Sun Sep 19 00:00:00 1971 | 626 |  6 | 00626 | 6  | 6          | foo | Sun Sep 19 00:00:00 1971 | 626 |  6 | 00626 | 6  | 6          | foo
 Wed Sep 29 00:00:00 1971 | 636 |  6 | 00636 | 6  | 6          | foo | Wed Sep 29 00:00:00 1971 | 636 |  6 | 00636 | 6  | 6          | foo
 Sat Oct 09 00:00:00 1971 | 646 |  6 | 00646 | 6  | 6          | foo | Sat Oct 09 00:00:00 1971 | 646 |  6 | 00646 | 6  | 6          | foo
 Tue Oct 19 00:00:00 1971 | 656 |  6 | 00656 | 6  | 6          | foo | Tue Oct 19 00:00:00 1971 | 656 |  6 | 00656 | 6  | 6          | foo
 Fri Oct 29 00:00:00 1971 | 666 |  6 | 00666 | 6  | 6          | foo | Fri Oct 29 00:00:00 1971 | 666 |  6 | 00666 | 6  | 6          | foo
 Mon Nov 08 00:00:00 1971 | 676 |  6 | 00676 | 6  | 6          | foo | Mon Nov 08 00:00:00 1971 | 676 |  6 | 00676 | 6  | 6          | foo
 Thu Nov 18 00:00:00 1971 | 686 |  6 | 00686 | 6  | 6          | foo | Thu Nov 18 00:00:00 1971 | 686 |  6 | 00686 | 6  | 6          | foo
 Sun Nov 28 00:00:00 1971 | 696 |  6 | 00696 | 6  | 6          | foo | Sun Nov 28 00:00:00 1971 | 696 |  6 | 00696 | 6  | 6          | foo
 Wed Dec 08 00:00:00 1971 | 706 |  6 | 00706 | 6  | 6          | foo | Wed Dec 08 00:00:00 1971 | 706 |  6 | 00706 | 6  | 6          | foo
 Sat Dec 18 00:00:00 1971 | 716 |  6 | 00716 | 6  | 6          | foo | Sat Dec 18 00:00:00 1971 | 716 |  6 | 00716 | 6  | 6          | foo
 Tue Dec 28 00:00:00 1971 | 726 |  6 | 00726 | 6  | 6          | foo | Tue Dec 28 00:00:00 1971 | 726 |  6 | 00726 | 6  | 6          | foo
 Fri Jan 07 00:00:00 1972 | 736 |  6 | 00736 | 6  | 6          | foo | Fri Jan 07 00:00:00 1972 | 736 |  6 | 00736 | 6  | 6          | foo
 Mon Jan 17 00:00:00 1972 | 746 |  6 | 00746 | 6  | 6          | foo | Mon Jan 17 00:00:00 1972 | 746 |  6 | 00746 | 6  | 6          | foo
 Thu Jan 27 00:00:00 1972 | 756 |  6 | 00756 | 6  | 6          | foo | Thu Jan 27 00:00:00 1972 | 756 |  6 | 00756 | 6  | 6          | foo
 Sun Feb 06 00:00:00 1972 | 766 |  6 | 00766 | 6  | 6          | foo | Sun Feb 06 00:00:00 1972 | 766 |  6 | 00766 | 6  | 6          | foo
 Wed Feb 16 00:00:00 1972 | 776 |  6 | 00776 | 6  | 6          | foo | Wed Feb 16 00:00:00 1972 | 776 |  6 | 00776 | 6  | 6          | foo
 Sat Feb 26 00:00:00 1972 | 786 |  6 | 00786 | 6  | 6          | foo | Sat Feb 26 00:00:00 1972 | 786 |  6 | 00786 | 6  | 6          | foo
 Tue Mar 07 00:00:00 1972 | 796 |  6 | 00796 | 6  | 6          | foo | Tue Mar 07 00:00:00 1972 | 796 |  6 | 00796 | 6  | 6          | foo
 Fri Mar 17 00:00:00 1972 | 806 |  6 | 00806 | 6  | 6          | foo | Fri Mar 17 00:00:00 1972 | 806 |  6 | 00806 | 6  | 6          | foo
 Mon Mar 27 00:00:00 1972 | 816 |  6 | 00816 | 6  | 6          | foo | Mon Mar 27 00:00:00 1972 | 816 |  6 | 00816 | 6  | 6          | foo
 Thu Apr 06 00:00:00 1972 | 826 |  6 | 00826 | 6  | 6          | foo | Thu Apr 06 00:00:00 1972 | 826 |  6 | 00826 | 6  | 6          | foo
 Sun Apr 16 00:00:00 1972 | 836 |  6 | 00836 | 6  | 6          | foo | Sun Apr 16 00:00:00 1972 | 836 |  6 | 00836 | 6  | 6          | foo
 Wed Apr 26 00:00:00 1972 | 846 |  6 | 00846 | 6  | 6          | foo | Wed Apr 26 00:00:00 1972 | 846 |  6 | 00846 | 6  | 6          | foo
 Sat May 06 00:00:00 1972 | 856 |  6 | 00856 | 6  | 6          | foo | Sat May 06 00:00:00 1972 | 856 |  6 | 00856 | 6  | 6          | foo
 Tue May 16 00:00:00 1972 | 866 |  6 | 00866 | 6  | 6          | foo | Tue May 16 00:00:00 1972 | 866 |  6 | 00866 | 6  | 6          | foo
 Fri May 26 00:00:00 1972 | 876 |  6 | 00876 | 6  | 6          | foo | Fri May 26 00:00:00 1972 | 876 |  6 | 00876 | 6  | 6          | foo
 Mon Jun 05 00:00:00 1972 | 886 |  6 | 00886 | 6  | 6          | foo | Mon Jun 05 00:00:00 1972 | 886 |  6 | 00886 | 6  | 6          | foo
 Thu Jun 15 00:00:00 1972 | 896 |  6 | 00896 | 6  | 6          | foo | Thu Jun 15 00:00:00 1972 | 896 |  6 | 00896 | 6  | 6          | foo
 Sun Jun 25 00:00:00 1972 | 906 |  6 | 00906 | 6  | 6          | foo | Sun Jun 25 00:00:00 1972 | 906 |  6 | 00906 | 6  | 6          | foo
 Wed Jul 05 00:00:00 1972 | 916 |  6 | 00916 | 6  | 6          | foo | Wed Jul 05 00:00:00 1972 | 916 |  6 | 00916 | 6  | 6          | foo
 Sat Jul 15 00:00:00 1972 | 926 |  6 | 00926 | 6  | 6          | foo | Sat Jul 15 00:00:00 1972 | 926 |  6 | 00926 | 6  | 6          | foo
 Tue Jul 25 00:00:00 1972 | 936 |  6 | 00936 | 6  | 6          | foo | Tue Jul 25 00:00:00 1972 | 936 |  6 | 00936 | 6  | 6          | foo
 Fri Aug 04 00:00:00 1972 | 946 |  6 | 00946 | 6  | 6          | foo | Fri Aug 04 00:00:00 1972 | 946 |  6 | 00946 | 6  | 6          | foo
 Mon Aug 14 00:00:00 1972 | 956 |  6 | 00956 | 6  | 6          | foo | Mon Aug 14 00:00:00 1972 | 956 |  6 | 00956 | 6  | 6          | foo
 Thu Aug 24 00:00:00 1972 | 966 |  6 | 00966 | 6  | 6          | foo | Thu Aug 24 00:00:00 1972 | 966 |  6 | 00966 | 6  | 6          | foo
 Sun Sep 03 00:00:00 1972 | 976 |  6 | 00976 | 6  | 6          | foo | Sun Sep 03 00:00:00 1972 | 976 |  6 | 00976 | 6  | 6          | foo
 Wed Sep 13 00:00:00 1972 | 986 |  6 | 00986 | 6  | 6          | foo | Wed Sep 13 00:00:00 1972 | 986 |  6 | 00986 | 6  | 6          | foo
 Sat Sep 23 00:00:00 1972 | 996 |  6 | 00996 | 6  | 6          | foo | Sat Sep 23 00:00:00 1972 | 996 |  6 | 00996 | 6  | 6          | foo
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
--Testcase 57:
SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
(4 rows)

--Testcase 58:
SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
(4 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
--Testcase 59:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: "time", c1, c2, c3, c6, c7, c8, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2
         Output: "time", c1, c2, c3, c6, c7, c8, random()
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(6 rows)

--Testcase 60:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: "time", c1, c2, c3, c6, c7, c8, ((c3)::text)
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2
         Output: "time", c1, c2, c3, c6, c7, c8, c3
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(6 rows)

-- user-defined operator/function
CREATE FUNCTION influxdb_fdw_abs(int) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE OPERATOR === (
    LEFTARG = int,
    RIGHTARG = int,
    PROCEDURE = int4eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
--Testcase 61:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = abs(t1.c2))
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

--Testcase 62:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 63:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   InfluxDB query: SELECT count("c3") FROM "T1" WHERE (("C1" = "c2"))
(3 rows)

--Testcase 64:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
 count 
-------
     9
(1 row)

-- by default, user-defined ones cannot
--Testcase 65:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = influxdb_fdw_abs(t1.c2);
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = influxdb_fdw_abs(t1.c2))
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

--Testcase 66:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = influxdb_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 67:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

--Testcase 68:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- ORDER BY can be shipped, though
--Testcase 69:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8
         Sort Key: t1.c2
         ->  Foreign Scan on public.ft1 t1
               Output: "time", c1, c2, c3, c6, c7, c8
               Filter: (t1.c1 === t1.c2)
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(9 rows)

--Testcase 70:
SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

-- but let's put them in an extension ...
ALTER EXTENSION influxdb_fdw ADD FUNCTION influxdb_fdw_abs(int);
ALTER EXTENSION influxdb_fdw ADD OPERATOR === (int, int);
-- ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- ... now they can be shipped
--Testcase 71:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = influxdb_fdw_abs(t1.c2);
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = influxdb_fdw_abs(t1.c2))
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

--Testcase 72:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = influxdb_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 73:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

--Testcase 74:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- and both ORDER BY and LIMIT can be shipped
--Testcase 75:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8
         Sort Key: t1.c2
         ->  Foreign Scan on public.ft1 t1
               Output: "time", c1, c2, c3, c6, c7, c8
               Filter: (t1.c1 === t1.c2)
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(9 rows)

--Testcase 76:
SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

-- ===================================================================
-- JOIN queries
-- ===================================================================
-- Analyze ft4 and ft5 so that we have better statistics. These tables do not
-- have use_remote_estimate set.
ANALYZE ft4;
WARNING:  skipping "ft4" --- cannot analyze this foreign table
ANALYZE ft5;
WARNING:  skipping "ft5" --- cannot analyze this foreign table
-- join two tables
--Testcase 77:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c1, t1.c3
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1, t1.c3
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           InfluxDB query: SELECT "C1", "c3" FROM "T1"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "C1" FROM "T1"
(20 rows)

--Testcase 78:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
--Testcase 79:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c2, t3.c3, t1.c3
               Merge Cond: (t2.c1 = t1.c1)
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
               ->  Materialize
                     Output: t1.c1, t1.c3, t3.c3, t3.c1
                     ->  Merge Join
                           Output: t1.c1, t1.c3, t3.c3, t3.c1
                           Merge Cond: (t1.c1 = t3.c1)
                           ->  Sort
                                 Output: t1.c1, t1.c3
                                 Sort Key: t1.c1
                                 ->  Foreign Scan on public.ft1 t1
                                       Output: t1.c1, t1.c3
                                       InfluxDB query: SELECT "C1", "c3" FROM "T1"
                           ->  Sort
                                 Output: t3.c3, t3.c1
                                 Sort Key: t3.c1
                                 ->  Foreign Scan on public.ft4 t3
                                       Output: t3.c3, t3.c1
                                       InfluxDB query: SELECT "c1", "c3" FROM "T3"
(31 rows)

--Testcase 80:
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
--Testcase 81:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(20 rows)

--Testcase 82:
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 |   
 24 | 24
 26 |   
 28 |   
 30 | 30
 32 |   
 34 |   
 36 | 36
 38 |   
 40 |   
(10 rows)

-- left outer join three tables
--Testcase 83:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

--Testcase 84:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
--Testcase 85:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Hash Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Hash Cond: (t1.c1 = ft5.c1)
   ->  Foreign Scan on public.ft4 t1
         Output: t1.c1, t1.c2
         InfluxDB query: SELECT "c1", "c2" FROM "T3" WHERE (("c1" < 10))
   ->  Hash
         Output: ft5.c1, ft5.c2
         ->  Foreign Scan on public.ft5
               Output: ft5.c1, ft5.c2
               InfluxDB query: SELECT "c1", "c2" FROM "T4" WHERE (("c1" < 10))
(11 rows)

--Testcase 86:
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
--Testcase 87:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Hash Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Hash Cond: (t1.c1 = ft5.c1)
   Filter: ((ft5.c1 < 10) OR (ft5.c1 IS NULL))
   ->  Foreign Scan on public.ft4 t1
         Output: t1.c1, t1.c2
         InfluxDB query: SELECT "c1", "c2" FROM "T3" WHERE (("c1" < 10))
   ->  Hash
         Output: ft5.c1, ft5.c2
         ->  Foreign Scan on public.ft5
               Output: ft5.c1, ft5.c2
               InfluxDB query: SELECT "c1", "c2" FROM "T4" WHERE (("c1" < 10))
(12 rows)

--Testcase 88:
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- right outer join
--Testcase 89:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t2.c1, t1.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t2.c1 = t1.c1)
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft5 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(20 rows)

--Testcase 90:
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
--Testcase 91:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(21 rows)

--Testcase 92:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
--Testcase 93:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(20 rows)

--Testcase 94:
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
  92 |   
  94 |   
  96 | 96
  98 |   
 100 |   
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
--Testcase 95:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft5.c1
   Sort Key: ft4.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     InfluxDB query: SELECT "c1" FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(14 rows)

--Testcase 96:
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
 50 |   
 52 |   
 54 | 54
 56 |   
 58 |   
 60 | 60
    | 51
    | 57
(8 rows)

--Testcase 97:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: 1
   ->  Merge Full Join
         Output: 1
         ->  Foreign Scan on public.ft4
               InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Materialize
               ->  Foreign Scan on public.ft5
                     InfluxDB query: SELECT * FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(9 rows)

--Testcase 98:
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
--Testcase 99:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, t2.c1, t3.c1
   Sort Key: ft4.c1, t2.c1, t3.c1
   ->  Hash Full Join
         Output: ft4.c1, t2.c1, t3.c1
         Hash Cond: (t2.c1 = ft4.c1)
         ->  Hash Right Join
               Output: t2.c1, t3.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft5 t3
                     Output: t3.c1
                     InfluxDB query: SELECT "c1" FROM "T4"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1
                     InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(22 rows)

--Testcase 100:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
--Testcase 101:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft4_1.c1, ft5.c1
   Sort Key: ft4.c1, ft4_1.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft4_1.c1, ft5.c1
         Hash Cond: (ft4_1.c1 = ft4.c1)
         ->  Hash Full Join
               Output: ft4_1.c1, ft5.c1
               Hash Cond: (ft4_1.c1 = ft5.c1)
               Filter: ((ft4_1.c1 IS NULL) OR (ft4_1.c1 IS NOT NULL))
               ->  Foreign Scan on public.ft4 ft4_1
                     Output: ft4_1.c1
                     InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
               ->  Hash
                     Output: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c1
                           InfluxDB query: SELECT "c1" FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1
                     InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(23 rows)

--Testcase 102:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
--Testcase 103:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.*, ft5.*
   ->  Sort
         Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.*, ft5.*
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop
               Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.*, ft5.*
               ->  Foreign Scan on "S 1"."T3"
                     Output: "T3".c1, "T3".*
                     InfluxDB query: SELECT "c1", "c2", "c3" FROM "T3" WHERE (("c1" = 50))
               ->  Materialize
                     Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                     ->  Merge Full Join
                           Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                           Merge Cond: (ft4.c1 = ft5.c1)
                           Filter: ((ft4.c1 IS NULL) OR (ft4.c1 IS NOT NULL))
                           ->  Sort
                                 Output: ft4.c1, ft4.*
                                 Sort Key: ft4.c1
                                 ->  Foreign Scan on public.ft4
                                       Output: ft4.c1, ft4.*
                                       InfluxDB query: SELECT "c1", "c2", "c3" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
                           ->  Sort
                                 Output: ft5.c1, ft5.*
                                 Sort Key: ft5.c1
                                 ->  Foreign Scan on public.ft5
                                       Output: ft5.c1, ft5.*
                                       InfluxDB query: SELECT "c1", "c2", "c3" FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(28 rows)

--Testcase 104:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 50 | 52 |   
 50 | 54 | 54
 50 | 56 |   
 50 | 58 |   
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
--Testcase 105:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Sort
         Output: t1.c1, t2.c1, t3.c1
         Sort Key: t1.c1, t2.c1, t3.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1, t3.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c1
                     InfluxDB query: SELECT "c1" FROM "T3"
               ->  Hash
                     Output: t1.c1, t2.c1
                     ->  Hash Join
                           Output: t1.c1, t2.c1
                           Hash Cond: ((t2.c1 + 1) = t1.c1)
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "c1" FROM "T4"
                           ->  Hash
                                 Output: t1.c1
                                 ->  Foreign Scan on public.ft4 t1
                                       Output: t1.c1
                                       InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(24 rows)

--Testcase 106:
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 |   
 58 | 57 |   
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
--Testcase 107:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

--Testcase 108:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + right outer join
--Testcase 109:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(21 rows)

--Testcase 110:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
--Testcase 111:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t1.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1"
               ->  Materialize
                     Output: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "C1" FROM "T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

--Testcase 112:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + left outer join
--Testcase 113:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

--Testcase 114:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + full outer join
--Testcase 115:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

--Testcase 116:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- right outer join + left outer join
--Testcase 117:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t3.c3
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1"
               ->  Materialize
                     Output: t3.c3, t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c3, t3.c1
                           InfluxDB query: SELECT "c1", "c3" FROM "T3"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(21 rows)

--Testcase 118:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + right outer join
--Testcase 119:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

--Testcase 120:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
--Testcase 121:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               Filter: ((t1.c1 = t2.c1) OR (t1.c1 IS NULL))
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(21 rows)

--Testcase 122:
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
--Testcase 123:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE influxdb_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t2.c1 = t1.c1)
         Filter: (influxdb_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c2, t2.c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Hash
               Output: t1.c1, t1.c3
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3
                     InfluxDB query: SELECT "C1", "c3" FROM "T1"
(14 rows)

-- skip, influxdb does not have option 'extensions'
-- ALTER SERVER influxdb_svr OPTIONS (DROP extensions);
-- full outer join + WHERE clause with shippable extensions not set
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
-- ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
--Testcase 124:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(18 rows)

--Testcase 125:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 126:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(18 rows)

--Testcase 127:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
--Testcase 128:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(18 rows)

--Testcase 129:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 130:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(18 rows)

--Testcase 131:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
--Testcase 132:
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   Output: t.c1_1, t.c2_1, t.c1_3
   CTE t
     ->  Merge Join
           Output: t1.c1, t1.c3, t2.c1
           Merge Cond: (t1.c1 = t2.c1)
           ->  Sort
                 Output: t1.c1, t1.c3
                 Sort Key: t1.c1
                 ->  Foreign Scan on public.ft1 t1
                       Output: t1.c1, t1.c3
                       InfluxDB query: SELECT "C1", "c3" FROM "T1"
           ->  Sort
                 Output: t2.c1
                 Sort Key: t2.c1
                 ->  Foreign Scan on public.ft2 t2
                       Output: t2.c1
                       InfluxDB query: SELECT "C1" FROM "T1"
   ->  Sort
         Output: t.c1_1, t.c2_1, t.c1_3
         Sort Key: t.c1_3, t.c1_1
         ->  CTE Scan on t
               Output: t.c1_1, t.c2_1, t.c1_3
(23 rows)

--Testcase 133:
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1 
------+------
  101 |  101
  102 |  102
  103 |  103
  104 |  104
  105 |  105
  106 |  106
  107 |  107
  108 |  108
  109 |  109
  110 |  110
(10 rows)

-- ctid with whole-row reference
--Testcase 134:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
   ->  Sort
         Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.*, t2.c1
                     InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
               ->  Hash
                     Output: t1.ctid, t1.*, t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.ctid, t1.*, t1.c1, t1.c3
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(16 rows)

-- SEMI JOIN, not pushed down
--Testcase 135:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Join
               Output: t1.c1
               Inner Unique: true
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t2.c1
                     ->  HashAggregate
                           Output: t2.c1
                           Group Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(20 rows)

--Testcase 136:
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
--Testcase 137:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Anti Join
               Output: t1.c1
               Hash Cond: (t1.c1 = t2.c2)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t2.c2
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2
                           InfluxDB query: SELECT "c2" FROM "T1"
(16 rows)

--Testcase 138:
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN can be pushed down
--Testcase 139:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop
               Output: t1.c1, t2.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Materialize
                     Output: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "C1" FROM "T1"
(15 rows)

--Testcase 140:
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
--Testcase 141:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                        QUERY PLAN                         
-----------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t1.c1 = t2.c1)
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft5 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "c1" FROM "T4"
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  Foreign Scan on public.ft6 t2
                     Output: t2.c1
                     InfluxDB query: SELECT "c1" FROM "T4"
(17 rows)

--Testcase 142:
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
--Testcase 143:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c8 = t2.c8)
               ->  Sort
                     Output: t1.c1, t1.c8
                     Sort Key: t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c8
                           InfluxDB query: SELECT "C1", "c8" FROM "T1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           InfluxDB query: SELECT "C1", "c8" FROM "T1"
(20 rows)

--Testcase 144:
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- unsafe conditions on one side (c8 has a UDT), not pushed down.
--Testcase 145:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Right Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           InfluxDB query: SELECT "C1", "c3" FROM "T1" WHERE (("c8" = 'foo'))
(16 rows)

--Testcase 146:
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
--Testcase 147:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c1, t1.c3
               Merge Cond: ((t1.c1 = t2.c1) AND (t1.c8 = t2.c8))
               ->  Sort
                     Output: t1.c1, t1.c3, t1.c8
                     Sort Key: t1.c1, t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3, t1.c8
                           InfluxDB query: SELECT "C1", "c3", "c8" FROM "T1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c1, t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           InfluxDB query: SELECT "C1", "c8" FROM "T1"
(20 rows)

--Testcase 148:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
--Testcase 149:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, (avg((t1.c1 + t2.c1)))
   ->  Sort
         Output: t1.c1, (avg((t1.c1 + t2.c1)))
         Sort Key: t1.c1
         ->  HashAggregate
               Output: t1.c1, avg((t1.c1 + t2.c1))
               Group Key: t1.c1
               ->  HashAggregate
                     Output: t1.c1, t2.c1
                     Group Key: t1.c1, t2.c1
                     ->  Append
                           ->  Merge Join
                                 Output: t1.c1, t2.c1
                                 Merge Cond: (t1.c1 = t2.c1)
                                 ->  Sort
                                       Output: t1.c1
                                       Sort Key: t1.c1
                                       ->  Foreign Scan on public.ft1 t1
                                             Output: t1.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
                                 ->  Sort
                                       Output: t2.c1
                                       Sort Key: t2.c1
                                       ->  Foreign Scan on public.ft2 t2
                                             Output: t2.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
                           ->  Merge Join
                                 Output: t1_1.c1, t2_1.c1
                                 Merge Cond: (t1_1.c1 = t2_1.c1)
                                 ->  Sort
                                       Output: t1_1.c1
                                       Sort Key: t1_1.c1
                                       ->  Foreign Scan on public.ft1 t1_1
                                             Output: t1_1.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
                                 ->  Sort
                                       Output: t2_1.c1
                                       Sort Key: t2_1.c1
                                       ->  Foreign Scan on public.ft2 t2_1
                                             Output: t2_1.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
(42 rows)

--Testcase 150:
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
--Testcase 151:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C1" FROM "S 1"."T1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C1" OFFSET 10 LIMIT 10;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C1"
   ->  Sort
         Output: t1."C1"
         Sort Key: t1."C1"
         ->  Nested Loop
               Output: t1."C1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C1", t1.c2
                     InfluxDB query: SELECT "C1", "c2" FROM "T1"
               ->  Unique
                     Output: t2.c1, t3.c1
                     ->  Sort
                           Output: t2.c1, t3.c1
                           Sort Key: t2.c1
                           ->  Hash Join
                                 Output: t2.c1, t3.c1
                                 Hash Cond: (t3.c1 = t2.c1)
                                 ->  Foreign Scan on public.ft2 t3
                                       Output: t3.c1
                                       InfluxDB query: SELECT "C1" FROM "T1"
                                 ->  Hash
                                       Output: t2.c1
                                       ->  Foreign Scan on public.ft1 t2
                                             Output: t2.c1
                                             InfluxDB query: SELECT "C1" FROM "T1" WHERE (("c2" = $1))
(26 rows)

--Testcase 152:
SELECT t1."C1" FROM "S 1"."T1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C1" OFFSET 10 LIMIT 10;
 C1 
----
  1
  1
  1
  1
  1
  1
  1
  1
  1
  1
(10 rows)

-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
--Testcase 153:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ft2.c1
   Join Filter: (13 = ft2.c1)
   ->  Foreign Scan on public.ft2
         Output: ft2.c1
         InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" >= 10)) AND (("C1" <= 15))
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1
               Output: 13
               InfluxDB query: SELECT * FROM "T1" WHERE (("C1" = 13))
(11 rows)

--Testcase 154:
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
 a  | c1 
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
--Testcase 155:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Hash Right Join
   Output: ft4.c1, (13), ft1.c1, ft2.c1
   Hash Cond: (ft1.c1 = ft4.c1)
   ->  Nested Loop
         Output: ft1.c1, ft2.c1, 13
         ->  Foreign Scan on public.ft1
               Output: ft1.c1
               InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" = 12))
         ->  Materialize
               Output: ft2.c1
               ->  Foreign Scan on public.ft2
                     Output: ft2.c1
                     InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" = 12))
   ->  Hash
         Output: ft4.c1
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 10)) AND (("c1" <= 15))
(18 rows)

--Testcase 156:
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
 c1 | a  | b  | c  
----+----+----+----
 12 | 13 | 12 | 12
 10 |    |    |   
 14 |    |    |   
(3 rows)

-- join with nullable side with some columns with null values
-- UPDATE ft5 SET c3 = null where c1 % 9 = 0;
--Testcase 157:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
   Sort Key: ft5.c1
   ->  Hash Join
         Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
         Hash Cond: (ft5.c1 = ft4.c1)
         ->  Foreign Scan on public.ft5
               Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
               InfluxDB query: SELECT "c1", "c2", "c3" FROM "T4"
         ->  Hash
               Output: ft4.c1, ft4.c2
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2
                     InfluxDB query: SELECT "c1", "c2" FROM "T3" WHERE (("c1" >= 10)) AND (("c1" <= 30))
(14 rows)

--Testcase 158:
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
      ft5       | c1 | c2 |   c3   | c1 | c2 
----------------+----+----+--------+----+----
 (12,13,AAA012) | 12 | 13 | AAA012 | 12 | 13
 (18,19,AAA018) | 18 | 19 | AAA018 | 18 | 19
 (24,25,AAA024) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
CREATE TABLE local_tbl (c1 int NOT NULL, c2 int NOT NULL, c3 text, CONSTRAINT local_tbl_pkey PRIMARY KEY (c1));
--Testcase 159:
INSERT INTO local_tbl SELECT id, id % 10, to_char(id, 'FM0000') FROM generate_series(1, 1000) id;
ANALYZE local_tbl;
SET enable_nestloop TO false;
SET enable_hashjoin TO false;
--Testcase 160:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft4.c1, ft4.c2, ft4.c3, ft5.c1, ft5.c2, ft5.c3, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.ctid
   ->  Merge Join
         Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft4.c1, ft4.c2, ft4.c3, ft5.c1, ft5.c2, ft5.c3, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.ctid
         Merge Cond: (ft1.c2 = ft5.c1)
         ->  Merge Join
               Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*, ft4.c1, ft4.c2, ft4.c3, ft4.*, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
               Merge Cond: (ft1.c2 = ft4.c1)
               ->  Merge Join
                     Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                     Merge Cond: (local_tbl.c1 = ft1.c2)
                     ->  Index Scan using local_tbl_pkey on public.local_tbl
                           Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                     ->  Sort
                           Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*
                           Sort Key: ft1.c2
                           ->  Merge Join
                                 Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*
                                 Merge Cond: (ft1.c1 = ft2.c1)
                                 ->  Sort
                                       Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*
                                       Sort Key: ft1.c1
                                       ->  Foreign Scan on public.ft1
                                             Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*
                                             InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" < 100))
                                 ->  Sort
                                       Output: ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*
                                       Sort Key: ft2.c1
                                       ->  Foreign Scan on public.ft2
                                             Output: ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*
                                             InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" < 100))
               ->  Sort
                     Output: ft4.c1, ft4.c2, ft4.c3, ft4.*
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1, ft4.c2, ft4.c3, ft4.*
                           InfluxDB query: SELECT "c1", "c2", "c3" FROM "T3"
         ->  Sort
               Output: ft5.c1, ft5.c2, ft5.c3, ft5.*
               Sort Key: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1, ft5.c2, ft5.c3, ft5.*
                     InfluxDB query: SELECT "c1", "c2", "c3" FROM "T4"
(43 rows)

--Testcase 161:
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  |           time           | c1 | c2 |  c3   | c6 |     c7     | c8  | c1 | c2 |   c3   | c1 | c2 |   c3   | c1 | c2 |  c3  
--------------------------+----+----+-------+----+------------+-----+--------------------------+----+----+-------+----+------------+-----+----+----+--------+----+----+--------+----+----+------
 Tue Apr 07 00:00:00 1970 | 96 |  6 | 00096 | 6  | 6          | foo | Tue Apr 07 00:00:00 1970 | 96 |  6 | 00096 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Mon Feb 16 00:00:00 1970 | 46 |  6 | 00046 | 6  | 6          | foo | Mon Feb 16 00:00:00 1970 | 46 |  6 | 00046 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Tue Jan 27 00:00:00 1970 | 26 |  6 | 00026 | 6  | 6          | foo | Tue Jan 27 00:00:00 1970 | 26 |  6 | 00026 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Thu Feb 26 00:00:00 1970 | 56 |  6 | 00056 | 6  | 6          | foo | Thu Feb 26 00:00:00 1970 | 56 |  6 | 00056 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Sun Mar 08 00:00:00 1970 | 66 |  6 | 00066 | 6  | 6          | foo | Sun Mar 08 00:00:00 1970 | 66 |  6 | 00066 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Sat Jan 17 00:00:00 1970 | 16 |  6 | 00016 | 6  | 6          | foo | Sat Jan 17 00:00:00 1970 | 16 |  6 | 00016 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Wed Mar 18 00:00:00 1970 | 76 |  6 | 00076 | 6  | 6          | foo | Wed Mar 18 00:00:00 1970 | 76 |  6 | 00076 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Sat Mar 28 00:00:00 1970 | 86 |  6 | 00086 | 6  | 6          | foo | Sat Mar 28 00:00:00 1970 | 86 |  6 | 00086 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo | Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
 Fri Feb 06 00:00:00 1970 | 36 |  6 | 00036 | 6  | 6          | foo | Fri Feb 06 00:00:00 1970 | 36 |  6 | 00036 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006 |  6 |  6 | 0006
(10 rows)

RESET enable_nestloop;
RESET enable_hashjoin;
DROP TABLE local_tbl;
-- check join pushdown in situations where multiple userids are involved
CREATE ROLE regress_view_owner SUPERUSER;
CREATE USER MAPPING FOR regress_view_owner SERVER influxdb_svr OPTIONS (user 'user', password 'pass');
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
CREATE VIEW v4 AS SELECT * FROM ft4;
CREATE VIEW v5 AS SELECT * FROM ft5;
ALTER VIEW v5 OWNER TO regress_view_owner;
--Testcase 162:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Merge Right Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft5.c1 = ft4.c1)
               ->  Sort
                     Output: ft5.c2, ft5.c1
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           InfluxDB query: SELECT "c1", "c2" FROM "T4"
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
(20 rows)

--Testcase 163:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
--Testcase 164:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Merge Right Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft5.c1 = ft4.c1)
               ->  Sort
                     Output: ft5.c2, ft5.c1
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           InfluxDB query: SELECT "c1", "c2" FROM "T4"
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
(20 rows)

--Testcase 165:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 166:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Merge Right Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (t2.c1 = ft4.c1)
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "c1", "c2" FROM "T4"
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
(20 rows)

--Testcase 167:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO CURRENT_USER;
--Testcase 168:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Merge Right Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (t2.c1 = ft4.c1)
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "c1", "c2" FROM "T4"
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
(20 rows)

--Testcase 169:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
DROP OWNED BY regress_view_owner;
DROP ROLE regress_view_owner;
-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
--Testcase 170:
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
   ->  Sort
         Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
         Sort Key: (count(ft1.c6)), (sum(ft1.c1))
         ->  HashAggregate
               Output: count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), c2
               Group Key: ft1.c2
               ->  Foreign Scan on public.ft1
                     Output: c2, c6, c1
                     InfluxDB query: SELECT "C1", "c2", "c6" FROM "T1" WHERE (("c2" < 5))
(11 rows)

--Testcase 171:
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
 count |  sum  |         avg          | min | max  | stddev | sum2  
-------+-------+----------------------+-----+------+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 |  991 |      0 | 49600
   100 | 49700 | 497.0000000000000000 |   2 |  992 |      0 | 49700
   100 | 49800 | 498.0000000000000000 |   3 |  993 |      0 | 49800
   100 | 49900 | 499.0000000000000000 |   4 |  994 |      0 | 49900
   100 | 50500 | 505.0000000000000000 |   0 | 1000 |      0 | 50500
(5 rows)

--Testcase 172:
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), (((sum(c1)) * ((random() <= '1'::double precision))::integer)), c2
   ->  Result
         Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
         ->  Sort
               Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
               Sort Key: (count(ft1.c6)), (sum(ft1.c1))
               ->  HashAggregate
                     Output: count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), c2
                     Group Key: ft1.c2
                     ->  Foreign Scan on public.ft1
                           Output: c2, c6, c1
                           InfluxDB query: SELECT "C1", "c2", "c6" FROM "T1" WHERE (("c2" < 5))
(13 rows)

--Testcase 173:
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
 count |  sum  |         avg          | min | max | stddev | sum2  
-------+-------+----------------------+-----+-----+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 | 991 |      0 | 49600
(1 row)

-- Aggregate is not pushed down as aggregation contains random()
--Testcase 174:
explain (verbose, costs off)
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate
   Output: sum((c1 * ((random() <= '1'::double precision))::integer)), avg(c1)
   ->  Foreign Scan on public.ft1
         Output: c1
         InfluxDB query: SELECT "C1" FROM "T1"
(5 rows)

-- Aggregate over join query
--Testcase 175:
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(t1.c1), avg(t2.c1)
   ->  Nested Loop
         Output: t1.c1, t2.c1
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" = 6))
         ->  Materialize
               Output: t2.c1, t2.c2
               ->  Foreign Scan on public.ft1 t2
                     Output: t2.c1, t2.c2
                     InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" = 6))
(12 rows)

--Testcase 176:
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
 count |   sum   |         avg          
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
--Testcase 177:
explain (verbose, costs off)
select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(t1.c1), count(t2.c1)
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t1.c1 = t2.c1)
         Join Filter: (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::double precision * random()) <= '1'::double precision)
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(18 rows)

-- GROUP BY clause having expressions
--Testcase 178:
explain (verbose, costs off)
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Output: ((c2 / 2)), ((sum(c2) * ((c2 / 2))))
   Sort Key: ((ft1.c2 / 2))
   ->  HashAggregate
         Output: ((c2 / 2)), (sum(c2) * ((c2 / 2)))
         Group Key: (ft1.c2 / 2)
         ->  Foreign Scan on public.ft1
               Output: (c2 / 2), c2
               InfluxDB query: SELECT "c2" FROM "T1"
(9 rows)

--Testcase 179:
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
 ?column? | ?column? 
----------+----------
        0 |        0
        1 |      500
        2 |     1800
        3 |     3900
        4 |     6800
(5 rows)

-- Aggregates in subquery are pushed down.
--Testcase 180:
explain (verbose, costs off)
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate
   Output: count(ft1.c2), sum(ft1.c2)
   ->  Sort
         Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
         Sort Key: ft1.c2, (sum(ft1.c1))
         ->  HashAggregate
               Output: ft1.c2, sum(ft1.c1), (sqrt((ft1.c1)::double precision))
               Group Key: ft1.c2, sqrt((ft1.c1)::double precision)
               ->  Foreign Scan on public.ft1
                     Output: ft1.c2, sqrt((ft1.c1)::double precision), ft1.c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1"
(11 rows)

--Testcase 181:
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
 count | sum  
-------+------
  1000 | 4500
(1 row)

-- Aggregate is still pushed down by taking unshippable expression out
--Testcase 182:
explain (verbose, costs off)
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer)), ((sum(c1) * c2)), c2
   Sort Key: ((ft1.c2 * ((random() <= '1'::double precision))::integer)), ((sum(ft1.c1) * ft1.c2))
   ->  HashAggregate
         Output: (c2 * ((random() <= '1'::double precision))::integer), (sum(c1) * c2), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

--Testcase 183:
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
 sum1 |  sum2  
------+--------
    0 |      0
    1 |  49600
    2 |  99400
    3 | 149400
    4 | 199600
    5 | 250000
    6 | 300600
    7 | 351400
    8 | 402400
    9 | 453600
(10 rows)

-- Aggregate with unshippable GROUP BY clause are not pushed
--Testcase 184:
explain (verbose, costs off)
select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer))
   Sort Key: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   ->  HashAggregate
         Output: ((c2 * ((random() <= '1'::double precision))::integer))
         Group Key: (ft2.c2 * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan on public.ft2
               Output: (c2 * ((random() <= '1'::double precision))::integer)
               InfluxDB query: SELECT "c2" FROM "T1"
(9 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
--Testcase 185:
explain (verbose, costs off)
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Output: (count(c2)), c2, 5, 7.0, 9
   Sort Key: ft1.c2
   ->  HashAggregate
         Output: count(c2), c2, (5), 7.0, (9)
         Group Key: ft1.c2, 5, 9
         ->  Foreign Scan on public.ft1
               Output: c2, 5, 9
               InfluxDB query: SELECT "c2" FROM "T1"
(9 rows)

--Testcase 186:
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
  w  | x | y |  z  
-----+---+---+-----
 100 | 0 | 5 | 7.0
 100 | 1 | 5 | 7.0
 100 | 2 | 5 | 7.0
 100 | 3 | 5 | 7.0
 100 | 4 | 5 | 7.0
 100 | 5 | 5 | 7.0
 100 | 6 | 5 | 7.0
 100 | 7 | 5 | 7.0
 100 | 8 | 5 | 7.0
 100 | 9 | 5 | 7.0
(10 rows)

-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
--Testcase 187:
explain (verbose, costs off)
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: c2, c2, (sum(c1))
   Sort Key: (sum(ft1.c1))
   ->  HashAggregate
         Output: c2, c2, sum(c1)
         Group Key: ft1.c2, ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" > 6))
(9 rows)

--Testcase 188:
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
 c2 | c2 
----+----
  7 |  7
  8 |  8
  9 |  9
(3 rows)

-- Testing HAVING clause shippability
--Testcase 189:
explain (verbose, costs off)
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft2.c2
   ->  HashAggregate
         Output: c2, sum(c1)
         Group Key: ft2.c2
         Filter: ((avg(ft2.c1) < '500'::numeric) AND (sum(ft2.c1) < 49800))
         ->  Foreign Scan on public.ft2
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(10 rows)

--Testcase 190:
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
 c2 |  sum  
----+-------
  1 | 49600
  2 | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
--Testcase 191:
explain (verbose, costs off)
select count(*) from (select time, count(c1) from ft1 group by time, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  HashAggregate
         Output: ft1."time", NULL::bigint, (sqrt((ft1.c2)::double precision))
         Group Key: ft1."time", sqrt((ft1.c2)::double precision)
         Filter: ((avg(ft1.c1) < '500'::numeric) AND ((((avg(ft1.c1) / avg(ft1.c1)))::double precision * random()) <= '1'::double precision))
         ->  Foreign Scan on public.ft1
               Output: ft1."time", sqrt((ft1.c2)::double precision), ft1.c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

--Testcase 192:
select count(*) from (select time, count(c1) from ft1 group by time, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
 count 
-------
   499
(1 row)

-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
--Testcase 193:
explain (verbose, costs off)
select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1)), c2
   Sort Key: (sum(ft1.c1))
   ->  HashAggregate
         Output: sum(c1), c2
         Group Key: ft1.c2
         Filter: (avg((ft1.c1 * ((random() <= '1'::double precision))::integer)) > '100'::numeric)
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(10 rows)

-- Remote aggregate in combination with a local Param (for the output
-- of an initplan) can be trouble, per bug #15781
--Testcase 194:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1;
                  QUERY PLAN                  
----------------------------------------------
 Foreign Scan
   Output: $0, (sum(ft1.c1))
   InfluxDB query: SELECT sum("C1") FROM "T1"
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
(5 rows)

--Testcase 195:
select exists(select 1 from pg_enum), sum(c1) from ft1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

--Testcase 196:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: ($0), sum(ft1.c1)
   Group Key: $0
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan on public.ft1
         Output: $0, ft1.c1
         InfluxDB query: SELECT "C1" FROM "T1"
(8 rows)

--Testcase 197:
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
--Testcase 198:
explain (verbose, costs off)
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(c1 ORDER BY c1)), c2
   Sort Key: (array_agg(ft1.c1 ORDER BY ft1.c1))
   ->  GroupAggregate
         Output: array_agg(c1 ORDER BY c1), c2
         Group Key: ft1.c2
         ->  Sort
               Output: c2, c1
               Sort Key: ft1.c2
               ->  Foreign Scan on public.ft1
                     Output: c2, c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 100))
(12 rows)

--Testcase 199:
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
           array_agg            
--------------------------------
 {1,11,21,31,41,51,61,71,81,91}
 {2,12,22,32,42,52,62,72,82,92}
 {3,13,23,33,43,53,63,73,83,93}
 {4,14,24,34,44,54,64,74,84,94}
 {5,15,25,35,45,55,65,75,85,95}
 {6,16,26,36,46,56,66,76,86,96}
 {7,17,27,37,47,57,67,77,87,97}
 {8,18,28,38,48,58,68,78,88,98}
 {9,19,29,39,49,59,69,79,89,99}
 {10,20,30,40,50,60,70,80,90}
(10 rows)

-- ORDER BY within aggregate, different column used to order also using DESC
--Testcase 200:
explain (verbose, costs off)
select array_agg(time order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Aggregate
   Output: array_agg("time" ORDER BY c1 DESC)
   ->  Foreign Scan on public.ft2
         Output: "time", c1
         InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" < 50)) AND (("c2" = 6))
(5 rows)

--Testcase 201:
select array_agg(time order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                array_agg                                                                 
------------------------------------------------------------------------------------------------------------------------------------------
 {"Mon Feb 16 00:00:00 1970","Fri Feb 06 00:00:00 1970","Tue Jan 27 00:00:00 1970","Sat Jan 17 00:00:00 1970","Wed Jan 07 00:00:00 1970"}
(1 row)

-- DISTINCT within aggregate
--Testcase 202:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 InfluxDB query: SELECT "c1" FROM "T3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "c1" FROM "T4"
(25 rows)

--Testcase 203:
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
--Testcase 204:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 InfluxDB query: SELECT "c1" FROM "T3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "c1" FROM "T4"
(25 rows)

--Testcase 205:
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

--Testcase 206:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST)), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 InfluxDB query: SELECT "c1" FROM "T3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "c1" FROM "T4"
(25 rows)

--Testcase 207:
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
--Testcase 208:
explain (verbose, costs off)
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5)))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5))))
   ->  HashAggregate
         Output: sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5))), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

--Testcase 209:
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
 sum 
-----
 510
 520
 530
 540
    
    
    
    
    
    
(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
--Testcase 210:
explain (verbose, costs off)
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((c1 % 3)), sum(DISTINCT (c1 % 3) ORDER BY (c1 % 3)) FILTER (WHERE ((c1 % 3) < 2)), c2
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" = 6))
(6 rows)

--Testcase 211:
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
 sum | sum | c2 
-----+-----+----
  99 |   1 |  6
(1 row)

-- Outer query is aggregation query
--Testcase 212:
explain (verbose, costs off)
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Aggregate
               Output: (SubPlan 1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE ((("c2" % 6) = 0))
               SubPlan 1
                 ->  Foreign Scan on public.ft1 t1
                       Output: count(*) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10)))
                       InfluxDB query: SELECT * FROM "T1" WHERE (("C1" = 6))
(14 rows)

--Testcase 213:
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     1
(1 row)

-- Inner query is aggregation query
--Testcase 214:
explain (verbose, costs off)
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Foreign Scan on public.ft2 t2
               Output: (SubPlan 1)
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE ((("c2" % 6) = 0))
               SubPlan 1
                 ->  Aggregate
                       Output: count(t1.c1) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10)))
                       ->  Foreign Scan on public.ft1 t1
                             Output: t1.c1
                             InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" = 6))
(14 rows)

--Testcase 215:
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     0
     1
(2 rows)

-- Aggregate not pushed down as FILTER condition is not pushable
--Testcase 216:
explain (verbose, costs off)
select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)))
   ->  HashAggregate
         Output: sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision)), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

--Testcase 217:
explain (verbose, costs off)
select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Aggregate
   Output: sum(ft1.c2) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1
         Output: ft1.c2
         InfluxDB query: SELECT "c2" FROM "T1"
   SubPlan 1
     ->  Foreign Scan on public.ft1 ft1_1
           Output: ft1_1.c2
           InfluxDB query: SELECT "c2" FROM "T1" WHERE (("c2" < 5))
(9 rows)

-- Ordered-sets within aggregate
--Testcase 218:
explain (verbose, costs off)
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, rank('10'::character varying) WITHIN GROUP (ORDER BY c6), percentile_cont((((c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((c1)::double precision))
   Group Key: ft1.c2
   Filter: (percentile_cont((((ft1.c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((ft1.c1)::double precision)) < '500'::double precision)
   ->  Sort
         Output: c2, c6, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               InfluxDB query: SELECT "C1", "c2", "c6" FROM "T1" WHERE (("c2" < 10))
(10 rows)

--Testcase 219:
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
 c2 | rank | percentile_cont 
----+------+-----------------
  0 |  101 |              10
  1 |  101 |             100
  2 |    1 |             200
  3 |    1 |             300
  4 |    1 |             400
(5 rows)

-- Using multiple arguments within aggregates
--Testcase 220:
explain (verbose, costs off)
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 GroupAggregate
   Output: c1, rank(c1, c2) WITHIN GROUP (ORDER BY c1, c2), c2
   Group Key: ft1.c1, ft1.c2
   ->  Sort
         Output: c1, c2
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" = 6))
(9 rows)

--Testcase 221:
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
 c1 | rank 
----+------
  6 |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
create function least_accum1(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
create aggregate least_agg1(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum1
);
-- Disable hash aggregation for plan stability.
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
--Testcase 222:
explain (verbose, costs off)
select c2, least_agg1(c1) from ft1 group by c2 order by c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg1(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

-- Add function and aggregate into extension
alter extension influxdb_fdw add function least_accum1(anyelement, variadic anyarray);
alter extension influxdb_fdw add aggregate least_agg1(variadic items anyarray);
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
--Testcase 223:
explain (verbose, costs off)
select c2, least_agg1(c1) from ft1 where c2 < 100 group by c2 order by c2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg1(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 100))
(9 rows)

--Testcase 224:
select c2, least_agg1(c1) from ft1 where c2 < 100 group by c2 order by c2;
 c2 | least_agg1 
----+------------
  0 |         10
  1 |          1
  2 |          2
  3 |          3
  4 |          4
  5 |          5
  6 |          6
  7 |          7
  8 |          8
  9 |          9
(10 rows)

-- Remove function and aggregate from extension
alter extension influxdb_fdw drop function least_accum1(anyelement, variadic anyarray);
alter extension influxdb_fdw drop aggregate least_agg1(variadic items anyarray);
-- Not pushed down as we have dropped objects from extension.
--Testcase 225:
explain (verbose, costs off)
select c2, least_agg1(c1) from ft1 group by c2 order by c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg1(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

-- Cleanup
reset enable_hashagg;
drop aggregate least_agg1(variadic items anyarray);
drop function least_accum1(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
create operator public.<^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4eq
);
create operator public.=^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4lt
);
create operator public.>^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4gt
);
create operator family my_op_family using btree;
create function my_op_cmp(a int, b int) returns int as
  $$begin return btint4cmp(a, b); end $$ language plpgsql;
create operator class my_op_class for type int using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(int, int);
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
--Testcase 226:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c2, c1
         InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 100)) AND (("c2" = 6))
(6 rows)

-- Update local stats on ft2
ANALYZE ft2;
WARNING:  skipping "ft2" --- cannot analyze this foreign table
-- Add into extension
alter extension influxdb_fdw add operator class my_op_class using btree;
alter extension influxdb_fdw add function my_op_cmp(a int, b int);
alter extension influxdb_fdw add operator family my_op_family using btree;
alter extension influxdb_fdw add operator public.<^(int, int);
alter extension influxdb_fdw add operator public.=^(int, int);
alter extension influxdb_fdw add operator public.>^(int, int);
-- Now this will be pushed as sort operator is part of the extension.
--Testcase 227:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c2, c1
         InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 100)) AND (("c2" = 6))
(6 rows)

--Testcase 228:
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
           array_agg            
--------------------------------
 {6,16,26,36,46,56,66,76,86,96}
(1 row)

-- Remove from extension
alter extension influxdb_fdw drop operator class my_op_class using btree;
alter extension influxdb_fdw drop function my_op_cmp(a int, b int);
alter extension influxdb_fdw drop operator family my_op_family using btree;
alter extension influxdb_fdw drop operator public.<^(int, int);
alter extension influxdb_fdw drop operator public.=^(int, int);
alter extension influxdb_fdw drop operator public.>^(int, int);
-- This will not be pushed as sort operator is now removed from the extension.
--Testcase 229:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c2, c1
         InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 100)) AND (("c2" = 6))
(6 rows)

-- Cleanup
drop operator class my_op_class using btree;
drop function my_op_cmp(a int, b int);
drop operator family my_op_family using btree;
drop operator public.>^(int, int);
drop operator public.=^(int, int);
drop operator public.<^(int, int);
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
--Testcase 230:
explain (verbose, costs off)
select count(t1.c3) from ft2 t1 left join ft2 t2 on (t1.c1 = random() * t2.c2);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Nested Loop Left Join
         Output: t1.c3
         Join Filter: ((t1.c1)::double precision = (random() * (t2.c2)::double precision))
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c3, t1.c1
               InfluxDB query: SELECT "C1", "c3" FROM "T1"
         ->  Materialize
               Output: t2.c2
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2
                     InfluxDB query: SELECT "c2" FROM "T1"
(13 rows)

-- Subquery in FROM clause having aggregate
--Testcase 231:
explain (verbose, costs off)
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort
   Output: (count(*)), x.b
   Sort Key: (count(*)), x.b
   ->  HashAggregate
         Output: count(*), x.b
         Group Key: x.b
         ->  Hash Join
               Output: x.b
               Inner Unique: true
               Hash Cond: (ft1.c2 = x.a)
               ->  Foreign Scan on public.ft1
                     Output: ft1.c2
                     InfluxDB query: SELECT "c2" FROM "T1"
               ->  Hash
                     Output: x.b, x.a
                     ->  Subquery Scan on x
                           Output: x.b, x.a
                           ->  HashAggregate
                                 Output: ft1_1.c2, sum(ft1_1.c1)
                                 Group Key: ft1_1.c2
                                 ->  Foreign Scan on public.ft1 ft1_1
                                       Output: ft1_1.c2, ft1_1.c1
                                       InfluxDB query: SELECT "C1", "c2" FROM "T1"
(23 rows)

--Testcase 232:
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
 count |   b   
-------+-------
   100 | 49600
   100 | 49700
   100 | 49800
   100 | 49900
   100 | 50000
   100 | 50100
   100 | 50200
   100 | 50300
   100 | 50400
   100 | 50500
(10 rows)

-- FULL join with IS NULL check in HAVING
--Testcase 233:
explain (verbose, costs off)
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort
   Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
   Sort Key: (avg(t1.c1)), (sum(t2.c1))
   ->  HashAggregate
         Output: avg(t1.c1), sum(t2.c1), t2.c1
         Group Key: t2.c1
         Filter: (((avg(t1.c1) IS NULL) AND (sum(t2.c1) < 10)) OR (sum(t2.c1) IS NULL))
         ->  Merge Full Join
               Output: t2.c1, t1.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(22 rows)

--Testcase 234:
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
         avg         | sum 
---------------------+-----
 51.0000000000000000 |    
                     |   3
                     |   9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
--Testcase 235:
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(ft4.c1), avg(ft5.c1)
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     InfluxDB query: SELECT "c1" FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(13 rows)

--Testcase 236:
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
 count | sum |         avg         
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
--Testcase 237:
explain (verbose, costs off)
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: (((sum(c2)) * ((random() <= '1'::double precision))::integer))
   Sort Key: (((sum(ft1.c2)) * ((random() <= '1'::double precision))::integer))
   ->  Foreign Scan
         Output: ((sum(c2)) * ((random() <= '1'::double precision))::integer)
         InfluxDB query: SELECT sum("c2") FROM "T1"
(6 rows)

--Testcase 238:
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
 sum  
------
 4500
(1 row)

-- LATERAL join, with parameterization
set enable_hashagg to false;
--Testcase 239:
explain (verbose, costs off)
select c2, sum from "S 1"."T1" t1, lateral (select sum(t2.c1 + t1."C1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C1" < 100 order by 1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c2, qry.sum
   Sort Key: t1.c2
   ->  Nested Loop
         Output: t1.c2, qry.sum
         ->  Foreign Scan on "S 1"."T1" t1
               Output: t1.c2, t1."C1"
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 3)) AND (("C1" < 100))
         ->  Subquery Scan on qry
               Output: qry.sum, t2.c1
               Filter: (((t1.c2 * 2))::numeric = qry.sum)
               ->  GroupAggregate
                     Output: sum((t2.c1 + t1."C1")), t2.c1
                     Group Key: t2.c1
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(20 rows)

--Testcase 240:
select c2, sum from "S 1"."T1" t1, lateral (select sum(t2.c1 + t1."C1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C1" < 100 order by 1;
 c2 | sum 
----+-----
  1 |   2
  2 |   4
(2 rows)

reset enable_hashagg;
-- bug #15613: bad plan for foreign table scan with lateral reference
--Testcase 241:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T1" AS ref_0,
    LATERAL (
        SELECT ref_0."C1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C1";
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: ref_0.c2, ref_0."C1", (ref_0.c2), ref_1.c3, ref_0."C1"
   Sort Key: ref_0."C1"
   ->  Nested Loop
         Output: ref_0.c2, ref_0."C1", (ref_0.c2), ref_1.c3, ref_0."C1"
         ->  Nested Loop
               Output: ref_0.c2, ref_0."C1", ref_1.c3, (ref_0.c2)
               ->  Foreign Scan on "S 1"."T1" ref_0
                     Output: ref_0.c2, ref_0."C1"
                     InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 10))
               ->  Foreign Scan on public.ft1 ref_1
                     Output: ref_1.c3, ref_0.c2
                     InfluxDB query: SELECT "c3" FROM "T1" WHERE (("c3" = '00001'))
         ->  Materialize
               Output: ref_3.c3
               ->  Foreign Scan on public.ft2 ref_3
                     Output: ref_3.c3
                     InfluxDB query: SELECT "c3" FROM "T1" WHERE (("c3" = '00001'))
(18 rows)

--Testcase 242:
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T1" AS ref_0,
    LATERAL (
        SELECT ref_0."C1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C1";
 c2 | c1 | c2 |  c3   
----+----+----+-------
  1 |  1 |  1 | 00001
  2 |  2 |  2 | 00001
  3 |  3 |  3 | 00001
  4 |  4 |  4 | 00001
  5 |  5 |  5 | 00001
  6 |  6 |  6 | 00001
  7 |  7 |  7 | 00001
  8 |  8 |  8 | 00001
  9 |  9 |  9 | 00001
(9 rows)

-- Check with placeHolderVars
--Testcase 243:
explain (verbose, costs off)
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Aggregate
   Output: sum(q.a), count(q.b)
   ->  Nested Loop Left Join
         Output: q.a, q.b
         Inner Unique: true
         Join Filter: ((ft4.c1)::numeric <= q.b)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               InfluxDB query: SELECT "c1" FROM "T3"
         ->  Materialize
               Output: q.a, q.b
               ->  Subquery Scan on q
                     Output: q.a, q.b
                     ->  Aggregate
                           Output: 13, avg(ft1.c1), NULL::bigint
                           ->  Merge Left Join
                                 Output: ft1.c1
                                 Merge Cond: (ft2.c1 = ft1.c1)
                                 ->  Sort
                                       Output: ft2.c1
                                       Sort Key: ft2.c1
                                       ->  Foreign Scan on public.ft2
                                             Output: ft2.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
                                 ->  Sort
                                       Output: ft1.c1
                                       Sort Key: ft1.c1
                                       ->  Foreign Scan on public.ft1
                                             Output: ft1.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
(30 rows)

--Testcase 244:
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
 sum | count 
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
--Testcase 245:
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 3))
(10 rows)

--Testcase 246:
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 247:
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 3))
(10 rows)

--Testcase 248:
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 249:
explain (verbose, costs off)
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort
   Output: c2, c6, (sum(c1))
   Sort Key: ft1.c2, ft1.c6
   ->  HashAggregate
         Output: c2, c6, sum(c1)
         Hash Key: ft1.c2
         Hash Key: ft1.c6
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               InfluxDB query: SELECT "C1", "c2", "c6" FROM "T1" WHERE (("c2" < 3))
(10 rows)

--Testcase 250:
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum  
----+----+-------
  0 |    | 50500
  1 |    | 49600
  2 |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

--Testcase 251:
explain (verbose, costs off)
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1)), (GROUPING(c2))
   Sort Key: ft1.c2
   ->  HashAggregate
         Output: c2, sum(c1), GROUPING(c2)
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 3))
(9 rows)

--Testcase 252:
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
 c2 |  sum  | grouping 
----+-------+----------
  0 | 50500 |        0
  1 | 49600 |        0
  2 | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
--Testcase 253:
explain (verbose, costs off)
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Unique
   Output: ((sum(c1) / 1000)), c2
   ->  Sort
         Output: ((sum(c1) / 1000)), c2
         Sort Key: ((sum(ft2.c1) / 1000))
         ->  HashAggregate
               Output: (sum(c1) / 1000), c2
               Group Key: ft2.c2
               ->  Foreign Scan on public.ft2
                     Output: c2, c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 6))
(11 rows)

--Testcase 254:
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
 s  
----
 49
 50
(2 rows)

-- WindowAgg
--Testcase 255:
explain (verbose, costs off)
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c2)), (count(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft2.c2
   ->  WindowAgg
         Output: c2, (sum(c2)), count(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2)), (sum(c2))
               Sort Key: ((ft2.c2 % 2))
               ->  HashAggregate
                     Output: c2, (c2 % 2), sum(c2)
                     Group Key: ft2.c2
                     ->  Foreign Scan on public.ft2
                           Output: c2
                           InfluxDB query: SELECT "c2" FROM "T1" WHERE (("c2" < 10))
(14 rows)

--Testcase 256:
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
 c2 | sum | count 
----+-----+-------
  0 |   0 |     5
  1 | 100 |     5
  2 | 200 |     5
  3 | 300 |     5
  4 | 400 |     5
  5 | 500 |     5
  6 | 600 |     5
  7 | 700 |     5
  8 | 800 |     5
  9 | 900 |     5
(10 rows)

--Testcase 257:
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2 DESC
               ->  HashAggregate
                     Output: c2, (c2 % 2)
                     Group Key: ft1.c2
                     ->  Foreign Scan on public.ft1
                           Output: c2
                           InfluxDB query: SELECT "c2" FROM "T1" WHERE (("c2" < 10))
(14 rows)

--Testcase 258:
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
  0 | {8,6,4,2,0}
  1 | {9,7,5,3,1}
  2 | {8,6,4,2}
  3 | {9,7,5,3}
  4 | {8,6,4}
  5 | {9,7,5}
  6 | {8,6}
  7 | {9,7}
  8 | {8}
  9 | {9}
(10 rows)

--Testcase 259:
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2
               ->  HashAggregate
                     Output: c2, (c2 % 2)
                     Group Key: ft1.c2
                     ->  Foreign Scan on public.ft1
                           Output: c2
                           InfluxDB query: SELECT "c2" FROM "T1" WHERE (("c2" < 10))
(14 rows)

--Testcase 260:
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
  0 | {0,2,4,6,8}
  1 | {1,3,5,7,9}
  2 | {2,4,6,8}
  3 | {3,5,7,9}
  4 | {4,6,8}
  5 | {5,7,9}
  6 | {6,8}
  7 | {7,9}
  8 | {8}
  9 | {9}
(10 rows)

-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
--Testcase 261:
PREPARE st1(int, int) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
--Testcase 262:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Nested Loop
   Output: t1.c3, t2.c3
   ->  Foreign Scan on public.ft1 t1
         Output: t1.c3
         InfluxDB query: SELECT "c3" FROM "T1" WHERE (("C1" = 1))
   ->  Materialize
         Output: t2.c3
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c3
               InfluxDB query: SELECT "c3" FROM "T1" WHERE (("C1" = 2))
(10 rows)

--Testcase 263:
EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

--Testcase 264:
EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
--Testcase 265:
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(time) = '1970-01-17'::date) ORDER BY c1;
--Testcase 266:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
   Sort Key: t1.c1
   ->  Hash Semi Join
         Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" < 20))
         ->  Hash
               Output: t2.c3
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c3
                     Filter: (date(t2."time") = '01-17-1970'::date)
                     InfluxDB query: SELECT "c3" FROM "T1" WHERE (("C1" > 10))
(15 rows)

--Testcase 267:
EXECUTE st2(10, 20);
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sat Jan 17 00:00:00 1970 | 16 |  6 | 00016 | 6  | 6          | foo
(1 row)

--Testcase 268:
EXECUTE st2(101, 121);
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

-- subquery using immutable function (can be sent to remote)
--Testcase 269:
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(time) = '1970-01-17'::date) ORDER BY c1;
--Testcase 270:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
   Sort Key: t1.c1
   ->  Hash Semi Join
         Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" < 20))
         ->  Hash
               Output: t2.c3
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c3
                     Filter: (date(t2."time") = '01-17-1970'::date)
                     InfluxDB query: SELECT "c3" FROM "T1" WHERE (("C1" > 10))
(15 rows)

--Testcase 271:
EXECUTE st3(10, 20);
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sat Jan 17 00:00:00 1970 | 16 |  6 | 00016 | 6  | 6          | foo
(1 row)

--Testcase 272:
EXECUTE st3(20, 30);
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

-- custom plan should be chosen initially
--Testcase 273:
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
--Testcase 274:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

--Testcase 275:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

--Testcase 276:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

--Testcase 277:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

--Testcase 278:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

-- once we try it enough times, should switch to generic plan
--Testcase 279:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = $1))
(3 rows)

-- value of $1 should not be sent to remote
--Testcase 280:
PREPARE st5(text,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
--Testcase 281:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

--Testcase 282:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

--Testcase 283:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

--Testcase 284:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

--Testcase 285:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

--Testcase 286:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = $1)) AND (("C1" = $2))
(3 rows)

--Testcase 287:
EXECUTE st5('foo', 1);
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

-- altering FDW options requires replanning
--Testcase 288:
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
--Testcase 289:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = "c2"))
(3 rows)

-- influxdb doesnot support INSERT
-- PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
ALTER TABLE "S 1"."T1" RENAME TO "T0";
ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T0');
--Testcase 290:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T0" WHERE (("C1" = "c2"))
(3 rows)

--Testcase 291:
EXECUTE st6;
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
ALTER TABLE "S 1"."T0" RENAME TO "T1";
ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T1');
--Testcase 292:
PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
--Testcase 293:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

-- Skip, Influxdb does not support extensions
-- ALTER SERVER loopback OPTIONS (DROP extensions);
-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
-- EXECUTE st8;
-- ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
-- DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
--Testcase 294:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Foreign Scan on public.ft1 t1
         Output: "time", c1, c2, c3, c6, c7, c8
         Filter: (t1.tableoid = '1259'::oid)
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(6 rows)

--Testcase 295:
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

--Testcase 296:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: ((tableoid)::regclass), "time", c1, c2, c3, c6, c7, c8
   ->  Foreign Scan on public.ft1 t1
         Output: (tableoid)::regclass, "time", c1, c2, c3, c6, c7, c8
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(5 rows)

--Testcase 297:
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid |           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
----------+--------------------------+----+----+-------+----+------------+-----
 ft1      | Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

--Testcase 298:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.ctid = '(0,2)'::tid)
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

--Testcase 299:
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

--Testcase 300:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: ctid, "time", c1, c2, c3, c6, c7, c8
   ->  Foreign Scan on public.ft1 t1
         Output: ctid, "time", c1, c2, c3, c6, c7, c8
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(5 rows)

--Testcase 301:
SELECT ctid, * FROM ft1 t1 LIMIT 1;
      ctid      |           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
----------------+--------------------------+----+----+-------+----+------------+-----
 (4294967295,0) | Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
--Testcase 302:
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

DROP FUNCTION f_test(int);
-- ===================================================================
-- conversion error
-- ===================================================================
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE int;
--Testcase 303:
SELECT * FROM ft1 WHERE c1 = 1;  -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
--Testcase 304:
SELECT  ft1.c1,  ft2.c2, ft1.c8 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
--Testcase 305:
SELECT  ft1.c1,  ft2.c2, ft1 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
--Testcase 306:
SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE text;
--Testcase 307:
SELECT * FROM ft1 WHERE c1 = 1;  -- Should work
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
BEGIN;
DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
--Testcase 308:
FETCH c;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

SAVEPOINT s;
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
ROLLBACK TO s;
--Testcase 309:
FETCH c;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
(1 row)

SAVEPOINT s;
--Testcase 310:
SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
(1 row)

ROLLBACK TO s;
--Testcase 311:
FETCH c;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
(1 row)

--Testcase 312:
SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

COMMIT;
-- ===================================================================
-- test handling of collations
-- ===================================================================
create table loct3 (f1 text collate "C" unique, f2 text, f3 varchar(10) unique);
create foreign table ft3 (f1 text collate "C", f2 text, f3 varchar(10))
  server influxdb_svr options (table 'loct3');
-- can be sent to remote
--Testcase 313:
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3" WHERE (("f1" = 'foo'))
(3 rows)

--Testcase 314:
explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3" WHERE (("f1" = 'foo'))
(3 rows)

--Testcase 315:
explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3" WHERE (("f2" = 'foo'))
(3 rows)

--Testcase 316:
explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3" WHERE (("f3" = 'foo'))
(3 rows)

--Testcase 317:
explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                          QUERY PLAN                          
--------------------------------------------------------------
 Nested Loop
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Join Filter: ((f.f3)::text = (l.f3)::text)
   ->  Index Scan using loct3_f1_key on public.loct3 l
         Output: l.f1, l.f2, l.f3
         Index Cond: (l.f1 = 'foo'::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(9 rows)

-- can't be sent to remote
--Testcase 318:
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f1)::text = 'foo'::text)
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(4 rows)

--Testcase 319:
explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f1 = 'foo'::text COLLATE "C")
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(4 rows)

--Testcase 320:
explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f2)::text = 'foo'::text)
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(4 rows)

--Testcase 321:
explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f2 = 'foo'::text COLLATE "C")
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(4 rows)

--Testcase 322:
explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                          QUERY PLAN                          
--------------------------------------------------------------
 Nested Loop
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Join Filter: ((f.f3)::text = (l.f3)::text)
   ->  Index Scan using loct3_f1_key on public.loct3 l
         Output: l.f1, l.f2, l.f3
         Index Cond: (l.f1 = 'foo'::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(9 rows)

-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
-- Skip
-- EXPLAIN (verbose, costs off)
-- INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
-- INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
-- INSERT INTO ft2 (c1,c2,c3)
--  VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc') RETURNING *;
-- INSERT INTO ft2 (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
-- UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;  -- can be pushed down
-- UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
--   FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
-- UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
--   FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;
-- EXPLAIN (verbose, costs off)
--   DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;                               -- can be pushed down
-- DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;
-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;                -- can be pushed down
-- DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;
-- SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
-- EXPLAIN (verbose, costs off)
-- INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
-- INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;             -- can be pushed down
-- UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;                       -- can be pushed down
-- DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;
-- Test UPDATE/DELETE with RETURNING on a three-table join
-- INSERT INTO ft2 (c1,c2,c3)
--   SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'foo'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
--   RETURNING ft2, ft2.*, ft4, ft4.*;       -- can be pushed down
-- UPDATE ft2 SET c3 = 'foo'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
--   RETURNING ft2, ft2.*, ft4, ft4.*;
-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2
--   USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1
--   RETURNING 100;                          -- can be pushed down
-- DELETE FROM ft2
--   USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1
--   RETURNING 100;
-- DELETE FROM ft2 WHERE ft2.c1 > 1200;
-- 
-- Test UPDATE/DELETE with WHERE or JOIN/ON conditions containing
-- user-defined operators/functions
-- ALTER SERVER loopback OPTIONS (DROP extensions);
-- INSERT INTO ft2 (c1,c2,c3)
--   SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;            -- can't be pushed down
-- UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'baz'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
--   RETURNING ft2.*, ft4.*, ft5.*;                                                    -- can't be pushed down
-- UPDATE ft2 SET c3 = 'baz'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
--   RETURNING ft2.*, ft4.*, ft5.*;
-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2
--   USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
--   WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1
--   RETURNING ft2.c1, ft2.c2, ft2.c3;       -- can't be pushed down
-- DELETE FROM ft2
--   USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
--   WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1
--   RETURNING ft2.c1, ft2.c2, ft2.c3;
-- DELETE FROM ft2 WHERE ft2.c1 > 2000;
-- ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- Test that trigger on remote table works as expected
-- CREATE OR REPLACE FUNCTION "S 1".F_BRTRIG() RETURNS trigger AS $$
-- BEGIN
--     NEW.c3 = NEW.c3 || '_trig_update';
--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;
-- CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
--     ON "S 1"."T1" FOR EACH ROW EXECUTE PROCEDURE "S 1".F_BRTRIG();
-- INSERT INTO ft2 (c1,c2,c3) VALUES (1208, 818, 'fff') RETURNING *;
-- INSERT INTO ft2 (c1,c2,c3,c6) VALUES (1218, 818, 'ggg', '(--;') RETURNING *;
-- UPDATE ft2 SET c2 = c2 + 600 WHERE c1 % 10 = 8 AND c1 < 1200 RETURNING *;
-- Test errors thrown on remote side during update
-- ALTER TABLE "S 1"."T1" ADD CONSTRAINT c2positive CHECK (c2 >= 0);
-- INSERT INTO ft1(c1, c2) VALUES(11, 12);  -- duplicate key
-- INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
-- INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
-- INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
-- INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
-- UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
-- Test savepoint/rollback behavior
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- select c2, count(*) from "S 1"."T1" where c2 < 500 group by 1 order by 1;
-- begin;
-- update ft2 set c2 = 42 where c2 = 0;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s1;
-- update ft2 set c2 = 44 where c2 = 4;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s1;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s2;
-- update ft2 set c2 = 46 where c2 = 6;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- rollback to savepoint s2;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s2;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s3;
-- update ft2 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
-- rollback to savepoint s3;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s3;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- none of the above is committed yet remotely
-- select c2, count(*) from "S 1"."T1" where c2 < 500 group by 1 order by 1;
-- commit;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- select c2, count(*) from "S 1"."T1" where c2 < 500 group by 1 order by 1;
-- VACUUM ANALYZE "S 1"."T1";
-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
--Testcase 323:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8
         Sort Key: ft1.c6 DESC NULLS LAST, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: "time", c1, c2, c3, c6, c7, c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

--Testcase 324:
SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Thu Aug 10 00:00:00 1972 | 952 |  2 | 00952 | 2  | 2          | foo
 Sun Aug 20 00:00:00 1972 | 962 |  2 | 00962 | 2  | 2          | foo
 Wed Aug 30 00:00:00 1972 | 972 |  2 | 00972 | 2  | 2          | foo
 Sat Sep 09 00:00:00 1972 | 982 |  2 | 00982 | 2  | 2          | foo
 Tue Sep 19 00:00:00 1972 | 992 |  2 | 00992 | 2  | 2          | foo
 Fri Jan 02 00:00:00 1970 |   1 |  1 | 00001 | 1  | 1          | foo
 Mon Jan 12 00:00:00 1970 |  11 |  1 | 00011 | 1  | 1          | foo
 Thu Jan 22 00:00:00 1970 |  21 |  1 | 00021 | 1  | 1          | foo
 Sun Feb 01 00:00:00 1970 |  31 |  1 | 00031 | 1  | 1          | foo
 Wed Feb 11 00:00:00 1970 |  41 |  1 | 00041 | 1  | 1          | foo
(10 rows)

-- ORDER BY DESC NULLS FIRST options
--Testcase 325:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8
         Sort Key: ft1.c6 DESC, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: "time", c1, c2, c3, c6, c7, c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

--Testcase 326:
SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Tue Jun 09 00:00:00 1970 | 159 |  9 | 00159 | 9  | 9          | foo
 Fri Jun 19 00:00:00 1970 | 169 |  9 | 00169 | 9  | 9          | foo
 Mon Jun 29 00:00:00 1970 | 179 |  9 | 00179 | 9  | 9          | foo
 Thu Jul 09 00:00:00 1970 | 189 |  9 | 00189 | 9  | 9          | foo
 Sun Jul 19 00:00:00 1970 | 199 |  9 | 00199 | 9  | 9          | foo
 Wed Jul 29 00:00:00 1970 | 209 |  9 | 00209 | 9  | 9          | foo
 Sat Aug 08 00:00:00 1970 | 219 |  9 | 00219 | 9  | 9          | foo
 Tue Aug 18 00:00:00 1970 | 229 |  9 | 00229 | 9  | 9          | foo
 Fri Aug 28 00:00:00 1970 | 239 |  9 | 00239 | 9  | 9          | foo
 Mon Sep 07 00:00:00 1970 | 249 |  9 | 00249 | 9  | 9          | foo
(10 rows)

-- ORDER BY ASC NULLS FIRST options
--Testcase 327:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8
         Sort Key: ft1.c6 NULLS FIRST, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: "time", c1, c2, c3, c6, c7, c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

--Testcase 328:
SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Wed Jun 10 00:00:00 1970 | 160 |  0 | 00160 | 0  | 0          | foo
 Sat Jun 20 00:00:00 1970 | 170 |  0 | 00170 | 0  | 0          | foo
 Tue Jun 30 00:00:00 1970 | 180 |  0 | 00180 | 0  | 0          | foo
 Fri Jul 10 00:00:00 1970 | 190 |  0 | 00190 | 0  | 0          | foo
 Mon Jul 20 00:00:00 1970 | 200 |  0 | 00200 | 0  | 0          | foo
 Thu Jul 30 00:00:00 1970 | 210 |  0 | 00210 | 0  | 0          | foo
 Sun Aug 09 00:00:00 1970 | 220 |  0 | 00220 | 0  | 0          | foo
 Wed Aug 19 00:00:00 1970 | 230 |  0 | 00230 | 0  | 0          | foo
 Sat Aug 29 00:00:00 1970 | 240 |  0 | 00240 | 0  | 0          | foo
 Tue Sep 08 00:00:00 1970 | 250 |  0 | 00250 | 0  | 0          | foo
(10 rows)

-- ===================================================================
-- test check constraints
-- ===================================================================
-- Consistent check constraints provide consistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK (c2 >= 0);
--Testcase 329:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan
   Output: (count(*))
   InfluxDB query: SELECT count(*) FROM "T1" WHERE (("c2" < 0))
(3 rows)

--Testcase 330:
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
(0 rows)

SET constraint_exclusion = 'on';
--Testcase 331:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 332:
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- check constraint is enforced on the remote side, not locally
-- INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
-- UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK (c2 < 0);
--Testcase 333:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Foreign Scan
   Output: (count(*))
   InfluxDB query: SELECT count(*) FROM "T1" WHERE (("c2" >= 0))
(3 rows)

--Testcase 334:
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
  1000
(1 row)

SET constraint_exclusion = 'on';
--Testcase 335:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 336:
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- local check constraint is not actually enforced
-- INSERT INTO ft1(c1, c2) VALUES(1111, 2);
-- UPDATE ft1 SET c2 = c2 + 1 WHERE c1 = 1;
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- ===================================================================
-- test WITH CHECK OPTION constraints
-- ===================================================================
CREATE FUNCTION row_before_insupd_trigfunc() 
RETURNS trigger AS $$BEGIN NEW.a := NEW.a + 10; 
RETURN NEW; END$$ LANGUAGE plpgsql;
CREATE TABLE base_tbl (a int, b int);
ALTER TABLE base_tbl SET (autovacuum_enabled = 'false');
CREATE TRIGGER row_before_insupd_trigger 
BEFORE INSERT OR UPDATE ON base_tbl 
FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
-- skip, Influxdb does not support INSERT. However, we keep this test case
-- to test locally
--CREATE FOREIGN TABLE foreign_tbl (a int, b int)
--  SERVER influxdb_svr OPTIONS (table 'base_tbl');
CREATE VIEW rw_view AS SELECT * FROM base_tbl
  WHERE a < b WITH CHECK OPTION;
\d+ rw_view
                           View "public.rw_view"
 Column |  Type   | Collation | Nullable | Default | Storage | Description 
--------+---------+-----------+----------+---------+---------+-------------
 a      | integer |           |          |         | plain   | 
 b      | integer |           |          |         | plain   | 
View definition:
 SELECT base_tbl.a,
    base_tbl.b
   FROM base_tbl
  WHERE base_tbl.a < base_tbl.b;
Options: check_option=cascaded

--Testcase 337:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 5);
        QUERY PLAN         
---------------------------
 Insert on public.base_tbl
   ->  Result
         Output: 0, 5
(3 rows)

--Testcase 338:
INSERT INTO rw_view VALUES (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (10, 5).
--Testcase 339:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15);
        QUERY PLAN         
---------------------------
 Insert on public.base_tbl
   ->  Result
         Output: 0, 15
(3 rows)

--Testcase 340:
INSERT INTO rw_view VALUES (0, 15); -- ok
--Testcase 341:
SELECT * FROM base_tbl;
 a  | b  
----+----
 10 | 15
(1 row)

--Testcase 342:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 5;
                         QUERY PLAN                          
-------------------------------------------------------------
 Update on public.base_tbl
   ->  Seq Scan on public.base_tbl
         Output: base_tbl.a, (base_tbl.b + 5), base_tbl.ctid
         Filter: (base_tbl.a < base_tbl.b)
(4 rows)

--Testcase 343:
UPDATE rw_view SET b = b + 5; -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (20, 20).
--Testcase 344:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 15;
                          QUERY PLAN                          
--------------------------------------------------------------
 Update on public.base_tbl
   ->  Seq Scan on public.base_tbl
         Output: base_tbl.a, (base_tbl.b + 15), base_tbl.ctid
         Filter: (base_tbl.a < base_tbl.b)
(4 rows)

--Testcase 345:
UPDATE rw_view SET b = b + 15; -- ok
--Testcase 346:
SELECT * FROM base_tbl;
 a  | b  
----+----
 20 | 30
(1 row)

--DROP FOREIGN TABLE foreign_tbl CASCADE;
DROP TRIGGER row_before_insupd_trigger ON base_tbl;
DROP TABLE base_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
-- test WCO for partitions
CREATE TABLE child_tbl (a int, b int);
ALTER TABLE child_tbl SET (autovacuum_enabled = 'false');
CREATE TRIGGER row_before_insupd_trigger
 BEFORE INSERT OR UPDATE ON child_tbl
 FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
--CREATE FOREIGN TABLE foreign_tbl (a int, b int)
--  SERVER influxdb_svr OPTIONS (table 'child_tbl');
CREATE TABLE parent_tbl (a int, b int) PARTITION BY RANGE(a);
ALTER TABLE parent_tbl ATTACH PARTITION child_tbl FOR VALUES FROM (0) TO (100);
CREATE VIEW rw_view AS SELECT * FROM parent_tbl
  WHERE a < b WITH CHECK OPTION;
\d+ rw_view
                           View "public.rw_view"
 Column |  Type   | Collation | Nullable | Default | Storage | Description 
--------+---------+-----------+----------+---------+---------+-------------
 a      | integer |           |          |         | plain   | 
 b      | integer |           |          |         | plain   | 
View definition:
 SELECT parent_tbl.a,
    parent_tbl.b
   FROM parent_tbl
  WHERE parent_tbl.a < parent_tbl.b;
Options: check_option=cascaded

--Testcase 347:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 5);
         QUERY PLAN          
-----------------------------
 Insert on public.parent_tbl
   ->  Result
         Output: 0, 5
(3 rows)

--Testcase 348:
INSERT INTO rw_view VALUES (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (10, 5).
--Testcase 349:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15);
         QUERY PLAN          
-----------------------------
 Insert on public.parent_tbl
   ->  Result
         Output: 0, 15
(3 rows)

--Testcase 350:
INSERT INTO rw_view VALUES (0, 15); -- ok
--Testcase 351:
SELECT * FROM child_tbl;
 a  | b  
----+----
 10 | 15
(1 row)

--Testcase 352:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 5;
                           QUERY PLAN                           
----------------------------------------------------------------
 Update on public.parent_tbl
   Update on public.child_tbl
   ->  Seq Scan on public.child_tbl
         Output: child_tbl.a, (child_tbl.b + 5), child_tbl.ctid
         Filter: (child_tbl.a < child_tbl.b)
(5 rows)

--Testcase 353:
UPDATE rw_view SET b = b + 5; -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (20, 20).
--Testcase 354:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 15;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Update on public.parent_tbl
   Update on public.child_tbl
   ->  Seq Scan on public.child_tbl
         Output: child_tbl.a, (child_tbl.b + 15), child_tbl.ctid
         Filter: (child_tbl.a < child_tbl.b)
(5 rows)

--Testcase 355:
UPDATE rw_view SET b = b + 15; -- ok
--Testcase 356:
SELECT * FROM child_tbl;
 a  | b  
----+----
 20 | 30
(1 row)

--DROP FOREIGN TABLE foreign_tbl CASCADE;
DROP TRIGGER row_before_insupd_trigger ON child_tbl;
DROP TABLE parent_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
DROP FUNCTION row_before_insupd_trigfunc;
-- ===================================================================
-- test serial columns (ie, sequence-based defaults)
-- ===================================================================
create table loc1 (f1 serial, f2 text);
alter table loc1 set (autovacuum_enabled = 'false');
--create foreign table rem1 (f1 serial, f2 text)
--  server influxdb_svr options(table 'loc1');
--Testcase 357:
select pg_catalog.setval('rem1_f1_seq', 10, false);
ERROR:  relation "rem1_f1_seq" does not exist
LINE 1: select pg_catalog.setval('rem1_f1_seq', 10, false);
                                 ^
--Testcase 358:
insert into loc1(f2) values('hi');
--Testcase 359:
insert into loc1(f2) values('hi remote');
--Testcase 360:
insert into loc1(f2) values('bye');
--Testcase 361:
insert into loc1(f2) values('bye remote');
--Testcase 362:
select * from loc1;
 f1 |     f2     
----+------------
  1 | hi
  2 | hi remote
  3 | bye
  4 | bye remote
(4 rows)

--select * from rem1;
-- ===================================================================
-- test generated columns
-- ===================================================================
create table gloc1 (a int, b int generated always as (a * 2) stored);
alter table gloc1 set (autovacuum_enabled = 'false');
--create foreign table grem1 (
--  a int,
--  b int generated always as (a * 2) stored)
--  server influxdb_svr options(table 'gloc1');
--Testcase 363:
insert into gloc1 (a) values (1), (2);
--Testcase 364:
update gloc1 set a = 22 where a = 2;
--Testcase 365:
select * from gloc1;
 a  | b  
----+----
  1 |  2
 22 | 44
(2 rows)

--select * from grem1;
-- ===================================================================
-- test local triggers
-- ===================================================================
-- Trigger functions "borrowed" from triggers regress test.
CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
	RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
		TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;$$;
CREATE TRIGGER trig_stmt_before BEFORE DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
ERROR:  relation "rem1" does not exist
CREATE TRIGGER trig_stmt_after AFTER DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
ERROR:  relation "rem1" does not exist
CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger
LANGUAGE plpgsql AS $$

declare
	oldnew text[];
	relid text;
    argstr text;
begin

	relid := TG_relid::regclass;
	argstr := '';
	for i in 0 .. TG_nargs - 1 loop
		if i > 0 then
			argstr := argstr || ', ';
		end if;
		argstr := argstr || TG_argv[i];
	end loop;

    RAISE NOTICE '%(%) % % % ON %',
		tg_name, argstr, TG_when, TG_level, TG_OP, relid;
    oldnew := '{}'::text[];
	if TG_OP != 'INSERT' then
		oldnew := array_append(oldnew, format('OLD: %s', OLD));
	end if;

	if TG_OP != 'DELETE' then
		oldnew := array_append(oldnew, format('NEW: %s', NEW));
	end if;

    RAISE NOTICE '%', array_to_string(oldnew, ',');

	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
-- Test basic functionality
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 366:
delete from loc1;
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON loc1
NOTICE:  OLD: (1,hi)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON loc1
NOTICE:  OLD: (2,"hi remote")
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON loc1
NOTICE:  OLD: (3,bye)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON loc1
NOTICE:  OLD: (4,"bye remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON loc1
NOTICE:  OLD: (1,hi)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON loc1
NOTICE:  OLD: (2,"hi remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON loc1
NOTICE:  OLD: (3,bye)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON loc1
NOTICE:  OLD: (4,"bye remote")
--Testcase 367:
insert into loc1 values(1,'insert');
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON loc1
NOTICE:  NEW: (1,insert)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON loc1
NOTICE:  NEW: (1,insert)
--Testcase 368:
update loc1 set f2  = 'update' where f1 = 1;
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON loc1
NOTICE:  OLD: (1,insert),NEW: (1,update)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON loc1
NOTICE:  OLD: (1,insert),NEW: (1,update)
--Testcase 369:
update loc1 set f2 = f2 || f2;
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON loc1
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON loc1
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
-- cleanup
DROP TRIGGER trig_row_before ON loc1;
DROP TRIGGER trig_row_after ON loc1;
DROP TRIGGER trig_stmt_before ON loc1;
ERROR:  trigger "trig_stmt_before" for table "loc1" does not exist
DROP TRIGGER trig_stmt_after ON loc1;
ERROR:  trigger "trig_stmt_after" for table "loc1" does not exist
--Testcase 370:
DELETE from loc1;
-- Test WHEN conditions
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON loc1
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
--Testcase 371:
EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after_insupd
AFTER INSERT OR UPDATE ON loc1
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
--Testcase 372:
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Insert or update not matching: nothing happens
--Testcase 373:
INSERT INTO loc1 values(1, 'insert');
--Testcase 374:
UPDATE loc1 set f2 = 'test';
-- Insert or update matching: triggers are fired
--Testcase 375:
INSERT INTO loc1 values(2, 'update');
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW INSERT ON loc1
NOTICE:  NEW: (2,update)
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW INSERT ON loc1
NOTICE:  NEW: (2,update)
--Testcase 376:
UPDATE loc1 set f2 = 'update update' where f1 = '2';
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW UPDATE ON loc1
NOTICE:  OLD: (2,update),NEW: (2,"update update")
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW UPDATE ON loc1
NOTICE:  OLD: (2,update),NEW: (2,"update update")
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON loc1
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
--Testcase 377:
EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON loc1
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
--Testcase 378:
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Trigger is fired for f1=2, not for f1=1
--Testcase 379:
DELETE FROM loc1;
NOTICE:  trig_row_before_delete(23, skidoo) BEFORE ROW DELETE ON loc1
NOTICE:  OLD: (2,"update update")
NOTICE:  trig_row_after_delete(23, skidoo) AFTER ROW DELETE ON loc1
NOTICE:  OLD: (2,"update update")
-- cleanup
DROP TRIGGER trig_row_before_insupd ON loc1;
DROP TRIGGER trig_row_after_insupd ON loc1;
DROP TRIGGER trig_row_before_delete ON loc1;
DROP TRIGGER trig_row_after_delete ON loc1;
-- Test various RETURN statements in BEFORE triggers.
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- The new values should have 'triggered' appended
--Testcase 380:
INSERT INTO loc1 values(1, 'insert');
--Testcase 381:
SELECT * from loc1;
 f1 |         f2         
----+--------------------
  1 | insert triggered !
(1 row)

--Testcase 382:
INSERT INTO loc1 values(2, 'insert') RETURNING f2;
         f2         
--------------------
 insert triggered !
(1 row)

--Testcase 383:
SELECT * from loc1;
 f1 |         f2         
----+--------------------
  1 | insert triggered !
  2 | insert triggered !
(2 rows)

--Testcase 384:
UPDATE loc1 set f2 = '';
--Testcase 385:
SELECT * from loc1;
 f1 |      f2      
----+--------------
  1 |  triggered !
  2 |  triggered !
(2 rows)

--Testcase 386:
UPDATE loc1 set f2 = 'skidoo' RETURNING f2;
         f2         
--------------------
 skidoo triggered !
 skidoo triggered !
(2 rows)

--Testcase 387:
SELECT * from loc1;
 f1 |         f2         
----+--------------------
  1 | skidoo triggered !
  2 | skidoo triggered !
(2 rows)

--Testcase 388:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f1 = 10;          -- all columns should be transmitted
          QUERY PLAN           
-------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: 10, f2, ctid
(3 rows)

--Testcase 389:
UPDATE loc1 set f1 = 10;
--Testcase 390:
SELECT * from loc1;
 f1 |               f2               
----+--------------------------------
 10 | skidoo triggered ! triggered !
 10 | skidoo triggered ! triggered !
(2 rows)

--Testcase 391:
DELETE FROM loc1;
-- Add a second trigger, to check that the changes are propagated correctly
-- from trigger to trigger
CREATE TRIGGER trig_row_before_insupd2
BEFORE INSERT OR UPDATE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
--Testcase 392:
INSERT INTO loc1 values(1, 'insert');
--Testcase 393:
SELECT * from loc1;
 f1 |               f2               
----+--------------------------------
  1 | insert triggered ! triggered !
(1 row)

--Testcase 394:
INSERT INTO loc1 values(2, 'insert') RETURNING f2;
               f2               
--------------------------------
 insert triggered ! triggered !
(1 row)

--Testcase 395:
SELECT * from loc1;
 f1 |               f2               
----+--------------------------------
  1 | insert triggered ! triggered !
  2 | insert triggered ! triggered !
(2 rows)

--Testcase 396:
UPDATE loc1 set f2 = '';
--Testcase 397:
SELECT * from loc1;
 f1 |            f2            
----+--------------------------
  1 |  triggered ! triggered !
  2 |  triggered ! triggered !
(2 rows)

--Testcase 398:
UPDATE loc1 set f2 = 'skidoo' RETURNING f2;
               f2               
--------------------------------
 skidoo triggered ! triggered !
 skidoo triggered ! triggered !
(2 rows)

--Testcase 399:
SELECT * from loc1;
 f1 |               f2               
----+--------------------------------
  1 | skidoo triggered ! triggered !
  2 | skidoo triggered ! triggered !
(2 rows)

DROP TRIGGER trig_row_before_insupd ON loc1;
DROP TRIGGER trig_row_before_insupd2 ON loc1;
--Testcase 400:
DELETE from loc1;
--Testcase 401:
INSERT INTO loc1 VALUES (1, 'test');
-- Test with a trigger returning NULL
CREATE FUNCTION trig_null() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql;
CREATE TRIGGER trig_null
BEFORE INSERT OR UPDATE OR DELETE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trig_null();
-- Nothing should have changed.
--Testcase 402:
INSERT INTO loc1 VALUES (2, 'test2');
--Testcase 403:
SELECT * from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

--Testcase 404:
UPDATE loc1 SET f2 = 'test2';
--Testcase 405:
SELECT * from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

--Testcase 406:
DELETE from loc1;
--Testcase 407:
SELECT * from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

DROP TRIGGER trig_null ON loc1;
--Testcase 408:
DELETE from loc1;
-- Test a combination of local and remote triggers
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_local_before BEFORE INSERT OR UPDATE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
--Testcase 409:
INSERT INTO loc1(f2) VALUES ('test');
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON loc1
NOTICE:  NEW: (5,"test triggered !")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON loc1
NOTICE:  NEW: (5,"test triggered !")
--Testcase 410:
UPDATE loc1 SET f2 = 'testo';
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON loc1
NOTICE:  OLD: (5,"test triggered !"),NEW: (5,"testo triggered !")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON loc1
NOTICE:  OLD: (5,"test triggered !"),NEW: (5,"testo triggered !")
-- Test returning a system attribute
--Testcase 411:
INSERT INTO loc1(f2) VALUES ('test') RETURNING ctid;
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON loc1
NOTICE:  NEW: (6,"test triggered !")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON loc1
NOTICE:  NEW: (6,"test triggered !")
  ctid  
--------
 (0,29)
(1 row)

-- cleanup
DROP TRIGGER trig_row_before ON loc1;
DROP TRIGGER trig_row_after ON loc1;
DROP TRIGGER trig_local_before ON loc1;
-- Test direct foreign table modification functionality
-- Test with statement-level triggers
CREATE TRIGGER trig_stmt_before
	BEFORE DELETE OR INSERT OR UPDATE ON loc1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 412:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f2 = '';          -- can be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: f1, ''::text, ctid
(3 rows)

--Testcase 413:
EXPLAIN (verbose, costs off)
DELETE FROM loc1;                 -- can be pushed down
          QUERY PLAN           
-------------------------------
 Delete on public.loc1
   ->  Seq Scan on public.loc1
         Output: ctid
(3 rows)

DROP TRIGGER trig_stmt_before ON loc1;
CREATE TRIGGER trig_stmt_after
	AFTER DELETE OR INSERT OR UPDATE ON loc1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 414:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f2 = '';          -- can be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: f1, ''::text, ctid
(3 rows)

--Testcase 415:
EXPLAIN (verbose, costs off)
DELETE FROM loc1;                 -- can be pushed down
          QUERY PLAN           
-------------------------------
 Delete on public.loc1
   ->  Seq Scan on public.loc1
         Output: ctid
(3 rows)

DROP TRIGGER trig_stmt_after ON loc1;
-- Test with row-level ON INSERT triggers
CREATE TRIGGER trig_row_before_insert
BEFORE INSERT ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 416:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f2 = '';          -- can be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: f1, ''::text, ctid
(3 rows)

--Testcase 417:
EXPLAIN (verbose, costs off)
DELETE FROM loc1;                 -- can be pushed down
          QUERY PLAN           
-------------------------------
 Delete on public.loc1
   ->  Seq Scan on public.loc1
         Output: ctid
(3 rows)

DROP TRIGGER trig_row_before_insert ON loc1;
CREATE TRIGGER trig_row_after_insert
AFTER INSERT ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 418:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f2 = '';          -- can be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: f1, ''::text, ctid
(3 rows)

--Testcase 419:
EXPLAIN (verbose, costs off)
DELETE FROM loc1;                 -- can be pushed down
          QUERY PLAN           
-------------------------------
 Delete on public.loc1
   ->  Seq Scan on public.loc1
         Output: ctid
(3 rows)

DROP TRIGGER trig_row_after_insert ON loc1;
-- Test with row-level ON UPDATE triggers
CREATE TRIGGER trig_row_before_update
BEFORE UPDATE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 420:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f2 = '';          -- can't be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: f1, ''::text, ctid
(3 rows)

--Testcase 421:
EXPLAIN (verbose, costs off)
DELETE FROM loc1;                 -- can be pushed down
          QUERY PLAN           
-------------------------------
 Delete on public.loc1
   ->  Seq Scan on public.loc1
         Output: ctid
(3 rows)

DROP TRIGGER trig_row_before_update ON loc1;
CREATE TRIGGER trig_row_after_update
AFTER UPDATE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 422:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f2 = '';          -- can't be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: f1, ''::text, ctid
(3 rows)

--Testcase 423:
EXPLAIN (verbose, costs off)
DELETE FROM loc1;                 -- can be pushed down
          QUERY PLAN           
-------------------------------
 Delete on public.loc1
   ->  Seq Scan on public.loc1
         Output: ctid
(3 rows)

DROP TRIGGER trig_row_after_update ON loc1;
-- Test with row-level ON DELETE triggers
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 424:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f2 = '';          -- can be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: f1, ''::text, ctid
(3 rows)

--Testcase 425:
EXPLAIN (verbose, costs off)
DELETE FROM loc1;                 -- can't be pushed down
          QUERY PLAN           
-------------------------------
 Delete on public.loc1
   ->  Seq Scan on public.loc1
         Output: ctid
(3 rows)

DROP TRIGGER trig_row_before_delete ON loc1;
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 426:
EXPLAIN (verbose, costs off)
UPDATE loc1 set f2 = '';          -- can be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.loc1
   ->  Seq Scan on public.loc1
         Output: f1, ''::text, ctid
(3 rows)

--Testcase 427:
EXPLAIN (verbose, costs off)
DELETE FROM loc1;                 -- can't be pushed down
          QUERY PLAN           
-------------------------------
 Delete on public.loc1
   ->  Seq Scan on public.loc1
         Output: ctid
(3 rows)

DROP TRIGGER trig_row_after_delete ON loc1;
-- ===================================================================
-- test inheritance features
-- ===================================================================
CREATE TABLE a (aa TEXT);
--CREATE TABLE loct (aa TEXT, bb TEXT);
ALTER TABLE a SET (autovacuum_enabled = 'false');
--ALTER TABLE loct SET (autovacuum_enabled = 'false');
-- Because Influxdb does not support UPDATE, to test locally 
-- we create local table.
CREATE TABLE b (bb TEXT) INHERITS (a);
--Testcase 428:
INSERT INTO a(aa) VALUES('aaa');
--Testcase 429:
INSERT INTO a(aa) VALUES('aaaa');
--Testcase 430:
INSERT INTO a(aa) VALUES('aaaaa');
--Testcase 431:
INSERT INTO b(aa) VALUES('bbb');
--Testcase 432:
INSERT INTO b(aa) VALUES('bbbb');
--Testcase 433:
INSERT INTO b(aa) VALUES('bbbbb');
--Testcase 434:
SELECT tableoid::regclass, * FROM a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
 b        | bbb
 b        | bbbb
 b        | bbbbb
(6 rows)

--Testcase 435:
SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb 
----------+-------+----
 b        | bbb   | 
 b        | bbbb  | 
 b        | bbbbb | 
(3 rows)

--Testcase 436:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
(3 rows)

--Testcase 437:
UPDATE a SET aa = 'zzzzzz' WHERE aa LIKE 'aaaa%';
--Testcase 438:
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
 b        | bbb
 b        | bbbb
 b        | bbbbb
(6 rows)

--Testcase 439:
SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb 
----------+-------+----
 b        | bbb   | 
 b        | bbbb  | 
 b        | bbbbb | 
(3 rows)

--Testcase 440:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 441:
UPDATE b SET aa = 'new';
--Testcase 442:
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
 b        | new
 b        | new
 b        | new
(6 rows)

--Testcase 443:
SELECT tableoid::regclass, * FROM b;
 tableoid | aa  | bb 
----------+-----+----
 b        | new | 
 b        | new | 
 b        | new | 
(3 rows)

--Testcase 444:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 445:
UPDATE a SET aa = 'newtoo';
--Testcase 446:
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
 b        | newtoo
 b        | newtoo
 b        | newtoo
(6 rows)

--Testcase 447:
SELECT tableoid::regclass, * FROM b;
 tableoid |   aa   | bb 
----------+--------+----
 b        | newtoo | 
 b        | newtoo | 
 b        | newtoo | 
(3 rows)

--Testcase 448:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
(3 rows)

--Testcase 449:
DELETE FROM a;
--Testcase 450:
SELECT tableoid::regclass, * FROM a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 451:
SELECT tableoid::regclass, * FROM b;
 tableoid | aa | bb 
----------+----+----
(0 rows)

--Testcase 452:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid | aa 
----------+----
(0 rows)

DROP TABLE a CASCADE;
NOTICE:  drop cascades to table b
--DROP TABLE loct;
-- Check SELECT FOR UPDATE/SHARE with an inherited source table
--create table loct1 (f1 int, f2 int, f3 int);
--create table loct2 (f1 int, f2 int, f3 int);
--alter table loct1 set (autovacuum_enabled = 'false');
--alter table loct2 set (autovacuum_enabled = 'false');
create table foo (f1 int, f2 int);
create foreign table foo2 (f3 int) inherits (foo)
  server influxdb_svr options (table 'loct1_1');
create table bar (f1 int, f2 int);
create foreign table bar2 (f3 int) inherits (bar)
  server influxdb_svr options (table 'loct2_1');
alter table foo set (autovacuum_enabled = 'false');
alter table bar set (autovacuum_enabled = 'false');
--Testcase 453:
insert into foo values(1,1);
--Testcase 454:
insert into foo values(3,3);
-- insert into foo2 values(2,2,2);
-- insert into foo2 values(4,4,4);
--Testcase 455:
insert into bar values(1,11);
--Testcase 456:
insert into bar values(2,22);
--Testcase 457:
insert into bar values(6,66);
-- insert into bar2 values(3,33,33);
-- insert into bar2 values(4,44,44);
-- insert into bar2 values(7,77,77);
--explain (verbose, costs off)
--select * from ftbar where f1 in (select f1 from ftfoo) for update;
--select * from ftbar where f1 in (select f1 from ftfoo) for update;
--Testcase 458:
explain (verbose, costs off)
select * from bar2 where f1 in (select f1 from foo2) for update;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 LockRows
   Output: bar2.f1, bar2.f2, bar2.f3, bar2.*, foo2.*
   ->  Hash Join
         Output: bar2.f1, bar2.f2, bar2.f3, bar2.*, foo2.*
         Inner Unique: true
         Hash Cond: (bar2.f1 = foo2.f1)
         ->  Foreign Scan on public.bar2
               Output: bar2.f1, bar2.f2, bar2.f3, bar2.*
               InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct2_1"
         ->  Hash
               Output: foo2.*, foo2.f1
               ->  HashAggregate
                     Output: foo2.*, foo2.f1
                     Group Key: foo2.f1
                     ->  Foreign Scan on public.foo2
                           Output: foo2.*, foo2.f1
                           InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct1_1"
(17 rows)

--Testcase 459:
select * from bar2 where f1 in (select f1 from foo2) for update;
 f1 | f2 | f3 
----+----+----
  4 | 44 | 44
(1 row)

--Testcase 460:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for share;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar
                     Output: bar.f1, bar.f2, bar.ctid, bar.*, bar.tableoid
               ->  Foreign Scan on public.bar2
                     Output: bar2.f1, bar2.f2, bar2.ctid, bar2.*, bar2.tableoid
                     InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct2_1"
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo
                                 Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                           ->  Foreign Scan on public.foo2
                                 Output: foo2.ctid, foo2.f1, foo2.*, foo2.tableoid
                                 InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct1_1"
(23 rows)

--Testcase 461:
select * from bar where f1 in (select f1 from foo) for share;
 f1 | f2 
----+----
  1 | 11
  2 | 22
  3 | 33
  4 | 44
(4 rows)

-- Check UPDATE with inherited target and an inherited source table
-- skip, if we update to bar, bar2 also is updated because it inherits bar
-- and Influxdb fdw does not support update on bar2.
/*
--Testcase 462:
explain (verbose, costs off)
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
--Testcase 463:
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);

--Testcase 464:
select tableoid::regclass, * from bar order by 1,2;

-- Check UPDATE with inherited target and an appendrel subquery
--Testcase 465:
explain (verbose, costs off)
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
--Testcase 466:
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;

--Testcase 467:
select tableoid::regclass, * from bar order by 1,2;

-- Test forcing the remote server to produce sorted data for a merge join,
-- but the foreign table is an inheritance child.
truncate table loct1;
truncate table only foo;
\set num_rows_foo 2000
--Testcase 468:
insert into loct1 select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
--Testcase 469:
insert into foo select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
SET enable_hashjoin to false;
SET enable_nestloop to false;
alter foreign table foo2 options (use_remote_estimate 'true');
create index i_loct1_f1 on loct1(f1);
create index i_foo_f1 on foo(f1);
analyze foo;
analyze loct1;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 470:
explain (verbose, costs off)
	select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
--Testcase 471:
select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 472:
explain (verbose, costs off)
	select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
--Testcase 473:
select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
RESET enable_hashjoin;
RESET enable_nestloop;

-- Test that WHERE CURRENT OF is not supported
begin;
declare c cursor for select * from bar where f1 = 7;
--Testcase 474:
fetch from c;
--Testcase 475:
update bar set f2 = null where current of c;
rollback;

--Testcase 476:
explain (verbose, costs off)
delete from foo where f1 < 5 returning *;
--Testcase 477:
delete from foo where f1 < 5 returning *;
--Testcase 478:
explain (verbose, costs off)
update bar set f2 = f2 + 100 returning *;
--Testcase 479:
update bar set f2 = f2 + 100 returning *;

-- Test that UPDATE/DELETE with inherited target works with row-level triggers
CREATE TRIGGER trig_row_before
BEFORE UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');

CREATE TRIGGER trig_row_after
AFTER UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');

--Testcase 480:
explain (verbose, costs off)
update bar set f2 = f2 + 100;
--Testcase 481:
update bar set f2 = f2 + 100;

--Testcase 482:
explain (verbose, costs off)
delete from bar where f2 < 400;
--Testcase 483:
delete from bar where f2 < 400;

-- cleanup
drop table foo cascade;
drop table bar cascade;
drop table loct1;
drop table loct2;

-- Test pushing down UPDATE/DELETE joins to the remote server
create table parent (a int, b text);
--create table loct1 (a int, b text);
--create table loct2 (a int, b text);
create foreign table remt1 (a int, b text)
  server influxdb_svr options (table 'loct1');
create foreign table remt2 (a int, b text)
  server influxdb_svr options (table 'loct2');
alter foreign table remt1 inherit parent;

--Testcase 484:
insert into remt1 values (1, 'foo');
--Testcase 485:
insert into remt1 values (2, 'bar');
--Testcase 486:
insert into remt2 values (1, 'foo');
--Testcase 487:
insert into remt2 values (2, 'bar');

analyze remt1;
analyze remt2;

--Testcase 488:
explain (verbose, costs off)
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
--Testcase 489:
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
--Testcase 490:
explain (verbose, costs off)
delete from parent using remt2 where parent.a = remt2.a returning parent;
--Testcase 491:
delete from parent using remt2 where parent.a = remt2.a returning parent;

-- cleanup
drop foreign table remt1;
drop foreign table remt2;
drop table loct1;
drop table loct2;
drop table parent;
*/
-- ===================================================================
-- test tuple routing for foreign-table partitions
-- ===================================================================
/*
-- Test insert tuple routing
create table itrtest (a int, b text) partition by list (a);
create table loct1 (a int check (a in (1)), b text);
create foreign table remp1 (a int check (a in (1)), b text) server loopback options (table_name 'loct1');
create table loct2 (a int check (a in (2)), b text);
create foreign table remp2 (b text, a int check (a in (2))) server loopback options (table_name 'loct2');
alter table itrtest attach partition remp1 for values in (1);
alter table itrtest attach partition remp2 for values in (2);

--Testcase 492:
insert into itrtest values (1, 'foo');
--Testcase 493:
insert into itrtest values (1, 'bar') returning *;
--Testcase 494:
insert into itrtest values (2, 'baz');
--Testcase 495:
insert into itrtest values (2, 'qux') returning *;
--Testcase 496:
insert into itrtest values (1, 'test1'), (2, 'test2') returning *;

--Testcase 497:
select tableoid::regclass, * FROM itrtest;
--Testcase 498:
select tableoid::regclass, * FROM remp1;
--Testcase 499:
select tableoid::regclass, * FROM remp2;

--Testcase 500:
delete from itrtest;

create unique index loct1_idx on loct1 (a);

-- DO NOTHING without an inference specification is supported
--Testcase 501:
insert into itrtest values (1, 'foo') on conflict do nothing returning *;
--Testcase 502:
insert into itrtest values (1, 'foo') on conflict do nothing returning *;

-- But other cases are not supported
--Testcase 503:
insert into itrtest values (1, 'bar') on conflict (a) do nothing;
--Testcase 504:
insert into itrtest values (1, 'bar') on conflict (a) do update set b = excluded.b;

--Testcase 505:
select tableoid::regclass, * FROM itrtest;

--Testcase 506:
delete from itrtest;

drop index loct1_idx;

-- Test that remote triggers work with insert tuple routing
create function br_insert_trigfunc() returns trigger as $$
begin
	new.b := new.b || ' triggered !';
	return new;
end
$$ language plpgsql;
create trigger loct1_br_insert_trigger before insert on loct1
	for each row execute procedure br_insert_trigfunc();
create trigger loct2_br_insert_trigger before insert on loct2
	for each row execute procedure br_insert_trigfunc();

-- The new values are concatenated with ' triggered !'
--Testcase 507:
insert into itrtest values (1, 'foo') returning *;
--Testcase 508:
insert into itrtest values (2, 'qux') returning *;
--Testcase 509:
insert into itrtest values (1, 'test1'), (2, 'test2') returning *;
with result as (insert into itrtest values (1, 'test1'), (2, 'test2') returning *) select * from result;

drop trigger loct1_br_insert_trigger on loct1;
drop trigger loct2_br_insert_trigger on loct2;

drop table itrtest;
drop table loct1;
drop table loct2;

-- Test update tuple routing
create table utrtest (a int, b text) partition by list (a);
create table loct (a int check (a in (1)), b text);
create foreign table remp (a int check (a in (1)), b text) server loopback options (table_name 'loct');
create table locp (a int check (a in (2)), b text);
alter table utrtest attach partition remp for values in (1);
alter table utrtest attach partition locp for values in (2);

--Testcase 510:
insert into utrtest values (1, 'foo');
--Testcase 511:
insert into utrtest values (2, 'qux');

--Testcase 512:
select tableoid::regclass, * FROM utrtest;
--Testcase 513:
select tableoid::regclass, * FROM remp;
--Testcase 514:
select tableoid::regclass, * FROM locp;

-- It's not allowed to move a row from a partition that is foreign to another
--Testcase 515:
update utrtest set a = 2 where b = 'foo' returning *;

-- But the reverse is allowed
--Testcase 516:
update utrtest set a = 1 where b = 'qux' returning *;

--Testcase 517:
select tableoid::regclass, * FROM utrtest;
--Testcase 518:
select tableoid::regclass, * FROM remp;
--Testcase 519:
select tableoid::regclass, * FROM locp;

-- The executor should not let unexercised FDWs shut down
--Testcase 520:
update utrtest set a = 1 where b = 'foo';

-- Test that remote triggers work with update tuple routing
create trigger loct_br_insert_trigger before insert on loct
	for each row execute procedure br_insert_trigfunc();

--Testcase 521:
delete from utrtest;
--Testcase 522:
insert into utrtest values (2, 'qux');

-- Check case where the foreign partition is a subplan target rel
--Testcase 523:
explain (verbose, costs off)
update utrtest set a = 1 where a = 1 or a = 2 returning *;
-- The new values are concatenated with ' triggered !'
--Testcase 524:
update utrtest set a = 1 where a = 1 or a = 2 returning *;

--Testcase 525:
delete from utrtest;
--Testcase 526:
insert into utrtest values (2, 'qux');

-- Check case where the foreign partition isn't a subplan target rel
--Testcase 527:
explain (verbose, costs off)
update utrtest set a = 1 where a = 2 returning *;
-- The new values are concatenated with ' triggered !'
--Testcase 528:
update utrtest set a = 1 where a = 2 returning *;

drop trigger loct_br_insert_trigger on loct;

-- We can move rows to a foreign partition that has been updated already,
-- but can't move rows to a foreign partition that hasn't been updated yet

--Testcase 529:
delete from utrtest;
--Testcase 530:
insert into utrtest values (1, 'foo');
--Testcase 531:
insert into utrtest values (2, 'qux');

-- Test the former case:
-- with a direct modification plan
--Testcase 532:
explain (verbose, costs off)
update utrtest set a = 1 returning *;
--Testcase 533:
update utrtest set a = 1 returning *;

--Testcase 534:
delete from utrtest;
--Testcase 535:
insert into utrtest values (1, 'foo');
--Testcase 536:
insert into utrtest values (2, 'qux');

-- with a non-direct modification plan
--Testcase 537:
explain (verbose, costs off)
update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
--Testcase 538:
update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;

-- Change the definition of utrtest so that the foreign partition get updated
-- after the local partition
--Testcase 539:
delete from utrtest;
alter table utrtest detach partition remp;
drop foreign table remp;
alter table loct drop constraint loct_a_check;
alter table loct add check (a in (3));
create foreign table remp (a int check (a in (3)), b text) server loopback options (table_name 'loct');
alter table utrtest attach partition remp for values in (3);
--Testcase 540:
insert into utrtest values (2, 'qux');
--Testcase 541:
insert into utrtest values (3, 'xyzzy');

-- Test the latter case:
-- with a direct modification plan
--Testcase 542:
explain (verbose, costs off)
update utrtest set a = 3 returning *;
--Testcase 543:
update utrtest set a = 3 returning *; -- ERROR

-- with a non-direct modification plan
--Testcase 544:
explain (verbose, costs off)
update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *;
--Testcase 545:
update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *; -- ERROR

drop table utrtest;
drop table loct;

-- Test copy tuple routing
create table ctrtest (a int, b text) partition by list (a);
create table loct1 (a int check (a in (1)), b text);
create foreign table remp1 (a int check (a in (1)), b text) server loopback options (table_name 'loct1');
create table loct2 (a int check (a in (2)), b text);
create foreign table remp2 (b text, a int check (a in (2))) server loopback options (table_name 'loct2');
alter table ctrtest attach partition remp1 for values in (1);
alter table ctrtest attach partition remp2 for values in (2);

copy ctrtest from stdin;
1	foo
2	qux
\.

--Testcase 546:
select tableoid::regclass, * FROM ctrtest;
--Testcase 547:
select tableoid::regclass, * FROM remp1;
--Testcase 548:
select tableoid::regclass, * FROM remp2;

-- Copying into foreign partitions directly should work as well
copy remp1 from stdin;
1	bar
\.

--Testcase 549:
select tableoid::regclass, * FROM remp1;

drop table ctrtest;
drop table loct1;
drop table loct2;
*/
-- ===================================================================
-- test COPY FROM
-- ===================================================================
/*
create table loc2 (f1 int, f2 text);
alter table loc2 set (autovacuum_enabled = 'false');
create foreign table rem2 (f1 int, f2 text) server loopback options(table_name 'loc2');

-- Test basic functionality
copy rem2 from stdin;
1	foo
2	bar
\.
--Testcase 550:
select * from rem2;

--Testcase 551:
delete from rem2;

-- Test check constraints
alter table loc2 add constraint loc2_f1positive check (f1 >= 0);
alter foreign table rem2 add constraint rem2_f1positive check (f1 >= 0);

-- check constraint is enforced on the remote side, not locally
copy rem2 from stdin;
1	foo
2	bar
\.
copy rem2 from stdin; -- ERROR
-1	xyzzy
\.
--Testcase 552:
select * from rem2;

alter foreign table rem2 drop constraint rem2_f1positive;
alter table loc2 drop constraint loc2_f1positive;

--Testcase 553:
delete from rem2;

-- Test local triggers
create trigger trig_stmt_before before insert on rem2
	for each statement execute procedure trigger_func();
create trigger trig_stmt_after after insert on rem2
	for each statement execute procedure trigger_func();
create trigger trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');

copy rem2 from stdin;
1	foo
2	bar
\.
--Testcase 554:
select * from rem2;

drop trigger trig_row_before on rem2;
drop trigger trig_row_after on rem2;
drop trigger trig_stmt_before on rem2;
drop trigger trig_stmt_after on rem2;

--Testcase 555:
delete from rem2;

create trigger trig_row_before_insert before insert on rem2
	for each row execute procedure trig_row_before_insupdate();

-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
1	foo
2	bar
\.
--Testcase 556:
select * from rem2;

drop trigger trig_row_before_insert on rem2;

--Testcase 557:
delete from rem2;

create trigger trig_null before insert on rem2
	for each row execute procedure trig_null();

-- Nothing happens
copy rem2 from stdin;
1	foo
2	bar
\.
--Testcase 558:
select * from rem2;

drop trigger trig_null on rem2;

--Testcase 559:
delete from rem2;

-- Test remote triggers
create trigger trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();

-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
1	foo
2	bar
\.
--Testcase 560:
select * from rem2;

drop trigger trig_row_before_insert on loc2;

--Testcase 561:
delete from rem2;

create trigger trig_null before insert on loc2
	for each row execute procedure trig_null();

-- Nothing happens
copy rem2 from stdin;
1	foo
2	bar
\.
--Testcase 562:
select * from rem2;

drop trigger trig_null on loc2;

--Testcase 563:
delete from rem2;

-- Test a combination of local and remote triggers
create trigger rem2_trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger rem2_trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger loc2_trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();

copy rem2 from stdin;
1	foo
2	bar
\.
--Testcase 564:
select * from rem2;

drop trigger rem2_trig_row_before on rem2;
drop trigger rem2_trig_row_after on rem2;
drop trigger loc2_trig_row_before_insert on loc2;

--Testcase 565:
delete from rem2;

-- test COPY FROM with foreign table created in the same transaction
create table loc3 (f1 int, f2 text);
begin;
create foreign table rem3 (f1 int, f2 text)
	server loopback options(table_name 'loc3');
copy rem3 from stdin;
1	foo
2	bar
\.
commit;
--Testcase 566:
select * from rem3;
drop foreign table rem3;
drop table loc3;
*/
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
CREATE SCHEMA import_influx1;
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO import_influx1;
--Testcase 567:
\det+ import_influx1.*
                               List of foreign tables
     Schema     |    Table    |    Server    |       FDW options       | Description 
----------------+-------------+--------------+-------------------------+-------------
 import_influx1 | T1          | influxdb_svr | ("table" 'T1')          | 
 import_influx1 | T2          | influxdb_svr | ("table" 'T2')          | 
 import_influx1 | T3          | influxdb_svr | ("table" 'T3')          | 
 import_influx1 | T4          | influxdb_svr | ("table" 'T4')          | 
 import_influx1 | T5          | influxdb_svr | ("table" 'T5')          | 
 import_influx1 | fprt1_p1    | influxdb_svr | ("table" 'fprt1_p1')    | 
 import_influx1 | fprt1_p2    | influxdb_svr | ("table" 'fprt1_p2')    | 
 import_influx1 | fprt2_p1    | influxdb_svr | ("table" 'fprt2_p1')    | 
 import_influx1 | fprt2_p2    | influxdb_svr | ("table" 'fprt2_p2')    | 
 import_influx1 | loct1       | influxdb_svr | ("table" 'loct1')       | 
 import_influx1 | loct1_1     | influxdb_svr | ("table" 'loct1_1')     | 
 import_influx1 | loct2       | influxdb_svr | ("table" 'loct2')       | 
 import_influx1 | loct2_1     | influxdb_svr | ("table" 'loct2_1')     | 
 import_influx1 | pagg_tab_p1 | influxdb_svr | ("table" 'pagg_tab_p1') | 
 import_influx1 | pagg_tab_p2 | influxdb_svr | ("table" 'pagg_tab_p2') | 
 import_influx1 | pagg_tab_p3 | influxdb_svr | ("table" 'pagg_tab_p3') | 
(16 rows)

--Testcase 568:
\d import_influx1.*
                        Foreign table "import_influx1.T1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 C1     | bigint                   |           |          |         | 
 c2     | bigint                   |           |          |         | 
 c3     | text                     |           |          |         | 
 c6     | text                     |           |          |         | 
 c7     | text                     |           |          |         | 
 c8     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T1')

                        Foreign table "import_influx1.T2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 C1     | bigint                   |           |          |         | 
 c2     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T2')

                        Foreign table "import_influx1.T3"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 c1     | bigint                   |           |          |         | 
 c2     | bigint                   |           |          |         | 
 c3     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T3')

                        Foreign table "import_influx1.T4"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 c1     | bigint                   |           |          |         | 
 c2     | bigint                   |           |          |         | 
 c3     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T4')

                        Foreign table "import_influx1.T5"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 c1     | bigint                   |           |          |         | 
 c2     | bigint                   |           |          |         | 
 c3     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T5')

                     Foreign table "import_influx1.fprt1_p1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'fprt1_p1')

                     Foreign table "import_influx1.fprt1_p2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'fprt1_p2')

                     Foreign table "import_influx1.fprt2_p1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'fprt2_p1')

                     Foreign table "import_influx1.fprt2_p2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'fprt2_p2')

                       Foreign table "import_influx1.loct1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'loct1')

                      Foreign table "import_influx1.loct1_1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 f1     | bigint                   |           |          |         | 
 f2     | bigint                   |           |          |         | 
 f3     | bigint                   |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'loct1_1')

                       Foreign table "import_influx1.loct2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'loct2')

                      Foreign table "import_influx1.loct2_1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 f1     | bigint                   |           |          |         | 
 f2     | bigint                   |           |          |         | 
 f3     | bigint                   |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'loct2_1')

                    Foreign table "import_influx1.pagg_tab_p1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'pagg_tab_p1')

                    Foreign table "import_influx1.pagg_tab_p2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'pagg_tab_p2')

                    Foreign table "import_influx1.pagg_tab_p3"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'pagg_tab_p3')

-- Check LIMIT TO and EXCEPT
CREATE SCHEMA import_influx2;
IMPORT FOREIGN SCHEMA public LIMIT TO ("T1", loct, nonesuch)
  FROM SERVER influxdb_svr INTO import_influx2;
--Testcase 569:
\det+ import_influx2.*
                        List of foreign tables
     Schema     | Table |    Server    |  FDW options   | Description 
----------------+-------+--------------+----------------+-------------
 import_influx2 | T1    | influxdb_svr | ("table" 'T1') | 
(1 row)

IMPORT FOREIGN SCHEMA public EXCEPT ("T1", loct, nonesuch)
  FROM SERVER influxdb_svr INTO import_influx2;
--Testcase 570:
\det+ import_influx2.*
                               List of foreign tables
     Schema     |    Table    |    Server    |       FDW options       | Description 
----------------+-------------+--------------+-------------------------+-------------
 import_influx2 | T1          | influxdb_svr | ("table" 'T1')          | 
 import_influx2 | T2          | influxdb_svr | ("table" 'T2')          | 
 import_influx2 | T3          | influxdb_svr | ("table" 'T3')          | 
 import_influx2 | T4          | influxdb_svr | ("table" 'T4')          | 
 import_influx2 | T5          | influxdb_svr | ("table" 'T5')          | 
 import_influx2 | fprt1_p1    | influxdb_svr | ("table" 'fprt1_p1')    | 
 import_influx2 | fprt1_p2    | influxdb_svr | ("table" 'fprt1_p2')    | 
 import_influx2 | fprt2_p1    | influxdb_svr | ("table" 'fprt2_p1')    | 
 import_influx2 | fprt2_p2    | influxdb_svr | ("table" 'fprt2_p2')    | 
 import_influx2 | loct1       | influxdb_svr | ("table" 'loct1')       | 
 import_influx2 | loct1_1     | influxdb_svr | ("table" 'loct1_1')     | 
 import_influx2 | loct2       | influxdb_svr | ("table" 'loct2')       | 
 import_influx2 | loct2_1     | influxdb_svr | ("table" 'loct2_1')     | 
 import_influx2 | pagg_tab_p1 | influxdb_svr | ("table" 'pagg_tab_p1') | 
 import_influx2 | pagg_tab_p2 | influxdb_svr | ("table" 'pagg_tab_p2') | 
 import_influx2 | pagg_tab_p3 | influxdb_svr | ("table" 'pagg_tab_p3') | 
(16 rows)

-- Assorted error cases
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO import_influx2;
ERROR:  relation "T1" already exists
CONTEXT:  importing foreign table "T1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER influxdb_svr INTO import_influx2; -- same as 'public'
ERROR:  relation "T1" already exists
CONTEXT:  importing foreign table "T1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER influxdb_svr INTO notthere;
ERROR:  schema "notthere" does not exist
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;
ERROR:  server "nowhere" does not exist
-- Check case of a type present only on the remote server.
-- We can fake this by dropping the type locally in our transaction.
CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
-- CREATE TABLE import_source.t5 (c1 int, c2 text collate "C", "Col" "Colors");
CREATE SCHEMA import_dest5;
BEGIN;
DROP TYPE "Colors" CASCADE;
--IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
--  FROM SERVER influxdb_svr INTO import_dest5;  -- ERROR
ROLLBACK;
-- BEGIN;
-- CREATE SERVER fetch101 FOREIGN DATA WRAPPER postgres_fdw OPTIONS( fetch_size '101' );
-- SELECT count(*)
-- FROM pg_foreign_server
-- WHERE srvname = 'fetch101'
-- AND srvoptions @> array['fetch_size=101'];
-- ALTER SERVER fetch101 OPTIONS( SET fetch_size '202' );
-- SELECT count(*)
-- FROM pg_foreign_server
-- WHERE srvname = 'fetch101'
-- AND srvoptions @> array['fetch_size=101'];
-- SELECT count(*)
-- FROM pg_foreign_server
-- WHERE srvname = 'fetch101'
-- AND srvoptions @> array['fetch_size=202'];
-- CREATE FOREIGN TABLE table30000 ( x int ) SERVER fetch101 OPTIONS ( fetch_size '30000' );
-- SELECT COUNT(*)
-- FROM pg_foreign_table
-- WHERE ftrelid = 'table30000'::regclass
-- AND ftoptions @> array['fetch_size=30000'];
-- ALTER FOREIGN TABLE table30000 OPTIONS ( SET fetch_size '60000');
-- SELECT COUNT(*)
-- FROM pg_foreign_table
-- WHERE ftrelid = 'table30000'::regclass
-- AND ftoptions @> array['fetch_size=30000'];
-- SELECT COUNT(*)
-- FROM pg_foreign_table
-- WHERE ftrelid = 'table30000'::regclass
-- AND ftoptions @> array['fetch_size=60000'];
-- ROLLBACK;
-- ===================================================================
-- test partitionwise joins
-- ===================================================================
SET enable_partitionwise_join=on;
CREATE TABLE fprt1 (a int, b int, c text) PARTITION BY RANGE(a);
CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
	SERVER influxdb_svr OPTIONS (table 'fprt1_p1');
CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
	SERVER influxdb_svr OPTIONS (TABLE 'fprt1_p2');
-- SELECT * FROM ftprt1_p1 OFFSET 100 LIMIT 50;
-- SELECT * FROM ftprt1_p2 OFFSET 100 LIMIT 50;
CREATE TABLE fprt2 (a int, b int, c text) PARTITION BY RANGE(b);
CREATE FOREIGN TABLE ftprt2_p1 (a int, b int, c text)
	SERVER influxdb_svr OPTIONS (table 'fprt2_p1');
ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1 FOR VALUES FROM (0) TO (250);
CREATE FOREIGN TABLE ftprt2_p2 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
	SERVER influxdb_svr OPTIONS (table 'fprt2_p2');
-- ANALYZE fprt2;
-- ANALYZE fprt2_p1;
-- ANALYZE fprt2_p2;
-- inner join three tables
--Testcase 571:
EXPLAIN (COSTS OFF)
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: t1.a, t3.c
   ->  Append
         ->  Hash Join
               Hash Cond: (t2.b = t1.a)
               ->  Foreign Scan on ftprt2_p1 t2
               ->  Hash
                     ->  Hash Join
                           Hash Cond: (t3.a = t1.a)
                           ->  Foreign Scan on ftprt1_p1 t3
                           ->  Hash
                                 ->  Foreign Scan on ftprt1_p1 t1
         ->  Hash Join
               Hash Cond: (t2_1.b = t1_1.a)
               ->  Foreign Scan on ftprt2_p2 t2_1
               ->  Hash
                     ->  Hash Join
                           Hash Cond: (t3_1.a = t1_1.a)
                           ->  Foreign Scan on ftprt1_p2 t3_1
                           ->  Hash
                                 ->  Foreign Scan on ftprt1_p2 t1_1
(21 rows)

--Testcase 572:
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
  a  |  b  |  c   
-----+-----+------
   0 |   0 | 0000
 150 | 150 | 0003
 250 | 250 | 0005
 400 | 400 | 0008
(4 rows)

-- left outer join + nullable clause
--Testcase 573:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Output: t1.a, ftprt2_p1.b, ftprt2_p1.c
   Sort Key: t1.a, ftprt2_p1.b, ftprt2_p1.c
   ->  Merge Left Join
         Output: t1.a, ftprt2_p1.b, ftprt2_p1.c
         Merge Cond: ((t1.a = ftprt2_p1.b) AND (t1.b = ftprt2_p1.a))
         ->  Sort
               Output: t1.a, t1.b
               Sort Key: t1.a, t1.b
               ->  Foreign Scan on public.ftprt1_p1 t1
                     Output: t1.a, t1.b
                     InfluxDB query: SELECT "a", "b" FROM "fprt1_p1" WHERE (("a" < 10))
         ->  Sort
               Output: ftprt2_p1.b, ftprt2_p1.c, ftprt2_p1.a
               Sort Key: ftprt2_p1.b, ftprt2_p1.a
               ->  Foreign Scan on public.ftprt2_p1
                     Output: ftprt2_p1.b, ftprt2_p1.c, ftprt2_p1.a
                     InfluxDB query: SELECT "a", "b", "c" FROM "fprt2_p1" WHERE (("a" < 10))
(18 rows)

--Testcase 574:
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
 a | b |  c   
---+---+------
 0 | 0 | 0000
 2 |   | 
 4 |   | 
 6 | 6 | 0000
 8 |   | 
(5 rows)

-- with whole-row reference; partitionwise join does not apply
--Testcase 575:
EXPLAIN (COSTS OFF)
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
                       QUERY PLAN                       
--------------------------------------------------------
 Sort
   Sort Key: ((t1.*)::fprt1), ((t2.*)::fprt2)
   ->  Hash Full Join
         Hash Cond: (t1.a = t2.b)
         ->  Append
               ->  Foreign Scan on ftprt1_p1 t1
               ->  Foreign Scan on ftprt1_p2 t1_1
         ->  Hash
               ->  Append
                     ->  Foreign Scan on ftprt2_p1 t2
                     ->  Foreign Scan on ftprt2_p2 t2_1
(11 rows)

--Testcase 576:
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
       wr       |       wr       
----------------+----------------
 (0,0,0000)     | (0,0,0000)
 (50,50,0001)   | 
 (100,100,0002) | 
 (150,150,0003) | (150,150,0003)
 (200,200,0004) | 
 (250,250,0005) | (250,250,0005)
 (300,300,0006) | 
 (350,350,0007) | 
 (400,400,0008) | (400,400,0008)
 (450,450,0009) | 
                | (75,75,0001)
                | (225,225,0004)
                | (325,325,0006)
                | (475,475,0009)
(14 rows)

-- join with lateral reference
--Testcase 577:
EXPLAIN (COSTS OFF)
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: t1.a, t1.b
   ->  Append
         ->  Hash Join
               Hash Cond: ((t2.b = t1.a) AND (t2.a = t1.b))
               ->  Foreign Scan on ftprt2_p1 t2
               ->  Hash
                     ->  Foreign Scan on ftprt1_p1 t1
         ->  Hash Join
               Hash Cond: ((t2_1.b = t1_1.a) AND (t2_1.a = t1_1.b))
               ->  Foreign Scan on ftprt2_p2 t2_1
               ->  Hash
                     ->  Foreign Scan on ftprt1_p2 t1_1
(13 rows)

--Testcase 578:
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
  a  |  b  
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

-- with PHVs, partitionwise join selected but no join pushdown
--Testcase 579:
EXPLAIN (COSTS OFF)
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
                      QUERY PLAN                      
------------------------------------------------------
 Sort
   Sort Key: ftprt1_p1.a, ftprt2_p1.b
   ->  Append
         ->  Hash Full Join
               Hash Cond: (ftprt1_p1.a = ftprt2_p1.b)
               ->  Foreign Scan on ftprt1_p1
               ->  Hash
                     ->  Foreign Scan on ftprt2_p1
         ->  Hash Full Join
               Hash Cond: (ftprt1_p2.a = ftprt2_p2.b)
               ->  Foreign Scan on ftprt1_p2
               ->  Hash
                     ->  Foreign Scan on ftprt2_p2
(13 rows)

--Testcase 580:
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
  a  |  phv   |  b  |  phv   
-----+--------+-----+--------
   0 | t1_phv |   0 | t2_phv
  50 | t1_phv |     | 
 100 | t1_phv |     | 
 150 | t1_phv | 150 | t2_phv
 200 | t1_phv |     | 
 250 | t1_phv | 250 | t2_phv
 300 | t1_phv |     | 
 350 | t1_phv |     | 
 400 | t1_phv | 400 | t2_phv
 450 | t1_phv |     | 
     |        |  75 | t2_phv
     |        | 225 | t2_phv
     |        | 325 | t2_phv
     |        | 475 | t2_phv
(14 rows)

-- test FOR UPDATE; partitionwise join does not apply
--Testcase 581:
EXPLAIN (COSTS OFF)
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
                          QUERY PLAN                          
--------------------------------------------------------------
 LockRows
   ->  Sort
         Sort Key: t1.a
         ->  Hash Join
               Hash Cond: (t2.b = t1.a)
               ->  Append
                     ->  Foreign Scan on ftprt2_p1 t2
                     ->  Foreign Scan on ftprt2_p2 t2_1
               ->  Hash
                     ->  Append
                           ->  Foreign Scan on ftprt1_p1 t1
                           ->  Foreign Scan on ftprt1_p2 t1_1
(12 rows)

--Testcase 582:
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
  a  |  b  
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

RESET enable_partitionwise_join;
-- ===================================================================
-- test partitionwise aggregates
-- ===================================================================
CREATE TABLE pagg_tab (t int, a int, b int, c text) PARTITION BY RANGE(a);
-- Create foreign partitions
CREATE FOREIGN TABLE fpagg_tab_p1 PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10) SERVER influxdb_svr OPTIONS (table 'pagg_tab_p1');
CREATE FOREIGN TABLE fpagg_tab_p2 PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20) SERVER influxdb_svr OPTIONS (table 'pagg_tab_p2');;
CREATE FOREIGN TABLE fpagg_tab_p3 PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30) SERVER influxdb_svr2 OPTIONS (table 'pagg_tab_p3');;
-- ANALYZE pagg_tab;
-- ANALYZE fpagg_tab_p1;
-- ANALYZE fpagg_tab_p2;
-- ANALYZE fpagg_tab_p3;
-- When GROUP BY clause matches with PARTITION KEY.
-- Plan with partitionwise aggregates is disabled
SET enable_partitionwise_aggregate TO false;
--Testcase 583:
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                      QUERY PLAN                       
-------------------------------------------------------
 Sort
   Sort Key: fpagg_tab_p1.a
   ->  HashAggregate
         Group Key: fpagg_tab_p1.a
         Filter: (avg(fpagg_tab_p1.b) < '22'::numeric)
         ->  Append
               ->  Foreign Scan on fpagg_tab_p1
               ->  Foreign Scan on fpagg_tab_p2
               ->  Foreign Scan on fpagg_tab_p3
(9 rows)

-- Plan with partitionwise aggregates is enabled
SET enable_partitionwise_aggregate TO true;
--Testcase 584:
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Sort Key: fpagg_tab_p1.a
   ->  Append
         ->  HashAggregate
               Group Key: fpagg_tab_p1.a
               Filter: (avg(fpagg_tab_p1.b) < '22'::numeric)
               ->  Foreign Scan on fpagg_tab_p1
         ->  HashAggregate
               Group Key: fpagg_tab_p2.a
               Filter: (avg(fpagg_tab_p2.b) < '22'::numeric)
               ->  Foreign Scan on fpagg_tab_p2
         ->  HashAggregate
               Group Key: fpagg_tab_p3.a
               Filter: (avg(fpagg_tab_p3.b) < '22'::numeric)
               ->  Foreign Scan on fpagg_tab_p3
(15 rows)

--Testcase 585:
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | sum  | min | count 
----+------+-----+-------
  0 | 2000 |   0 |   100
  1 | 2100 |   1 |   100
 10 | 2000 |   0 |   100
 11 | 2100 |   1 |   100
 20 | 2000 |   0 |   100
 21 | 2100 |   1 |   100
(6 rows)

-- Check with whole-row reference
-- Should have all the columns in the target list for the given relation
--Testcase 586:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Output: t1.a, (count(((t1.*)::pagg_tab)))
   Sort Key: t1.a
   ->  Append
         ->  HashAggregate
               Output: t1.a, count(((t1.*)::pagg_tab))
               Group Key: t1.a
               Filter: (avg(t1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p1 t1
                     Output: t1.a, t1.*, t1.b
                     InfluxDB query: SELECT "t", "a", "b", "c" FROM "pagg_tab_p1"
         ->  HashAggregate
               Output: t1_1.a, count(((t1_1.*)::pagg_tab))
               Group Key: t1_1.a
               Filter: (avg(t1_1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p2 t1_1
                     Output: t1_1.a, t1_1.*, t1_1.b
                     InfluxDB query: SELECT "t", "a", "b", "c" FROM "pagg_tab_p2"
         ->  HashAggregate
               Output: t1_2.a, count(((t1_2.*)::pagg_tab))
               Group Key: t1_2.a
               Filter: (avg(t1_2.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p3 t1_2
                     Output: t1_2.a, t1_2.*, t1_2.b
                     InfluxDB query: SELECT "t", "a", "b", "c" FROM "pagg_tab_p3"
(25 rows)

--Testcase 587:
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | count 
----+-------
  0 |   100
  1 |   100
 10 |   100
 11 |   100
 20 |   100
 21 |   100
(6 rows)

-- When GROUP BY clause does not match with PARTITION KEY.
--Testcase 588:
EXPLAIN (COSTS OFF)
SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
                      QUERY PLAN                      
------------------------------------------------------
 Finalize GroupAggregate
   Group Key: fpagg_tab_p1.b
   Filter: (sum(fpagg_tab_p1.a) < 700)
   ->  Sort
         Sort Key: fpagg_tab_p1.b
         ->  Append
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p1.b
                     ->  Foreign Scan on fpagg_tab_p1
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p2.b
                     ->  Foreign Scan on fpagg_tab_p2
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p3.b
                     ->  Foreign Scan on fpagg_tab_p3
(15 rows)

-- Clean-up
DROP USER MAPPING FOR public SERVER testserver1;
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr;
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr2;
DROP SERVER testserver1 CASCADE;
DROP SERVER influxdb_svr CASCADE;
NOTICE:  drop cascades to 61 other objects
DETAIL:  drop cascades to foreign table "S 1"."T1"
drop cascades to foreign table "S 1"."T2"
drop cascades to foreign table "S 1"."T3"
drop cascades to foreign table "S 1"."T4"
drop cascades to foreign table "S 1"."T5"
drop cascades to foreign table "S 1".fprt1_p1
drop cascades to foreign table "S 1".fprt1_p2
drop cascades to foreign table "S 1".fprt2_p1
drop cascades to foreign table "S 1".fprt2_p2
drop cascades to foreign table "S 1".loct1
drop cascades to foreign table "S 1".loct1_1
drop cascades to foreign table "S 1".loct2
drop cascades to foreign table "S 1".loct2_1
drop cascades to foreign table "S 1".pagg_tab_p1
drop cascades to foreign table "S 1".pagg_tab_p2
drop cascades to foreign table "S 1".pagg_tab_p3
drop cascades to foreign table ft1
drop cascades to foreign table ft2
drop cascades to foreign table ft4
drop cascades to foreign table ft5
drop cascades to foreign table ft3
drop cascades to foreign table foo2
drop cascades to foreign table bar2
drop cascades to foreign table import_influx1."T1"
drop cascades to foreign table import_influx1."T2"
drop cascades to foreign table import_influx1."T3"
drop cascades to foreign table import_influx1."T4"
drop cascades to foreign table import_influx1."T5"
drop cascades to foreign table import_influx1.fprt1_p1
drop cascades to foreign table import_influx1.fprt1_p2
drop cascades to foreign table import_influx1.fprt2_p1
drop cascades to foreign table import_influx1.fprt2_p2
drop cascades to foreign table import_influx1.loct1
drop cascades to foreign table import_influx1.loct1_1
drop cascades to foreign table import_influx1.loct2
drop cascades to foreign table import_influx1.loct2_1
drop cascades to foreign table import_influx1.pagg_tab_p1
drop cascades to foreign table import_influx1.pagg_tab_p2
drop cascades to foreign table import_influx1.pagg_tab_p3
drop cascades to foreign table import_influx2."T1"
drop cascades to foreign table import_influx2."T2"
drop cascades to foreign table import_influx2."T3"
drop cascades to foreign table import_influx2."T4"
drop cascades to foreign table import_influx2."T5"
drop cascades to foreign table import_influx2.fprt1_p1
drop cascades to foreign table import_influx2.fprt1_p2
drop cascades to foreign table import_influx2.fprt2_p1
drop cascades to foreign table import_influx2.fprt2_p2
drop cascades to foreign table import_influx2.loct1
drop cascades to foreign table import_influx2.loct1_1
drop cascades to foreign table import_influx2.loct2
drop cascades to foreign table import_influx2.loct2_1
drop cascades to foreign table import_influx2.pagg_tab_p1
drop cascades to foreign table import_influx2.pagg_tab_p2
drop cascades to foreign table import_influx2.pagg_tab_p3
drop cascades to foreign table ftprt1_p1
drop cascades to foreign table ftprt1_p2
drop cascades to foreign table ftprt2_p1
drop cascades to foreign table ftprt2_p2
drop cascades to foreign table fpagg_tab_p1
drop cascades to foreign table fpagg_tab_p2
DROP SERVER influxdb_svr2 CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to foreign table ft6
drop cascades to foreign table fpagg_tab_p3
DROP EXTENSION influxdb_fdw CASCADE;
