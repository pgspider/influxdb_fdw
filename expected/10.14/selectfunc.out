SET datestyle=ISO;
SET timezone='Japan';
\set ECHO none
--Testcase 1:
CREATE EXTENSION influxdb_fdw;
--Testcase 2:
CREATE SERVER server1 FOREIGN DATA WRAPPER influxdb_fdw OPTIONS
(dbname 'mydb2', host :INFLUXDB_HOST, port :INFLUXDB_PORT);
--Testcase 3:
CREATE USER MAPPING FOR CURRENT_USER SERVER server1 OPTIONS (user :INFLUXDB_USER, password :INFLUXDB_PASS);
--IMPORT FOREIGN SCHEMA public FROM SERVER server1 INTO public OPTIONS(import_time_text 'false');
--Testcase 4:
CREATE FOREIGN TABLE s3(time timestamp with time zone, tag1 text, value1 float8, value2 bigint, value3 float8, value4 bigint) SERVER server1 OPTIONS(table 's3', tags 'tag1');
-- s3 (value1 as float8, value2 as bigint)
--Testcase 5:
\d s3;
                            Foreign table "public.s3"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 tag1   | text                     |           |          |         | 
 value1 | double precision         |           |          |         | 
 value2 | bigint                   |           |          |         | 
 value3 | double precision         |           |          |         | 
 value4 | bigint                   |           |          |         | 
Server: server1
FDW options: ("table" 's3', tags 'tag1')

--Testcase 6:
SELECT * FROM s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 | a    |    0.1 |    100 |   -0.1 |   -100
 1970-01-01 09:00:01+09 | a    |    0.2 |    100 |   -0.2 |   -100
 1970-01-01 09:00:02+09 | a    |    0.3 |    100 |   -0.3 |   -100
 1970-01-01 09:00:03+09 | b    |    1.1 |    200 |   -1.1 |   -200
 1970-01-01 09:00:04+09 | b    |    2.2 |    200 |   -2.2 |   -200
 1970-01-01 09:00:05+09 | b    |    3.3 |    200 |   -3.3 |   -200
(6 rows)

-- select float8() (not pushdown, remove float8, explain)
--Testcase 7:
EXPLAIN VERBOSE
SELECT float8(value1), float8(value2), float8(value3), float8(value4) FROM s3;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=10.00..1469.31 rows=1462 width=32)
   Output: value1, float8(value2), value3, float8(value4)
   InfluxDB query: SELECT "value1", "value2", "value3", "value4" FROM "s3"
(3 rows)

-- select float8() (not pushdown, remove float8, result)
--Testcase 8:
SELECT float8(value1), float8(value2), float8(value3), float8(value4) FROM s3;
 float8 | float8 | float8 | float8 
--------+--------+--------+--------
    0.1 |    100 |   -0.1 |   -100
    0.2 |    100 |   -0.2 |   -100
    0.3 |    100 |   -0.3 |   -100
    1.1 |    200 |   -1.1 |   -200
    2.2 |    200 |   -2.2 |   -200
    3.3 |    200 |   -3.3 |   -200
(6 rows)

-- select sqrt (builtin function, explain)
--Testcase 9:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2) FROM s3;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2063.36 rows=2048 width=16)
   Output: (sqrt(value1)), (sqrt((value2)::double precision))
   InfluxDB query: SELECT sqrt("value1"), sqrt("value2") FROM "s3"
(3 rows)

-- select sqrt (builtin function, result)
--Testcase 10:
SELECT sqrt(value1), sqrt(value2) FROM s3;
       sqrt        |      sqrt       
-------------------+-----------------
 0.316227766016838 |              10
 0.447213595499958 |              10
 0.547722557505166 |              10
  1.04880884817015 | 14.142135623731
  1.48323969741913 | 14.142135623731
  1.81659021245849 | 14.142135623731
(6 rows)

-- select sqrt (builtin function, not pushdown constraints, explain)
--Testcase 11:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2) FROM s3 WHERE to_hex(value2) != '64';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2053.28 rows=2038 width=16)
   Output: (sqrt(value1)), (sqrt((value2)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT sqrt("value1"), sqrt("value2"), "value2" FROM "s3"
(4 rows)

-- select sqrt (builtin function, not pushdown constraints, result)
--Testcase 12:
SELECT sqrt(value1), sqrt(value2) FROM s3 WHERE to_hex(value2) != '64';
       sqrt       |      sqrt       
------------------+-----------------
 1.04880884817015 | 14.142135623731
 1.48323969741913 | 14.142135623731
 1.81659021245849 | 14.142135623731
(3 rows)

-- select sqrt (builtin function, pushdown constraints, explain)
--Testcase 13:
EXPLAIN VERBOSE
SELECT sqrt(value1), sqrt(value2) FROM s3 WHERE value2 != 200;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2053.28 rows=2038 width=16)
   Output: (sqrt(value1)), (sqrt((value2)::double precision))
   InfluxDB query: SELECT sqrt("value1"), sqrt("value2") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select sqrt (builtin function, pushdown constraints, result)
--Testcase 14:
SELECT sqrt(value1), sqrt(value2) FROM s3 WHERE value2 != 200;
       sqrt        | sqrt 
-------------------+------
 0.316227766016838 |   10
 0.447213595499958 |   10
 0.547722557505166 |   10
(3 rows)

-- select sqrt(*) (stub agg function, explain)
--Testcase 419:
EXPLAIN VERBOSE
SELECT sqrt_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (sqrt_all())
   InfluxDB query: SELECT sqrt(*) FROM "s3"
(3 rows)

-- select sqrt(*) (stub agg function, result)
--Testcase 420:
SELECT sqrt_all() from s3;
                            sqrt_all                             
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.31622776601683794,10,,)
 (1970-01-01T00:00:01Z,,0.4472135954999579,10,,)
 (1970-01-01T00:00:02Z,,0.5477225575051661,10,,)
 (1970-01-01T00:00:03Z,,1.0488088481701516,14.142135623730951,,)
 (1970-01-01T00:00:04Z,,1.4832396974191326,14.142135623730951,,)
 (1970-01-01T00:00:05Z,,1.816590212458495,14.142135623730951,,)
(6 rows)

-- select sqrt(*) (stub agg function and group by tag only) (explain)
--Testcase 421:
EXPLAIN VERBOSE
SELECT sqrt_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (sqrt_all()), tag1
   InfluxDB query: SELECT sqrt(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select sqrt(*) (stub agg function and group by tag only) (result)
--Testcase 422:
SELECT sqrt_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                            sqrt_all                             
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.31622776601683794,10,,)
 (1970-01-01T00:00:01Z,,0.4472135954999579,10,,)
 (1970-01-01T00:00:02Z,,0.5477225575051661,10,,)
 (1970-01-01T00:00:03Z,,1.0488088481701516,14.142135623730951,,)
 (1970-01-01T00:00:04Z,,1.4832396974191326,14.142135623730951,,)
(5 rows)

-- select abs (builtin function, explain)
--Testcase 15:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.62 rows=1462 width=32)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   InfluxDB query: SELECT abs("value1"), abs("value2"), abs("value3"), abs("value4") FROM "s3"
(3 rows)

-- ABS() returns negative values if integer (https://github.com/influxdata/influxdb/issues/10261)
-- select abs (builtin function, result)
--Testcase 16:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(6 rows)

-- select abs (builtin function, not pushdown constraints, explain)
--Testcase 17:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64';
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1469.55 rows=1455 width=32)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT abs("value1"), abs("value2"), abs("value3"), abs("value4"), "value2" FROM "s3"
(4 rows)

-- select abs (builtin function, not pushdown constraints, result)
--Testcase 18:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE to_hex(value2) != '64';
 abs | abs | abs | abs 
-----+-----+-----+-----
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(3 rows)

-- select abs (builtin function, pushdown constraints, explain)
--Testcase 19:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1469.55 rows=1455 width=32)
   Output: (abs(value1)), (abs(value2)), (abs(value3)), (abs(value4))
   InfluxDB query: SELECT abs("value1"), abs("value2"), abs("value3"), abs("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select abs (builtin function, pushdown constraints, result)
--Testcase 20:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM s3 WHERE value2 != 200;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
(3 rows)

-- select log (builtin function, need to swap arguments, numeric cast, explain)
-- log_<base>(v) : postgresql (base, v), influxdb (v, base)
--Testcase 21:
EXPLAIN VERBOSE
SELECT log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2053.28 rows=2038 width=32)
   Output: (log((value1)::numeric, (value2)::numeric))
   InfluxDB query: SELECT log("value2", "value1") FROM "s3" WHERE (("value1" <> 1))
(3 rows)

-- select log (builtin function, need to swap arguments, numeric cast, result)
--Testcase 22:
SELECT log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1;
         log         
---------------------
 -2.0000000000000004
 -2.8613531161467867
  -3.824978578786397
  55.590256753535286
   6.719852756654074
    4.43773989221174
(6 rows)

-- select log (builtin function, need to swap arguments, float8, explain)
--Testcase 23:
EXPLAIN VERBOSE
SELECT log(value1::numeric, 0.1) FROM s3 WHERE value1 != 1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2559.74 rows=2547 width=32)
   Output: (log((value1)::numeric, 0.1))
   InfluxDB query: SELECT log(0.1, "value1") FROM "s3" WHERE (("value1" <> 1))
(3 rows)

-- select log (builtin function, need to swap arguments, float8, result)
--Testcase 24:
SELECT log(value1::numeric, 0.1) FROM s3 WHERE value1 != 1;
         log         
---------------------
                   1
   1.430676558073393
   1.912489289393198
 -24.158857928096783
   -2.92036730043365
 -1.9285884584617043
(6 rows)

-- select log (builtin function, need to swap arguments, bigint, explain)
--Testcase 25:
EXPLAIN VERBOSE
SELECT log(value2::numeric, 3::numeric) FROM s3 WHERE value1 != 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2559.74 rows=2547 width=32)
   Output: (log((value2)::numeric, '3'::numeric))
   InfluxDB query: SELECT log(3, "value2") FROM "s3" WHERE (("value1" <> 1))
(3 rows)

-- select log (builtin function, need to swap arguments, bigint, result)
--Testcase 26:
SELECT log(value2::numeric, 3::numeric) FROM s3 WHERE value1 != 1;
         log         
---------------------
 0.23856062735983116
 0.23856062735983116
 0.23856062735983116
  0.2073511669203535
  0.2073511669203535
  0.2073511669203535
(6 rows)

-- select log (builtin function, need to swap arguments, mix type, explain)
--Testcase 27:
EXPLAIN VERBOSE
SELECT log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2053.28 rows=2038 width=32)
   Output: (log((value1)::numeric, (value2)::numeric))
   InfluxDB query: SELECT log("value2", "value1") FROM "s3" WHERE (("value1" <> 1))
(3 rows)

-- select log (builtin function, need to swap arguments, mix type, result)
--Testcase 28:
SELECT log(value1::numeric, value2::numeric) FROM s3 WHERE value1 != 1;
         log         
---------------------
 -2.0000000000000004
 -2.8613531161467867
  -3.824978578786397
  55.590256753535286
   6.719852756654074
    4.43773989221174
(6 rows)

-- select log(*) (stub agg function, explain)
--Testcase 423:
EXPLAIN VERBOSE
SELECT log_all(50) FROM s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (log_all('50'::double precision))
   InfluxDB query: SELECT log(*, 50) FROM "s3"
(3 rows)

-- select log(*) (stub agg function, result)
--Testcase 424:
SELECT log_all(50) FROM s3;
                              log_all                              
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.5885919100677789,1.177183820135558,,)
 (1970-01-01T00:00:01Z,,-0.41140808993222105,1.177183820135558,,)
 (1970-01-01T00:00:02Z,,-0.3077621994183976,1.177183820135558,,)
 (1970-01-01T00:00:03Z,,0.024363399620113902,1.3543676402711158,,)
 (1970-01-01T00:00:04Z,,0.20154721975567183,1.3543676402711158,,)
 (1970-01-01T00:00:05Z,,0.3051931102694953,1.3543676402711158,,)
(6 rows)

-- select log(*) (stub agg function, explain)
--Testcase 869:
EXPLAIN VERBOSE
SELECT log_all(70.5) FROM s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (log_all('70.5'::double precision))
   InfluxDB query: SELECT log(*, 70.5) FROM "s3"
(3 rows)

-- select log(*) (stub agg function, result)
--Testcase 870:
SELECT log_all(70.5) FROM s3;
                              log_all                              
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.5410701701500463,1.0821403403000929,,)
 (1970-01-01T00:00:01Z,,-0.3781918191758683,1.0821403403000929,,)
 (1970-01-01T00:00:02Z,,-0.28291409167667503,1.0821403403000929,,)
 (1970-01-01T00:00:03Z,,0.02239634720152814,1.2450186912742707,,)
 (1970-01-01T00:00:04Z,,0.18527469817570616,1.2450186912742707,,)
 (1970-01-01T00:00:05Z,,0.28055242567489946,1.2450186912742707,,)
(6 rows)

-- select log(*) (stub agg function and group by tag only) (explain)
--Testcase 425:
EXPLAIN VERBOSE
SELECT log_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (log_all('50'::double precision)), tag1
   InfluxDB query: SELECT log(*, 50) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select log(*) (stub agg function and group by tag only) (result)
--Testcase 426:
SELECT log_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                              log_all                              
-------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.5885919100677789,1.177183820135558,,)
 (1970-01-01T00:00:01Z,,-0.41140808993222105,1.177183820135558,,)
 (1970-01-01T00:00:02Z,,-0.3077621994183976,1.177183820135558,,)
 (1970-01-01T00:00:03Z,,0.024363399620113902,1.3543676402711158,,)
 (1970-01-01T00:00:04Z,,0.20154721975567183,1.3543676402711158,,)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 427:
SELECT ln_all(),log10_all(),log_all(50) FROM s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub ln_all() is called
CONTEXT:  PL/pgSQL function ln_all() line 3 at RAISE
-- select log2 (stub function, explain)
--Testcase 29:
EXPLAIN VERBOSE
SELECT log2(value1),log2(value2) FROM s3;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3077.12 rows=2048 width=16)
   Output: (log2(value1)), (log2((value2)::double precision))
   InfluxDB query: SELECT log2("value1"), log2("value2") FROM "s3"
(3 rows)

-- select log2 (stub function, result)
--Testcase 30:
SELECT log2(value1),log2(value2) FROM s3;
       log2        |       log2       
-------------------+------------------
 -3.32192809488736 | 6.64385618977472
 -2.32192809488736 | 6.64385618977472
 -1.73696559416621 | 6.64385618977472
 0.137503523749935 | 7.64385618977472
  1.13750352374994 | 7.64385618977472
  1.72246602447109 | 7.64385618977472
(6 rows)

-- select log2(*) (stub agg function, explain)
--Testcase 428:
EXPLAIN VERBOSE
SELECT log2_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (log2_all())
   InfluxDB query: SELECT log2(*) FROM "s3"
(3 rows)

-- select log2(*) (stub agg function, result)
--Testcase 429:
SELECT log2_all() from s3;
                            log2_all                             
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-3.321928094887362,6.643856189774724,,)
 (1970-01-01T00:00:01Z,,-2.321928094887362,6.643856189774724,,)
 (1970-01-01T00:00:02Z,,-1.736965594166206,6.643856189774724,,)
 (1970-01-01T00:00:03Z,,0.13750352374993502,7.643856189774724,,)
 (1970-01-01T00:00:04Z,,1.1375035237499351,7.643856189774724,,)
 (1970-01-01T00:00:05Z,,1.722466024471091,7.643856189774724,,)
(6 rows)

-- select log2(*) (stub agg function and group by tag only) (explain)
--Testcase 430:
EXPLAIN VERBOSE
SELECT log2_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (log2_all()), tag1
   InfluxDB query: SELECT log2(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select log2(*) (stub agg function and group by tag only) (result)
--Testcase 431:
SELECT log2_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                            log2_all                             
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-3.321928094887362,6.643856189774724,,)
 (1970-01-01T00:00:01Z,,-2.321928094887362,6.643856189774724,,)
 (1970-01-01T00:00:02Z,,-1.736965594166206,6.643856189774724,,)
 (1970-01-01T00:00:03Z,,0.13750352374993502,7.643856189774724,,)
 (1970-01-01T00:00:04Z,,1.1375035237499351,7.643856189774724,,)
(5 rows)

-- select log10 (stub function, explain)
--Testcase 104:
EXPLAIN VERBOSE
SELECT log10(value1),log10(value2) FROM s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3077.12 rows=2048 width=16)
   Output: (log10(value1)), (log10((value2)::double precision))
   InfluxDB query: SELECT log10("value1"), log10("value2") FROM "s3"
(3 rows)

-- select log10 (stub function, result)
--Testcase 105:
SELECT log10(value1),log10(value2) FROM s3;
       log10        |      log10       
--------------------+------------------
                 -1 |                2
 -0.698970004336019 |                2
 -0.522878745280338 |                2
 0.0413926851582251 | 2.30102999566398
  0.342422680822206 | 2.30102999566398
  0.518513939877888 | 2.30102999566398
(6 rows)

-- select log10(*) (stub agg function, explain)
--Testcase 106:
EXPLAIN VERBOSE
SELECT log10_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (log10_all())
   InfluxDB query: SELECT log10(*) FROM "s3"
(3 rows)

-- select log10(*) (stub agg function, result)
--Testcase 107:
SELECT log10_all() from s3;
                            log10_all                            
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.9999999999999999,2,,)
 (1970-01-01T00:00:01Z,,-0.6989700043360187,2,,)
 (1970-01-01T00:00:02Z,,-0.5228787452803376,2,,)
 (1970-01-01T00:00:03Z,,0.04139268515822507,2.301029995663981,,)
 (1970-01-01T00:00:04Z,,0.3424226808222063,2.301029995663981,,)
 (1970-01-01T00:00:05Z,,0.5185139398778875,2.301029995663981,,)
(6 rows)

-- select log10(*) (stub agg function and group by tag only) (explain)
--Testcase 108:
EXPLAIN VERBOSE
SELECT log10_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (log10_all()), tag1
   InfluxDB query: SELECT log10(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select log10(*) (stub agg function and group by tag only) (result)
--Testcase 109:
SELECT log10_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                            log10_all                            
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-0.9999999999999999,2,,)
 (1970-01-01T00:00:01Z,,-0.6989700043360187,2,,)
 (1970-01-01T00:00:02Z,,-0.5228787452803376,2,,)
 (1970-01-01T00:00:03Z,,0.04139268515822507,2.301029995663981,,)
 (1970-01-01T00:00:04Z,,0.3424226808222063,2.301029995663981,,)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 110:
SELECT log2_all(), log10_all() FROM s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub log2_all() is called
CONTEXT:  PL/pgSQL function log2_all() line 3 at RAISE
-- select spread (stub agg function, explain)
--Testcase 31:
EXPLAIN VERBOSE
SELECT spread(value1),spread(value2),spread(value3),spread(value4) FROM s3;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (spread(value1)), (spread(value2)), (spread(value3)), (spread(value4))
   InfluxDB query: SELECT spread("value1"), spread("value2"), spread("value3"), spread("value4") FROM "s3"
(3 rows)

-- select spread (stub agg function, result)
--Testcase 32:
SELECT spread(value1),spread(value2),spread(value3),spread(value4) FROM s3;
 spread | spread | spread | spread 
--------+--------+--------+--------
    3.2 |    100 |    3.2 |    100
(1 row)

-- select spread (stub agg function, raise exception if not expected type)
--Testcase 33:
SELECT spread(value1::numeric),spread(value2::numeric),spread(value3::numeric),spread(value4::numeric) FROM s3;
ERROR:  stub spread_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function spread_sfunc(double precision,double precision) line 3 at RAISE
-- select abs as nest function with agg (pushdown, explain)
--Testcase 34:
EXPLAIN VERBOSE
SELECT sum(value3),abs(sum(value3)) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (abs(sum(value3)))
   InfluxDB query: SELECT sum("value3"), abs(sum("value3")) FROM "s3"
(3 rows)

-- select abs as nest function with agg (pushdown, result)
--Testcase 35:
SELECT sum(value3),abs(sum(value3)) FROM s3;
 sum  | abs 
------+-----
 -7.2 | 7.2
(1 row)

-- select abs as nest with log2 (pushdown, explain)
--Testcase 36:
EXPLAIN VERBOSE
SELECT abs(log2(value1)),abs(log2(1/value1)) FROM s3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (abs(log2(value1))), (abs(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT abs(log2("value1")), abs(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select abs as nest with log2 (pushdown, result)
--Testcase 37:
SELECT abs(log2(value1)),abs(log2(1/value1)) FROM s3;
        abs        |        abs        
-------------------+-------------------
  3.32192809488736 |  3.32192809488736
  2.32192809488736 |  2.32192809488736
  1.73696559416621 |  1.73696559416621
 0.137503523749935 | 0.137503523749935
  1.13750352374994 |  1.13750352374993
  1.72246602447109 |  1.72246602447109
(6 rows)

-- select abs with non pushdown func and explicit constant (explain)
--Testcase 38:
EXPLAIN VERBOSE
SELECT abs(value3), pi(), 4.1 FROM s3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (abs(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT abs("value3") FROM "s3"
(3 rows)

-- select abs with non pushdown func and explicit constant (result)
--Testcase 39:
SELECT abs(value3), pi(), 4.1 FROM s3;
 abs |        pi        | ?column? 
-----+------------------+----------
 0.1 | 3.14159265358979 |      4.1
 0.2 | 3.14159265358979 |      4.1
 0.3 | 3.14159265358979 |      4.1
 1.1 | 3.14159265358979 |      4.1
 2.2 | 3.14159265358979 |      4.1
 3.3 | 3.14159265358979 |      4.1
(6 rows)

-- select sqrt as nest function with agg and explicit constant (pushdown, explain)
--Testcase 40:
EXPLAIN VERBOSE
SELECT sqrt(count(value1)), pi(), 4.1 FROM s3;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (sqrt((count(value1))::double precision)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT sqrt(count("value1")) FROM "s3"
(3 rows)

-- select sqrt as nest function with agg and explicit constant (pushdown, result)
--Testcase 41:
SELECT sqrt(count(value1)), pi(), 4.1 FROM s3;
       sqrt       |        pi        | ?column? 
------------------+------------------+----------
 2.44948974278318 | 3.14159265358979 |      4.1
(1 row)

-- select sqrt as nest function with agg and explicit constant and tag (error, explain)
--Testcase 42:
EXPLAIN VERBOSE
SELECT sqrt(count(value1)), pi(), 4.1, tag1 FROM s3;
ERROR:  column "s3.tag1" must appear in the GROUP BY clause or be used in an aggregate function
LINE 2: SELECT sqrt(count(value1)), pi(), 4.1, tag1 FROM s3;
                                               ^
-- select spread (stub agg function and group by influx_time() and tag) (explain)
--Testcase 43:
EXPLAIN VERBOSE
SELECT spread("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (spread(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT spread("value1") FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select spread (stub agg function and group by influx_time() and tag) (result)
--Testcase 44:
SELECT spread("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
 spread |      influx_time       | tag1 
--------+------------------------+------
      0 | 1970-01-01 09:00:00+09 | a
      0 | 1970-01-01 09:00:01+09 | a
      0 | 1970-01-01 09:00:02+09 | a
        | 1970-01-01 09:00:03+09 | a
        | 1970-01-01 09:00:04+09 | a
        | 1970-01-01 09:00:00+09 | b
        | 1970-01-01 09:00:01+09 | b
        | 1970-01-01 09:00:02+09 | b
      0 | 1970-01-01 09:00:03+09 | b
      0 | 1970-01-01 09:00:04+09 | b
(10 rows)

-- select spread (stub agg function and group by tag only) (result)
--Testcase 45:
SELECT tag1,spread("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
 tag1 | spread 
------+--------
 a    |    0.2
 b    |    1.1
(2 rows)

-- select spread (stub agg function and other aggs) (result)
--Testcase 46:
SELECT sum("value1"),spread("value1"),count("value1") FROM s3;
 sum | spread | count 
-----+--------+-------
 7.2 |    3.2 |     6
(1 row)

-- select abs with order by (explain)
--Testcase 47:
EXPLAIN VERBOSE
SELECT value1, abs(1-value1) FROM s3 order by abs(1-value1);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (abs(('1'::double precision - value1)))
   Sort Key: (abs(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (abs(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", abs((1 - "value1")) FROM "s3"
(6 rows)

-- select abs with order by (result)
--Testcase 48:
SELECT value1, abs(1-value1) FROM s3 order by abs(1-value1);
 value1 | abs 
--------+-----
    1.1 | 0.1
    0.3 | 0.7
    0.2 | 0.8
    0.1 | 0.9
    2.2 | 1.2
    3.3 | 2.3
(6 rows)

-- select abs with order by index (result)
--Testcase 49:
SELECT value1, abs(1-value1) FROM s3 order by 2,1;
 value1 | abs 
--------+-----
    1.1 | 0.1
    0.3 | 0.7
    0.2 | 0.8
    0.1 | 0.9
    2.2 | 1.2
    3.3 | 2.3
(6 rows)

-- select abs with order by index (result)
--Testcase 50:
SELECT value1, abs(1-value1) FROM s3 order by 1,2;
 value1 | abs 
--------+-----
    0.1 | 0.9
    0.2 | 0.8
    0.3 | 0.7
    1.1 | 0.1
    2.2 | 1.2
    3.3 | 2.3
(6 rows)

-- select abs and as
--Testcase 51:
SELECT abs(value3) as abs1 FROM s3;
 abs1 
------
  0.1
  0.2
  0.3
  1.1
  2.2
  3.3
(6 rows)

-- select abs(*) (stub agg function, explain)
--Testcase 432:
EXPLAIN VERBOSE
SELECT abs_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (abs_all())
   InfluxDB query: SELECT abs(*) FROM "s3"
(3 rows)

-- select abs(*) (stub agg function, result)
--Testcase 433:
SELECT abs_all() from s3;
                 abs_all                 
-----------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,0.1,100)
 (1970-01-01T00:00:01Z,,0.2,100,0.2,100)
 (1970-01-01T00:00:02Z,,0.3,100,0.3,100)
 (1970-01-01T00:00:03Z,,1.1,200,1.1,200)
 (1970-01-01T00:00:04Z,,2.2,200,2.2,200)
 (1970-01-01T00:00:05Z,,3.3,200,3.3,200)
(6 rows)

-- select abs(*) (stub agg function and group by tag only) (explain)
--Testcase 434:
EXPLAIN VERBOSE
SELECT abs_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (abs_all()), tag1
   InfluxDB query: SELECT abs(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select abs(*) (stub agg function and group by tag only) (result)
--Testcase 435:
SELECT abs_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                 abs_all                 
-----------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,0.1,100)
 (1970-01-01T00:00:01Z,,0.2,100,0.2,100)
 (1970-01-01T00:00:02Z,,0.3,100,0.3,100)
 (1970-01-01T00:00:03Z,,1.1,200,1.1,200)
 (1970-01-01T00:00:04Z,,2.2,200,2.2,200)
(5 rows)

-- select abs(*) (stub agg function, expose data, explain)
--Testcase 436:
EXPLAIN VERBOSE
SELECT (abs_all()::s3).* from s3;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((abs_all()))::s3)."time", (((abs_all()))::s3).tag1, (((abs_all()))::s3).value1, (((abs_all()))::s3).value2, (((abs_all()))::s3).value3, (((abs_all()))::s3).value4
   InfluxDB query: SELECT abs(*) FROM "s3"
(3 rows)

-- select abs(*) (stub agg function, expose data, result)
--Testcase 437:
SELECT (abs_all()::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |    100 |    0.1 |    100
 1970-01-01 09:00:01+09 |      |    0.2 |    100 |    0.2 |    100
 1970-01-01 09:00:02+09 |      |    0.3 |    100 |    0.3 |    100
 1970-01-01 09:00:03+09 |      |    1.1 |    200 |    1.1 |    200
 1970-01-01 09:00:04+09 |      |    2.2 |    200 |    2.2 |    200
 1970-01-01 09:00:05+09 |      |    3.3 |    200 |    3.3 |    200
(6 rows)

-- select spread over join query (explain)
--Testcase 52:
EXPLAIN VERBOSE
SELECT spread(t1.value1), spread(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=112.64..112.66 rows=1 width=16)
   Output: spread(t1.value1), spread(t2.value1)
   ->  Nested Loop  (cost=20.00..28.14 rows=169 width=16)
         Output: t1.value1, t2.value1
         ->  Foreign Scan on public.s3 t1  (cost=10.00..13.00 rows=13 width=8)
               Output: t1."time", t1.tag1, t1.value1, t1.value2, t1.value3, t1.value4
               InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
         ->  Materialize  (cost=10.00..13.06 rows=13 width=8)
               Output: t2.value1
               ->  Foreign Scan on public.s3 t2  (cost=10.00..13.00 rows=13 width=8)
                     Output: t2.value1
                     InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
(12 rows)

-- select spread over join query (result, stub call error)
--Testcase 53:
SELECT spread(t1.value1), spread(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
ERROR:  stub spread_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function spread_sfunc(double precision,double precision) line 3 at RAISE
-- select spread with having (explain)
--Testcase 54:
EXPLAIN VERBOSE
SELECT spread(value1) FROM s3 HAVING spread(value1) > 100;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=3840.00..3840.01 rows=1 width=8)
   Output: spread(value1)
   Filter: (spread(s3.value1) > '100'::double precision)
   ->  Foreign Scan on public.s3  (cost=10.00..2560.00 rows=2560 width=8)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT "value1" FROM "s3"
(6 rows)

-- select spread with having (result, not pushdown, stub call error)
--Testcase 55:
SELECT spread(value1) FROM s3 HAVING spread(value1) > 100;
ERROR:  stub spread_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function spread_sfunc(double precision,double precision) line 3 at RAISE
-- select spread(*) (stub agg function, explain)
--Testcase 438:
EXPLAIN VERBOSE
SELECT spread_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (spread_all(*))
   InfluxDB query: SELECT spread(*) FROM "s3"
(3 rows)

-- select spread(*) (stub agg function, result)
--Testcase 439:
SELECT spread_all(*) from s3;
                              spread_all                               
-----------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,3.1999999999999997,100,3.1999999999999997,100)
(1 row)

-- select spread(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 440:
EXPLAIN VERBOSE
SELECT spread_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (spread_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT spread(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select spread(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 441:
SELECT spread_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
           spread_all            
---------------------------------
 (1970-01-01T00:00:00Z,,0,0,0,0)
 (1970-01-01T00:00:01Z,,0,0,0,0)
 (1970-01-01T00:00:02Z,,0,0,0,0)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,0,0,0,0)
 (1970-01-01T00:00:04Z,,0,0,0,0)
(10 rows)

-- select spread(*) (stub agg function and group by tag only) (explain)
--Testcase 442:
EXPLAIN VERBOSE
SELECT spread_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (spread_all(*)), tag1
   InfluxDB query: SELECT spread(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select spread(*) (stub agg function and group by tag only) (result)
--Testcase 443:
SELECT spread_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                             spread_all                              
---------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.19999999999999998,0,0.19999999999999998,0)
 (1970-01-01T00:00:00Z,,1.1,0,1.1,0)
(2 rows)

-- select spread(*) (stub agg function, expose data, explain)
--Testcase 445:
EXPLAIN VERBOSE
SELECT (spread_all(*)::s3).* from s3;
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((spread_all(*)))::s3)."time", (((spread_all(*)))::s3).tag1, (((spread_all(*)))::s3).value1, (((spread_all(*)))::s3).value2, (((spread_all(*)))::s3).value3, (((spread_all(*)))::s3).value4
   InfluxDB query: SELECT spread(*) FROM "s3"
(3 rows)

-- select spread(*) (stub agg function, expose data, result)
--Testcase 446:
SELECT (spread_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    3.2 |    100 |    3.2 |    100
(1 row)

-- select spread(regex) (stub agg function, explain)
--Testcase 447:
EXPLAIN VERBOSE
SELECT spread('/value[1,4]/') from s3;
                       QUERY PLAN                        
---------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (spread('/value[1,4]/'::text))
   InfluxDB query: SELECT spread(/value[1,4]/) FROM "s3"
(3 rows)

-- select spread(regex) (stub agg function, result)
--Testcase 448:
SELECT spread('/value[1,4]/') from s3;
                      spread                      
--------------------------------------------------
 (1970-01-01T00:00:00Z,,3.1999999999999997,,,100)
(1 row)

-- select spread(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 449:
EXPLAIN VERBOSE
SELECT spread('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (spread('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT spread(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select spread(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 450:
SELECT spread('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
             spread              
---------------------------------
 (1970-01-01T00:00:00Z,,0,0,0,0)
 (1970-01-01T00:00:01Z,,0,0,0,0)
 (1970-01-01T00:00:02Z,,0,0,0,0)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,0,0,0,0)
 (1970-01-01T00:00:04Z,,0,0,0,0)
(10 rows)

-- select spread(regex) (stub agg function and group by tag only) (explain)
--Testcase 451:
EXPLAIN VERBOSE
SELECT spread('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (spread('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT spread(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select spread(regex) (stub agg function and group by tag only) (result)
--Testcase 452:
SELECT spread('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                     spread                      
-------------------------------------------------
 (1970-01-01T00:00:00Z,,0.19999999999999998,,,0)
 (1970-01-01T00:00:00Z,,1.1,,,0)
(2 rows)

-- select spread(regex) (stub agg function, expose data, explain)
--Testcase 454:
EXPLAIN VERBOSE
SELECT (spread('/value[1,4]/')::s3).* from s3;
                                                                                                                                            QUERY PLAN                                                                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((spread('/value[1,4]/'::text)))::s3)."time", (((spread('/value[1,4]/'::text)))::s3).tag1, (((spread('/value[1,4]/'::text)))::s3).value1, (((spread('/value[1,4]/'::text)))::s3).value2, (((spread('/value[1,4]/'::text)))::s3).value3, (((spread('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT spread(/value[1,4]/) FROM "s3"
(3 rows)

-- select spread(regex) (stub agg function, expose data, result)
--Testcase 455:
SELECT (spread('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    3.2 |        |        |    100
(1 row)

-- select abs with arithmetic and tag in the middle (explain)
--Testcase 56:
EXPLAIN VERBOSE
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1148.37 rows=1137 width=56)
   Output: ((abs(value1) + '1'::double precision)), value2, tag1, (sqrt((value2)::double precision))
   InfluxDB query: SELECT (abs("value1") + 1), "value2", "tag1", sqrt("value2") FROM "s3"
(3 rows)

-- select abs with arithmetic and tag in the middle (result)
--Testcase 57:
SELECT abs(value1) + 1, value2, tag1, sqrt(value2) FROM s3;
 ?column? | value2 | tag1 |      sqrt       
----------+--------+------+-----------------
      1.1 |    100 | a    |              10
      1.2 |    100 | a    |              10
      1.3 |    100 | a    |              10
      2.1 |    200 | b    | 14.142135623731
      3.2 |    200 | b    | 14.142135623731
      4.3 |    200 | b    | 14.142135623731
(6 rows)

-- select with order by limit (explain)
--Testcase 58:
EXPLAIN VERBOSE
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3) LIMIT 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit  (cost=1731.59..1731.59 rows=1 width=24)
   Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
   ->  Sort  (cost=1731.59..1735.86 rows=1706 width=24)
         Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
         Sort Key: (abs(s3.value3))
         ->  Foreign Scan  (cost=10.00..1723.06 rows=1706 width=24)
               Output: (abs(value1)), (abs(value3)), (sqrt((value2)::double precision))
               InfluxDB query: SELECT abs("value1"), abs("value3"), sqrt("value2") FROM "s3"
(8 rows)

-- select with order by limit (result)
--Testcase 59:
SELECT abs(value1), abs(value3), sqrt(value2) FROM s3 ORDER BY abs(value3) LIMIT 1;
 abs | abs | sqrt 
-----+-----+------
 0.1 | 0.1 |   10
(1 row)

-- select mixing with non pushdown func (all not pushdown, explain)
--Testcase 60:
EXPLAIN VERBOSE
SELECT abs(value1), sqrt(value2), upper(tag1) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=10.00..1148.37 rows=1137 width=48)
   Output: abs(value1), sqrt((value2)::double precision), upper(tag1)
   InfluxDB query: SELECT "tag1", "value1", "value2" FROM "s3"
(3 rows)

-- select mixing with non pushdown func (result)
--Testcase 61:
SELECT abs(value1), sqrt(value2), upper(tag1) FROM s3;
 abs |      sqrt       | upper 
-----+-----------------+-------
 0.1 |              10 | A
 0.2 |              10 | A
 0.3 |              10 | A
 1.1 | 14.142135623731 | B
 2.2 | 14.142135623731 | B
 3.3 | 14.142135623731 | B
(6 rows)

-- nested function in where clause (explain)
--Testcase 66:
EXPLAIN VERBOSE
SELECT sqrt(abs(value3)),min(value1) FROM s3 GROUP BY value3 HAVING sqrt(abs(value3)) > 0 ORDER BY 1,2;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort  (cost=696.88..697.37 rows=197 width=24)
   Output: (sqrt(abs(value3))), (min(value1)), value3
   Sort Key: (sqrt(abs(s3.value3))), (min(s3.value1))
   ->  HashAggregate  (cost=686.41..689.37 rows=197 width=24)
         Output: sqrt(abs(value3)), min(value1), value3
         Group Key: s3.value3
         ->  Foreign Scan on public.s3  (cost=10.00..683.00 rows=683 width=16)
               Output: "time", tag1, value1, value2, value3, value4
               Filter: (sqrt(abs(s3.value3)) > '0'::double precision)
               InfluxDB query: SELECT "value1", "value3" FROM "s3"
(10 rows)

-- nested function in where clause (result)
--Testcase 67:
SELECT sqrt(abs(value3)),min(value1) FROM s3 GROUP BY value3 HAVING sqrt(abs(value3)) > 0 ORDER BY 1,2;
       sqrt        | min 
-------------------+-----
 0.316227766016838 | 0.1
 0.447213595499958 | 0.2
 0.547722557505166 | 0.3
  1.04880884817015 | 1.1
  1.48323969741913 | 2.2
  1.81659021245849 | 3.3
(6 rows)

--Testcase 72:
EXPLAIN VERBOSE
SELECT first(time, value1), first(time, value2), first(time, value3), first(time, value4) FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (first("time", value1)), (first("time", value2)), (first("time", value3)), (first("time", value4))
   InfluxDB query: SELECT first("value1"), first("value2"), first("value3"), first("value4") FROM "s3"
(3 rows)

--Testcase 73:
SELECT first(time, value1), first(time, value2), first(time, value3), first(time, value4) FROM s3;
 first | first | first | first 
-------+-------+-------+-------
   0.1 |   100 |  -0.1 |  -100
(1 row)

-- select first(*) (stub agg function, explain)
--Testcase 456:
EXPLAIN VERBOSE
SELECT first_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (first_all(*))
   InfluxDB query: SELECT first(*) FROM "s3"
(3 rows)

-- select first(*) (stub agg function, result)
--Testcase 457:
SELECT first_all(*) from s3;
                 first_all                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
(1 row)

-- select first(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 458:
EXPLAIN VERBOSE
SELECT first_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (first_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT first(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select first(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 459:
SELECT first_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                 first_all                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select first(*) (stub agg function and group by tag only) (explain)
--Testcase 460:
EXPLAIN VERBOSE
SELECT first_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (first_all(*)), tag1
   InfluxDB query: SELECT first(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select first(*) (stub agg function and group by tag only) (result)
--Testcase 461:
SELECT first_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                 first_all                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:00Z,,1.1,200,-1.1,-200)
(2 rows)

-- select first(*) (stub agg function, expose data, explain)
--Testcase 463:
EXPLAIN VERBOSE
SELECT (first_all(*)::s3).* from s3;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((first_all(*)))::s3)."time", (((first_all(*)))::s3).tag1, (((first_all(*)))::s3).value1, (((first_all(*)))::s3).value2, (((first_all(*)))::s3).value3, (((first_all(*)))::s3).value4
   InfluxDB query: SELECT first(*) FROM "s3"
(3 rows)

-- select first(*) (stub agg function, expose data, result)
--Testcase 464:
SELECT (first_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |    100 |   -0.1 |   -100
(1 row)

-- select first(regex) (stub function, explain)
--Testcase 871:
EXPLAIN VERBOSE
SELECT first('/value[1,4]/') from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (first('/value[1,4]/'::text))
   InfluxDB query: SELECT first(/value[1,4]/) FROM "s3"
(3 rows)

-- select first(regex) (stub function, explain)
--Testcase 872:
SELECT first('/value[1,4]/') from s3;
               first                
------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
(1 row)

-- select multiple regex functions (do not push down, raise warning and stub error) (explain)
--Testcase 465:
EXPLAIN VERBOSE
SELECT first('/value[1,4]/'), first('/^v.*/') from s3;
WARNING:  Selecting multiple functions with regular expression or star is not supported.
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=5119.50..5119.51 rows=1 width=64)
   Output: first('/value[1,4]/'::text), first('/^v.*/'::text)
   ->  Foreign Scan on public.s3  (cost=10.00..3413.00 rows=3413 width=0)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT * FROM "s3"
(5 rows)

-- select multiple regex functions (do not push down, raise warning and stub error) (result)
--Testcase 466:
SELECT first('/value[1,4]/'), first('/^v.*/') from s3;
WARNING:  Selecting multiple functions with regular expression or star is not supported.
ERROR:  stub first_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function first_sfunc(text,text) line 3 at RAISE
-- select first(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 467:
EXPLAIN VERBOSE
SELECT first('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (first('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT first(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select first(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 468:
SELECT first('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                   first                   
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select first(regex) (stub agg function and group by tag only) (explain)
--Testcase 469:
EXPLAIN VERBOSE
SELECT first('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (first('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT first(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select first(regex) (stub agg function and group by tag only) (result)
--Testcase 470:
SELECT first('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
               first                
------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
 (1970-01-01T00:00:00Z,,1.1,,,-200)
(2 rows)

-- select first(regex) (stub agg function, expose data, explain)
--Testcase 472:
EXPLAIN VERBOSE
SELECT (first('/value[1,4]/')::s3).* from s3;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((first('/value[1,4]/'::text)))::s3)."time", (((first('/value[1,4]/'::text)))::s3).tag1, (((first('/value[1,4]/'::text)))::s3).value1, (((first('/value[1,4]/'::text)))::s3).value2, (((first('/value[1,4]/'::text)))::s3).value3, (((first('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT first(/value[1,4]/) FROM "s3"
(3 rows)

-- select first(regex) (stub agg function, expose data, result)
--Testcase 473:
SELECT (first('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |        |        |   -100
(1 row)

--Testcase 74:
EXPLAIN VERBOSE
SELECT last(time, value1), last(time, value2), last(time, value3), last(time, value4) FROM s3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (last("time", value1)), (last("time", value2)), (last("time", value3)), (last("time", value4))
   InfluxDB query: SELECT last("value1"), last("value2"), last("value3"), last("value4") FROM "s3"
(3 rows)

--Testcase 75:
SELECT last(time, value1), last(time, value2), last(time, value3), last(time, value4) FROM s3;
 last | last | last | last 
------+------+------+------
  3.3 |  200 | -3.3 | -200
(1 row)

-- select last(*) (stub agg function, explain)
--Testcase 474:
EXPLAIN VERBOSE
SELECT last_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (last_all(*))
   InfluxDB query: SELECT last(*) FROM "s3"
(3 rows)

-- select last(*) (stub agg function, result)
--Testcase 475:
SELECT last_all(*) from s3;
                 last_all                  
-------------------------------------------
 (1970-01-01T00:00:00Z,,3.3,200,-3.3,-200)
(1 row)

-- select last(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 476:
EXPLAIN VERBOSE
SELECT last_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (last_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT last(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select last(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 477:
SELECT last_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                 last_all                  
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select last(*) (stub agg function and group by tag only) (explain)
--Testcase 478:
EXPLAIN VERBOSE
SELECT last_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (last_all(*)), tag1
   InfluxDB query: SELECT last(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select last(*) (stub agg function and group by tag only) (result)
--Testcase 479:
SELECT last_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                 last_all                  
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:00Z,,2.2,200,-2.2,-200)
(2 rows)

-- select last(*) (stub agg function, expose data, explain)
--Testcase 481:
EXPLAIN VERBOSE
SELECT (last_all(*)::s3).* from s3;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((last_all(*)))::s3)."time", (((last_all(*)))::s3).tag1, (((last_all(*)))::s3).value1, (((last_all(*)))::s3).value2, (((last_all(*)))::s3).value3, (((last_all(*)))::s3).value4
   InfluxDB query: SELECT last(*) FROM "s3"
(3 rows)

-- select last(*) (stub agg function, expose data, result)
--Testcase 482:
SELECT (last_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    3.3 |    200 |   -3.3 |   -200
(1 row)

-- select last(regex) (stub function, explain)
--Testcase 483:
EXPLAIN VERBOSE
SELECT last('/value[1,4]/') from s3;
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (last('/value[1,4]/'::text))
   InfluxDB query: SELECT last(/value[1,4]/) FROM "s3"
(3 rows)

-- select last(regex) (stub function, result)
--Testcase 484:
SELECT last('/value[1,4]/') from s3;
                last                
------------------------------------
 (1970-01-01T00:00:00Z,,3.3,,,-200)
(1 row)

-- select multiple regex functions (do not push down, raise warning and stub error) (explain)
--Testcase 873:
EXPLAIN VERBOSE
SELECT first('/value[1,4]/'), first('/^v.*/') from s3;
WARNING:  Selecting multiple functions with regular expression or star is not supported.
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=5119.50..5119.51 rows=1 width=64)
   Output: first('/value[1,4]/'::text), first('/^v.*/'::text)
   ->  Foreign Scan on public.s3  (cost=10.00..3413.00 rows=3413 width=0)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT * FROM "s3"
(5 rows)

-- select multiple regex functions (do not push down, raise warning and stub error) (result)
--Testcase 874:
SELECT first('/value[1,4]/'), first('/^v.*/') from s3;
WARNING:  Selecting multiple functions with regular expression or star is not supported.
ERROR:  stub first_sfunc(text, text) is called
CONTEXT:  PL/pgSQL function first_sfunc(text,text) line 3 at RAISE
-- select last(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 485:
EXPLAIN VERBOSE
SELECT last('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (last('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT last(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select last(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 486:
SELECT last('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                   last                    
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select last(regex) (stub agg function and group by tag only) (explain)
--Testcase 487:
EXPLAIN VERBOSE
SELECT last('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (last('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT last(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select last(regex) (stub agg function and group by tag only) (result)
--Testcase 488:
SELECT last('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                last                
------------------------------------
 (1970-01-01T00:00:00Z,,0.3,,,-100)
 (1970-01-01T00:00:00Z,,2.2,,,-200)
(2 rows)

-- select last(regex) (stub agg function, expose data, explain)
--Testcase 490:
EXPLAIN VERBOSE
SELECT (last('/value[1,4]/')::s3).* from s3;
                                                                                                                                      QUERY PLAN                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((last('/value[1,4]/'::text)))::s3)."time", (((last('/value[1,4]/'::text)))::s3).tag1, (((last('/value[1,4]/'::text)))::s3).value1, (((last('/value[1,4]/'::text)))::s3).value2, (((last('/value[1,4]/'::text)))::s3).value3, (((last('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT last(/value[1,4]/) FROM "s3"
(3 rows)

-- select last(regex) (stub agg function, expose data, result)
--Testcase 491:
SELECT (last('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    3.3 |        |        |   -200
(1 row)

--Testcase 76:
EXPLAIN VERBOSE
SELECT sample(value2, 3) FROM s3 WHERE value2 < 200;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (sample(value2, 3))
   InfluxDB query: SELECT sample("value2", 3) FROM "s3" WHERE (("value2" < 200))
(3 rows)

--Testcase 77:
SELECT sample(value2, 3) FROM s3 WHERE value2 < 200;
 sample 
--------
    100
    100
    100
(3 rows)

--Testcase 78:
EXPLAIN VERBOSE
SELECT sample(value2, 1) FROM s3 WHERE time >= to_timestamp(0) AND time <= to_timestamp(5) GROUP BY influx_time(time, interval '3s');
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sample(value2, 1)), (influx_time("time", '@ 3 secs'::interval))
   InfluxDB query: SELECT sample("value2", 1) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:05')) GROUP BY (time(0d0h0m3s0u))
(3 rows)

--Testcase 79:
SELECT sample(value2, 1) FROM s3 WHERE time >= to_timestamp(0) AND time <= to_timestamp(5) GROUP BY influx_time(time, interval '3s');
 sample 
--------
    100
    200
(2 rows)

-- select sample(*, int) (stub agg function, explain)
--Testcase 492:
EXPLAIN VERBOSE
SELECT sample_all(50) from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (sample_all(50))
   InfluxDB query: SELECT sample(*, 50) FROM "s3"
(3 rows)

-- select sample(*, int) (stub agg function, result)
--Testcase 493:
SELECT sample_all(50) from s3;
                sample_all                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
 (1970-01-01T00:00:05Z,,3.3,200,-3.3,-200)
(6 rows)

-- select sample(*, int) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 494:
EXPLAIN VERBOSE
SELECT sample_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (sample_all(50)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT sample(*, 50) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select sample(*, int) (stub agg function and group by influx_time() and tag) (result)
--Testcase 495:
SELECT sample_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                sample_all                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(5 rows)

-- select sample(*, int) (stub agg function and group by tag only) (explain)
--Testcase 496:
EXPLAIN VERBOSE
SELECT sample_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (sample_all(50)), tag1
   InfluxDB query: SELECT sample(*, 50) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select sample(*, int) (stub agg function and group by tag only) (result)
--Testcase 497:
SELECT sample_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                sample_all                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(5 rows)

-- select sample(*, int) (stub agg function, expose data, explain)
--Testcase 499:
EXPLAIN VERBOSE
SELECT (sample_all(50)::s3).* from s3;
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((sample_all(50)))::s3)."time", (((sample_all(50)))::s3).tag1, (((sample_all(50)))::s3).value1, (((sample_all(50)))::s3).value2, (((sample_all(50)))::s3).value3, (((sample_all(50)))::s3).value4
   InfluxDB query: SELECT sample(*, 50) FROM "s3"
(3 rows)

-- select sample(*, int) (stub agg function, expose data, result)
--Testcase 500:
SELECT (sample_all(50)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |    100 |   -0.1 |   -100
 1970-01-01 09:00:01+09 |      |    0.2 |    100 |   -0.2 |   -100
 1970-01-01 09:00:02+09 |      |    0.3 |    100 |   -0.3 |   -100
 1970-01-01 09:00:03+09 |      |    1.1 |    200 |   -1.1 |   -200
 1970-01-01 09:00:04+09 |      |    2.2 |    200 |   -2.2 |   -200
 1970-01-01 09:00:05+09 |      |    3.3 |    200 |   -3.3 |   -200
(6 rows)

-- select sample(regex) (stub agg function, explain)
--Testcase 501:
EXPLAIN VERBOSE
SELECT sample('/value[1,4]/', 50) from s3;
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (sample('/value[1,4]/'::text, 50))
   InfluxDB query: SELECT sample(/value[1,4]/, 50) FROM "s3"
(3 rows)

-- select sample(regex) (stub agg function, result)
--Testcase 502:
SELECT sample('/value[1,4]/', 50) from s3;
               sample               
------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
 (1970-01-01T00:00:01Z,,0.2,,,-100)
 (1970-01-01T00:00:02Z,,0.3,,,-100)
 (1970-01-01T00:00:03Z,,1.1,,,-200)
 (1970-01-01T00:00:04Z,,2.2,,,-200)
 (1970-01-01T00:00:05Z,,3.3,,,-200)
(6 rows)

-- select sample(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 503:
EXPLAIN VERBOSE
SELECT sample('/^v.*/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (sample('/^v.*/'::text, 50)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT sample(/^v.*/, 50) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select sample(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 504:
SELECT sample('/^v.*/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                  sample                   
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(5 rows)

-- select sample(regex) (stub agg function and group by tag only) (explain)
--Testcase 505:
EXPLAIN VERBOSE
SELECT sample('/value[1,4]/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (sample('/value[1,4]/'::text, 50)), tag1
   InfluxDB query: SELECT sample(/value[1,4]/, 50) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select sample(regex) (stub agg function and group by tag only) (result)
--Testcase 506:
SELECT sample('/value[1,4]/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
               sample               
------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
 (1970-01-01T00:00:01Z,,0.2,,,-100)
 (1970-01-01T00:00:02Z,,0.3,,,-100)
 (1970-01-01T00:00:03Z,,1.1,,,-200)
 (1970-01-01T00:00:04Z,,2.2,,,-200)
(5 rows)

-- select sample(regex) (stub agg function, expose data, explain)
--Testcase 508:
EXPLAIN VERBOSE
SELECT (sample('/value[1,4]/', 50)::s3).* from s3;
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((sample('/value[1,4]/'::text, 50)))::s3)."time", (((sample('/value[1,4]/'::text, 50)))::s3).tag1, (((sample('/value[1,4]/'::text, 50)))::s3).value1, (((sample('/value[1,4]/'::text, 50)))::s3).value2, (((sample('/value[1,4]/'::text, 50)))::s3).value3, (((sample('/value[1,4]/'::text, 50)))::s3).value4
   InfluxDB query: SELECT sample(/value[1,4]/, 50) FROM "s3"
(3 rows)

-- select sample(regex) (stub agg function, expose data, result)
--Testcase 509:
SELECT (sample('/value[1,4]/', 50)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |        |        |   -100
 1970-01-01 09:00:01+09 |      |    0.2 |        |        |   -100
 1970-01-01 09:00:02+09 |      |    0.3 |        |        |   -100
 1970-01-01 09:00:03+09 |      |    1.1 |        |        |   -200
 1970-01-01 09:00:04+09 |      |    2.2 |        |        |   -200
 1970-01-01 09:00:05+09 |      |    3.3 |        |        |   -200
(6 rows)

--Testcase 80:
EXPLAIN VERBOSE
SELECT cumulative_sum(value1),cumulative_sum(value2),cumulative_sum(value3),cumulative_sum(value4) FROM s3;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (cumulative_sum(value1)), (cumulative_sum(value2)), (cumulative_sum(value3)), (cumulative_sum(value4))
   InfluxDB query: SELECT cumulative_sum("value1"), cumulative_sum("value2"), cumulative_sum("value3"), cumulative_sum("value4") FROM "s3"
(3 rows)

--Testcase 81:
SELECT cumulative_sum(value1),cumulative_sum(value2),cumulative_sum(value3),cumulative_sum(value4) FROM s3;
 cumulative_sum | cumulative_sum | cumulative_sum | cumulative_sum 
----------------+----------------+----------------+----------------
            0.1 |            100 |           -0.1 |           -100
            0.3 |            200 |           -0.3 |           -200
            0.6 |            300 |           -0.6 |           -300
            1.7 |            500 |           -1.7 |           -500
            3.9 |            700 |           -3.9 |           -700
            7.2 |            900 |           -7.2 |           -900
(6 rows)

-- select cumulative_sum(*) (stub function, explain)
--Testcase 510:
EXPLAIN VERBOSE
SELECT cumulative_sum_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (cumulative_sum_all())
   InfluxDB query: SELECT cumulative_sum(*) FROM "s3"
(3 rows)

-- select cumulative_sum(*) (stub function, result)
--Testcase 511:
SELECT cumulative_sum_all() from s3;
                            cumulative_sum_all                             
---------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.30000000000000004,200,-0.30000000000000004,-200)
 (1970-01-01T00:00:02Z,,0.6000000000000001,300,-0.6000000000000001,-300)
 (1970-01-01T00:00:03Z,,1.7000000000000002,500,-1.7000000000000002,-500)
 (1970-01-01T00:00:04Z,,3.9000000000000004,700,-3.9000000000000004,-700)
 (1970-01-01T00:00:05Z,,7.2,900,-7.2,-900)
(6 rows)

-- select cumulative_sum(regex) (stub function, result)
--Testcase 875:
SELECT cumulative_sum('/value[1,4]/') from s3;
                   cumulative_sum                   
----------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
 (1970-01-01T00:00:01Z,,0.30000000000000004,,,-200)
 (1970-01-01T00:00:02Z,,0.6000000000000001,,,-300)
 (1970-01-01T00:00:03Z,,1.7000000000000002,,,-500)
 (1970-01-01T00:00:04Z,,3.9000000000000004,,,-700)
 (1970-01-01T00:00:05Z,,7.2,,,-900)
(6 rows)

-- select cumulative_sum(regex) (stub function, result)
--Testcase 876:
SELECT cumulative_sum('/value[1,4]/') from s3;
                   cumulative_sum                   
----------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
 (1970-01-01T00:00:01Z,,0.30000000000000004,,,-200)
 (1970-01-01T00:00:02Z,,0.6000000000000001,,,-300)
 (1970-01-01T00:00:03Z,,1.7000000000000002,,,-500)
 (1970-01-01T00:00:04Z,,3.9000000000000004,,,-700)
 (1970-01-01T00:00:05Z,,7.2,,,-900)
(6 rows)

-- select multiple star and regex functions (do not push down, raise warning and stub error) (result)
--Testcase 877:
EXPLAIN VERBOSE
SELECT cumulative_sum_all(), cumulative_sum('/value[1,4]/') from s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=10.00..5119.50 rows=3413 width=64)
   Output: cumulative_sum_all(), cumulative_sum('/value[1,4]/'::text)
   InfluxDB query: SELECT * FROM "s3"
(3 rows)

-- select multiple star and regex functions (do not push down, raise warning and stub error) (result)
--Testcase 878:
SELECT cumulative_sum_all(), cumulative_sum('/value[1,4]/') from s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub cumulative_sum_all() is called
CONTEXT:  PL/pgSQL function cumulative_sum_all() line 3 at RAISE
-- select cumulative_sum(*) (stub function and group by tag only) (explain)
--Testcase 512:
EXPLAIN VERBOSE
SELECT cumulative_sum_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (cumulative_sum_all()), tag1
   InfluxDB query: SELECT cumulative_sum(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select cumulative_sum(*) (stub function and group by tag only) (result)
--Testcase 513:
SELECT cumulative_sum_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                            cumulative_sum_all                             
---------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.30000000000000004,200,-0.30000000000000004,-200)
 (1970-01-01T00:00:02Z,,0.6000000000000001,300,-0.6000000000000001,-300)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,3.3000000000000003,400,-3.3000000000000003,-400)
(5 rows)

-- select cumulative_sum(regex) (stub function and group by tag only) (explain)
--Testcase 879:
EXPLAIN VERBOSE
SELECT cumulative_sum('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (cumulative_sum('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT cumulative_sum(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select cumulative_sum(regex) (stub function and group by tag only) (result)
--Testcase 880:
SELECT cumulative_sum('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                   cumulative_sum                   
----------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
 (1970-01-01T00:00:01Z,,0.30000000000000004,,,-200)
 (1970-01-01T00:00:02Z,,0.6000000000000001,,,-300)
 (1970-01-01T00:00:03Z,,1.1,,,-200)
 (1970-01-01T00:00:04Z,,3.3000000000000003,,,-400)
(5 rows)

-- select cumulative_sum(*), cumulative_sum(regex) (stub agg function, expose data, explain)
--Testcase 514:
EXPLAIN VERBOSE
SELECT (cumulative_sum_all()::s3).*, (cumulative_sum('/value[1,4]/')::s3).* from s3;


 Foreign Scan  (cost=10.00..13856.78 rows=3413 width=144)
   Output: (((cumulative_sum_all()))::s3)."time", (((cumulative_sum_all()))::s3).tag1, (((cumulative_sum_all()))::s3).value1, (((cumulative_sum_all()))::s3).value2, (((cumulative_sum_all()))::s3).value3, (((cumulative_sum_all()))::s3).value4, (((cumulative_sum('/value[1,4]/'::text)))::s3)."time", (((cumulative_sum('/value[1,4]/'::text)))::s3).tag1, (((cumulative_sum('/value[1,4]/'::text)))::s3).value1, (((cumulative_sum('/value[1,4]/'::text)))::s3).value2, (((cumulative_sum('/value[1,4]/'::text)))::s3).value3, (((cumulative_sum('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT cumulative_sum(*), cumulative_sum(/value[1,4]/) FROM "s3"
(3 rows)

-- select cumulative_sum(*), cumulative_sum(regex) (stub agg function, expose data, result)
--Testcase 515:
SELECT (cumulative_sum_all()::s3).*, (cumulative_sum('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 |          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------+------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |    100 |   -0.1 |   -100 | 1970-01-01 09:00:00+09 |      |    0.1 |        |        |   -100
 1970-01-01 09:00:01+09 |      |    0.3 |    200 |   -0.3 |   -200 | 1970-01-01 09:00:01+09 |      |    0.3 |        |        |   -200
 1970-01-01 09:00:02+09 |      |    0.6 |    300 |   -0.6 |   -300 | 1970-01-01 09:00:02+09 |      |    0.6 |        |        |   -300
 1970-01-01 09:00:03+09 |      |    1.7 |    500 |   -1.7 |   -500 | 1970-01-01 09:00:03+09 |      |    1.7 |        |        |   -500
 1970-01-01 09:00:04+09 |      |    3.9 |    700 |   -3.9 |   -700 | 1970-01-01 09:00:04+09 |      |    3.9 |        |        |   -700
 1970-01-01 09:00:05+09 |      |    7.2 |    900 |   -7.2 |   -900 | 1970-01-01 09:00:05+09 |      |    7.2 |        |        |   -900
(6 rows)

--Testcase 82:
EXPLAIN VERBOSE
SELECT derivative(value1),derivative(value2),derivative(value3),derivative(value4) FROM s3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (derivative(value1)), (derivative(value2)), (derivative(value3)), (derivative(value4))
   InfluxDB query: SELECT derivative("value1"), derivative("value2"), derivative("value3"), derivative("value4") FROM "s3"
(3 rows)

--Testcase 83:
SELECT derivative(value1),derivative(value2),derivative(value3),derivative(value4) FROM s3;
 derivative | derivative | derivative | derivative 
------------+------------+------------+------------
        0.1 |          0 |       -0.1 |          0
        0.1 |          0 |       -0.1 |          0
        0.8 |        100 |       -0.8 |       -100
        1.1 |          0 |       -1.1 |          0
        1.1 |          0 |       -1.1 |          0
(5 rows)

--Testcase 84:
EXPLAIN VERBOSE
SELECT derivative(value1, interval '0.5s'),derivative(value2, interval '0.2s'),derivative(value3, interval '0.1s'),derivative(value4, interval '2s') FROM s3;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (derivative(value1, '@ 0.5 secs'::interval)), (derivative(value2, '@ 0.2 secs'::interval)), (derivative(value3, '@ 0.1 secs'::interval)), (derivative(value4, '@ 2 secs'::interval))
   InfluxDB query: SELECT derivative("value1", 0d0h0m0s500000u), derivative("value2", 0d0h0m0s200000u), derivative("value3", 0d0h0m0s100000u), derivative("value4", 0d0h0m2s0u) FROM "s3"
(3 rows)

--Testcase 85:
SELECT derivative(value1, interval '0.5s'),derivative(value2, interval '0.2s'),derivative(value3, interval '0.1s'),derivative(value4, interval '2s') FROM s3;
 derivative | derivative | derivative | derivative 
------------+------------+------------+------------
       0.05 |          0 |      -0.01 |          0
       0.05 |          0 |      -0.01 |          0
        0.4 |         20 |      -0.08 |       -200
       0.55 |          0 |      -0.11 |          0
       0.55 |          0 |      -0.11 |          0
(5 rows)

-- select derivative(*) (stub function, explain)
--Testcase 516:
EXPLAIN VERBOSE
SELECT derivative_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (derivative_all())
   InfluxDB query: SELECT derivative(*) FROM "s3"
(3 rows)

-- select derivative(*) (stub function, result)
--Testcase 517:
SELECT derivative_all() from s3;
                            derivative_all                            
----------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,-0.1,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,-0.09999999999999998,0)
 (1970-01-01T00:00:03Z,,0.8,100,-0.8,-100)
 (1970-01-01T00:00:04Z,,1.1,0,-1.1,0)
 (1970-01-01T00:00:05Z,,1.0999999999999996,0,-1.0999999999999996,0)
(5 rows)

-- select derivative(regex) (stub function, explain)
--Testcase 516:
EXPLAIN VERBOSE
SELECT derivative('/value[1,4]/') from s3;
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (derivative('/value[1,4]/'::text))
   InfluxDB query: SELECT derivative(/value[1,4]/) FROM "s3"
(3 rows)

-- select derivative(regex) (stub function, result)
--Testcase 517:
SELECT derivative('/value[1,4]/') from s3;
                   derivative                    
-------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0)
 (1970-01-01T00:00:03Z,,0.8,,,-100)
 (1970-01-01T00:00:04Z,,1.1,,,0)
 (1970-01-01T00:00:05Z,,1.0999999999999996,,,0)
(5 rows)

-- select multiple star and regex functions (do not push down, raise warning and stub error) (explain)
--Testcase 516:
EXPLAIN VERBOSE
SELECT derivative_all(), derivative('/value[1,4]/') from s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.s3  (cost=10.00..5119.50 rows=3413 width=64)
   Output: derivative_all(), derivative('/value[1,4]/'::text)
   InfluxDB query: SELECT * FROM "s3"
(3 rows)

-- select multiple star and regex functions (do not push down, raise warning and stub error) (explain)
--Testcase 517:
SELECT derivative_all(), derivative('/value[1,4]/') from s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub derivative_all() is called
CONTEXT:  PL/pgSQL function derivative_all() line 3 at RAISE
-- select derivative(*) (stub function and group by tag only) (explain)
--Testcase 518:
EXPLAIN VERBOSE
SELECT derivative_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (derivative_all()), tag1
   InfluxDB query: SELECT derivative(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select derivative(*) (stub function and group by tag only) (result)
--Testcase 519:
SELECT derivative_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                            derivative_all                            
----------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,-0.1,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,-0.09999999999999998,0)
 (1970-01-01T00:00:04Z,,1.1,0,-1.1,0)
(3 rows)

-- select derivative(regex) (stub function and group by tag only) (explain)
--Testcase 881:
EXPLAIN VERBOSE
SELECT derivative('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (derivative('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT derivative(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select derivative(regex) (stub function and group by tag only) (result)
--Testcase 882:
SELECT derivative('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                   derivative                    
-------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0)
 (1970-01-01T00:00:04Z,,1.1,,,0)
(3 rows)

-- select derivative(*) (stub agg function, expose data, explain)
--Testcase 520:
EXPLAIN VERBOSE
SELECT (derivative_all()::s3).* from s3;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((derivative_all()))::s3)."time", (((derivative_all()))::s3).tag1, (((derivative_all()))::s3).value1, (((derivative_all()))::s3).value2, (((derivative_all()))::s3).value3, (((derivative_all()))::s3).value4
   InfluxDB query: SELECT derivative(*) FROM "s3"
(3 rows)

-- select derivative(*) (stub agg function, expose data, result)
--Testcase 521:
SELECT (derivative_all()::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    0.1 |      0 |   -0.1 |      0
 1970-01-01 09:00:02+09 |      |    0.1 |      0 |   -0.1 |      0
 1970-01-01 09:00:03+09 |      |    0.8 |    100 |   -0.8 |   -100
 1970-01-01 09:00:04+09 |      |    1.1 |      0 |   -1.1 |      0
 1970-01-01 09:00:05+09 |      |    1.1 |      0 |   -1.1 |      0
(5 rows)

-- select derivative(regex) (stub agg function, expose data, explain)
--Testcase 883:
EXPLAIN VERBOSE
SELECT (derivative('/value[1,4]/')::s3).* from s3;
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((derivative('/value[1,4]/'::text)))::s3)."time", (((derivative('/value[1,4]/'::text)))::s3).tag1, (((derivative('/value[1,4]/'::text)))::s3).value1, (((derivative('/value[1,4]/'::text)))::s3).value2, (((derivative('/value[1,4]/'::text)))::s3).value3, (((derivative('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT derivative(/value[1,4]/) FROM "s3"
(3 rows)

-- select derivative(regex) (stub agg function, expose data, result)
--Testcase 884:
SELECT (derivative('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    0.1 |        |        |      0
 1970-01-01 09:00:02+09 |      |    0.1 |        |        |      0
 1970-01-01 09:00:03+09 |      |    0.8 |        |        |   -100
 1970-01-01 09:00:04+09 |      |    1.1 |        |        |      0
 1970-01-01 09:00:05+09 |      |    1.1 |        |        |      0
(5 rows)

--Testcase 86:
EXPLAIN VERBOSE
SELECT non_negative_derivative(value1),non_negative_derivative(value2),non_negative_derivative(value3),non_negative_derivative(value4) FROM s3;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (non_negative_derivative(value1)), (non_negative_derivative(value2)), (non_negative_derivative(value3)), (non_negative_derivative(value4))
   InfluxDB query: SELECT non_negative_derivative("value1"), non_negative_derivative("value2"), non_negative_derivative("value3"), non_negative_derivative("value4") FROM "s3"
(3 rows)

--Testcase 87:
SELECT non_negative_derivative(value1),non_negative_derivative(value2),non_negative_derivative(value3),non_negative_derivative(value4) FROM s3;
 non_negative_derivative | non_negative_derivative | non_negative_derivative | non_negative_derivative 
-------------------------+-------------------------+-------------------------+-------------------------
                     0.1 |                       0 |                         |                       0
                     0.1 |                       0 |                         |                       0
                     0.8 |                     100 |                         |                        
                     1.1 |                       0 |                         |                       0
                     1.1 |                       0 |                         |                       0
(5 rows)

--Testcase 88:
EXPLAIN VERBOSE
SELECT non_negative_derivative(value1, interval '0.5s'),non_negative_derivative(value2, interval '0.2s'),non_negative_derivative(value3, interval '0.1s'),non_negative_derivative(value4, interval '2s') FROM s3;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (non_negative_derivative(value1, '@ 0.5 secs'::interval)), (non_negative_derivative(value2, '@ 0.2 secs'::interval)), (non_negative_derivative(value3, '@ 0.1 secs'::interval)), (non_negative_derivative(value4, '@ 2 secs'::interval))
   InfluxDB query: SELECT non_negative_derivative("value1", 0d0h0m0s500000u), non_negative_derivative("value2", 0d0h0m0s200000u), non_negative_derivative("value3", 0d0h0m0s100000u), non_negative_derivative("value4", 0d0h0m2s0u) FROM "s3"
(3 rows)

--Testcase 89:
SELECT non_negative_derivative(value1, interval '0.5s'),non_negative_derivative(value2, interval '0.2s'),non_negative_derivative(value3, interval '0.1s'),non_negative_derivative(value4, interval '2s') FROM s3;
 non_negative_derivative | non_negative_derivative | non_negative_derivative | non_negative_derivative 
-------------------------+-------------------------+-------------------------+-------------------------
                    0.05 |                       0 |                         |                       0
                    0.05 |                       0 |                         |                       0
                     0.4 |                      20 |                         |                        
                    0.55 |                       0 |                         |                       0
                    0.55 |                       0 |                         |                       0
(5 rows)

-- select non_negative_derivative(*) (stub function, explain)
--Testcase 522:
EXPLAIN VERBOSE
SELECT non_negative_derivative_all() from s3;
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (non_negative_derivative_all())
   InfluxDB query: SELECT non_negative_derivative(*) FROM "s3"
(3 rows)

-- select non_negative_derivative(*) (stub function, result)
--Testcase 523:
SELECT non_negative_derivative_all() from s3;
           non_negative_derivative_all            
--------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,,0)
 (1970-01-01T00:00:03Z,,0.8,100,,)
 (1970-01-01T00:00:04Z,,1.1,0,,0)
 (1970-01-01T00:00:05Z,,1.0999999999999996,0,,0)
(5 rows)

-- select non_negative_derivative(regex) (stub function, explain)
--Testcase 885:
EXPLAIN VERBOSE
SELECT non_negative_derivative('/value[1,4]/') from s3;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (non_negative_derivative('/value[1,4]/'::text))
   InfluxDB query: SELECT non_negative_derivative(/value[1,4]/) FROM "s3"
(3 rows)

-- select non_negative_derivative(regex) (stub function, result)
--Testcase 886:
SELECT non_negative_derivative('/value[1,4]/') from s3;
             non_negative_derivative             
-------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0)
 (1970-01-01T00:00:03Z,,0.8,,,)
 (1970-01-01T00:00:04Z,,1.1,,,0)
 (1970-01-01T00:00:05Z,,1.0999999999999996,,,0)
(5 rows)

-- select non_negative_derivative(*) (stub function and group by tag only) (explain)
--Testcase 524:
EXPLAIN VERBOSE
SELECT non_negative_derivative_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (non_negative_derivative_all()), tag1
   InfluxDB query: SELECT non_negative_derivative(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select non_negative_derivative(*) (stub function and group by tag only) (result)
--Testcase 525:
SELECT non_negative_derivative_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
           non_negative_derivative_all            
--------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,,0)
 (1970-01-01T00:00:04Z,,1.1,0,,0)
(3 rows)

-- select non_negative_derivative(regex) (stub function and group by tag only) (explain)
--Testcase 887:
EXPLAIN VERBOSE
SELECT non_negative_derivative('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (non_negative_derivative('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT non_negative_derivative(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select non_negative_derivative(regex) (stub agg function and group by tag only) (result)
--Testcase 888:
SELECT non_negative_derivative('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
             non_negative_derivative             
-------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0)
 (1970-01-01T00:00:04Z,,1.1,,,0)
(3 rows)

-- select non_negative_derivative(*) (stub function, expose data, explain)
--Testcase 526:
EXPLAIN VERBOSE
SELECT (non_negative_derivative_all()::s3).* from s3;
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((non_negative_derivative_all()))::s3)."time", (((non_negative_derivative_all()))::s3).tag1, (((non_negative_derivative_all()))::s3).value1, (((non_negative_derivative_all()))::s3).value2, (((non_negative_derivative_all()))::s3).value3, (((non_negative_derivative_all()))::s3).value4
   InfluxDB query: SELECT non_negative_derivative(*) FROM "s3"
(3 rows)

-- select non_negative_derivative(*) (stub agg function, expose data, result)
--Testcase 527:
SELECT (non_negative_derivative_all()::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    0.1 |      0 |        |      0
 1970-01-01 09:00:02+09 |      |    0.1 |      0 |        |      0
 1970-01-01 09:00:03+09 |      |    0.8 |    100 |        |       
 1970-01-01 09:00:04+09 |      |    1.1 |      0 |        |      0
 1970-01-01 09:00:05+09 |      |    1.1 |      0 |        |      0
(5 rows)

-- select non_negative_derivative(regex) (stub function, expose data, explain)
--Testcase 889:
EXPLAIN VERBOSE
SELECT (non_negative_derivative('/value[1,4]/')::s3).* from s3;
                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((non_negative_derivative('/value[1,4]/'::text)))::s3)."time", (((non_negative_derivative('/value[1,4]/'::text)))::s3).tag1, (((non_negative_derivative('/value[1,4]/'::text)))::s3).value1, (((non_negative_derivative('/value[1,4]/'::text)))::s3).value2, (((non_negative_derivative('/value[1,4]/'::text)))::s3).value3, (((non_negative_derivative('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT non_negative_derivative(/value[1,4]/) FROM "s3"
(3 rows)

-- select non_negative_derivative(regex) (stub agg function, expose data, result)
--Testcase 890:
SELECT (non_negative_derivative('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    0.1 |        |        |      0
 1970-01-01 09:00:02+09 |      |    0.1 |        |        |      0
 1970-01-01 09:00:03+09 |      |    0.8 |        |        |       
 1970-01-01 09:00:04+09 |      |    1.1 |        |        |      0
 1970-01-01 09:00:05+09 |      |    1.1 |        |        |      0
(5 rows)

--Testcase 90:
EXPLAIN VERBOSE
SELECT difference(value1),difference(value2),difference(value3),difference(value4) FROM s3;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (difference(value1)), (difference(value2)), (difference(value3)), (difference(value4))
   InfluxDB query: SELECT difference("value1"), difference("value2"), difference("value3"), difference("value4") FROM "s3"
(3 rows)

--Testcase 91:
SELECT difference(value1),difference(value2),difference(value3),difference(value4) FROM s3;
 difference | difference | difference | difference 
------------+------------+------------+------------
        0.1 |          0 |       -0.1 |          0
        0.1 |          0 |       -0.1 |          0
        0.8 |        100 |       -0.8 |       -100
        1.1 |          0 |       -1.1 |          0
        1.1 |          0 |       -1.1 |          0
(5 rows)

-- select difference(*) (stub function, explain)
--Testcase 528:
EXPLAIN VERBOSE
SELECT difference_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (difference_all())
   InfluxDB query: SELECT difference(*) FROM "s3"
(3 rows)

-- select difference(*) (stub function, result)
--Testcase 529:
SELECT difference_all() from s3;
                            difference_all                            
----------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,-0.1,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,-0.09999999999999998,0)
 (1970-01-01T00:00:03Z,,0.8,100,-0.8,-100)
 (1970-01-01T00:00:04Z,,1.1,0,-1.1,0)
 (1970-01-01T00:00:05Z,,1.0999999999999996,0,-1.0999999999999996,0)
(5 rows)

-- select difference(regex) (stub function, explain)
--Testcase 891:
EXPLAIN VERBOSE
SELECT difference('/value[1,4]/') from s3;
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (difference('/value[1,4]/'::text))
   InfluxDB query: SELECT difference(/value[1,4]/) FROM "s3"
(3 rows)

-- select difference(regex) (stub function, result)
--Testcase 892:
SELECT difference('/value[1,4]/') from s3;
                   difference                    
-------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0)
 (1970-01-01T00:00:03Z,,0.8,,,-100)
 (1970-01-01T00:00:04Z,,1.1,,,0)
 (1970-01-01T00:00:05Z,,1.0999999999999996,,,0)
(5 rows)

-- select difference(*) (stub agg function and group by tag only) (explain)
--Testcase 530:
EXPLAIN VERBOSE
SELECT difference_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (difference_all()), tag1
   InfluxDB query: SELECT difference(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select difference(*) (stub agg function and group by tag only) (result)
--Testcase 531:
SELECT difference_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                            difference_all                            
----------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,-0.1,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,-0.09999999999999998,0)
 (1970-01-01T00:00:04Z,,1.1,0,-1.1,0)
(3 rows)

-- select difference(regex) (stub agg function and group by tag only) (explain)
--Testcase 893:
EXPLAIN VERBOSE
SELECT difference('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (difference('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT difference(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select difference(regex) (stub agg function and group by tag only) (result)
--Testcase 894:
SELECT difference('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                   difference                    
-------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0)
 (1970-01-01T00:00:04Z,,1.1,,,0)
(3 rows)

-- select difference(*) (stub function, expose data, explain)
--Testcase 532:
EXPLAIN VERBOSE
SELECT (difference_all()::s3).* from s3;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((difference_all()))::s3)."time", (((difference_all()))::s3).tag1, (((difference_all()))::s3).value1, (((difference_all()))::s3).value2, (((difference_all()))::s3).value3, (((difference_all()))::s3).value4
   InfluxDB query: SELECT difference(*) FROM "s3"
(3 rows)

-- select difference(*) (stub function, expose data, result)
--Testcase 533:
SELECT (difference_all()::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    0.1 |      0 |   -0.1 |      0
 1970-01-01 09:00:02+09 |      |    0.1 |      0 |   -0.1 |      0
 1970-01-01 09:00:03+09 |      |    0.8 |    100 |   -0.8 |   -100
 1970-01-01 09:00:04+09 |      |    1.1 |      0 |   -1.1 |      0
 1970-01-01 09:00:05+09 |      |    1.1 |      0 |   -1.1 |      0
(5 rows)

-- select difference(regex) (stub function, expose data, explain)
--Testcase 895:
EXPLAIN VERBOSE
SELECT (difference('/value[1,4]/')::s3).* from s3;
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((difference('/value[1,4]/'::text)))::s3)."time", (((difference('/value[1,4]/'::text)))::s3).tag1, (((difference('/value[1,4]/'::text)))::s3).value1, (((difference('/value[1,4]/'::text)))::s3).value2, (((difference('/value[1,4]/'::text)))::s3).value3, (((difference('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT difference(/value[1,4]/) FROM "s3"
(3 rows)

-- select difference(regex) (stub function, expose data, result)
--Testcase 896:
SELECT (difference('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    0.1 |        |        |      0
 1970-01-01 09:00:02+09 |      |    0.1 |        |        |      0
 1970-01-01 09:00:03+09 |      |    0.8 |        |        |   -100
 1970-01-01 09:00:04+09 |      |    1.1 |        |        |      0
 1970-01-01 09:00:05+09 |      |    1.1 |        |        |      0
(5 rows)

--Testcase 92:
EXPLAIN VERBOSE
SELECT non_negative_difference(value1),non_negative_difference(value2),non_negative_difference(value3),non_negative_difference(value4) FROM s3;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (non_negative_difference(value1)), (non_negative_difference(value2)), (non_negative_difference(value3)), (non_negative_difference(value4))
   InfluxDB query: SELECT non_negative_difference("value1"), non_negative_difference("value2"), non_negative_difference("value3"), non_negative_difference("value4") FROM "s3"
(3 rows)

--Testcase 93:
SELECT non_negative_difference(value1),non_negative_difference(value2),non_negative_difference(value3),non_negative_difference(value4) FROM s3;
 non_negative_difference | non_negative_difference | non_negative_difference | non_negative_difference 
-------------------------+-------------------------+-------------------------+-------------------------
                     0.1 |                       0 |                         |                       0
                     0.1 |                       0 |                         |                       0
                     0.8 |                     100 |                         |                        
                     1.1 |                       0 |                         |                       0
                     1.1 |                       0 |                         |                       0
(5 rows)

-- select non_negative_difference(*) (stub function, explain)
--Testcase 534:
EXPLAIN VERBOSE
SELECT non_negative_difference_all() from s3;
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (non_negative_difference_all())
   InfluxDB query: SELECT non_negative_difference(*) FROM "s3"
(3 rows)

-- select non_negative_difference(*) (stub function, result)
--Testcase 535:
SELECT non_negative_difference_all() from s3;
           non_negative_difference_all            
--------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,,0)
 (1970-01-01T00:00:03Z,,0.8,100,,)
 (1970-01-01T00:00:04Z,,1.1,0,,0)
 (1970-01-01T00:00:05Z,,1.0999999999999996,0,,0)
(5 rows)

-- select non_negative_difference(regex) (stub agg function, explain)
--Testcase 897:
EXPLAIN VERBOSE
SELECT non_negative_difference('/value[1,4]/') from s3;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (non_negative_difference('/value[1,4]/'::text))
   InfluxDB query: SELECT non_negative_difference(/value[1,4]/) FROM "s3"
(3 rows)

-- select non_negative_difference(*), non_negative_difference(regex) (stub function, result)
--Testcase 898:
SELECT non_negative_difference('/value[1,4]/') from s3;
             non_negative_difference             
-------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0)
 (1970-01-01T00:00:03Z,,0.8,,,)
 (1970-01-01T00:00:04Z,,1.1,,,0)
 (1970-01-01T00:00:05Z,,1.0999999999999996,,,0)
(5 rows)

-- select non_negative_difference(*) (stub function and group by tag only) (explain)
--Testcase 536:
EXPLAIN VERBOSE
SELECT non_negative_difference_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (non_negative_difference_all()), tag1
   InfluxDB query: SELECT non_negative_difference(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select non_negative_difference(*) (stub function and group by tag only) (result)
--Testcase 537:
SELECT non_negative_difference_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
           non_negative_difference_all            
--------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,0,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,0,,0)
 (1970-01-01T00:00:04Z,,1.1,0,,0)
(3 rows)

-- select non_negative_difference(regex) (stub function and group by tag only) (explain)
--Testcase 899:
EXPLAIN VERBOSE
SELECT non_negative_difference('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (non_negative_difference('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT non_negative_difference(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select non_negative_difference(regex) (stub function and group by tag only) (result)
--Testcase 900:
SELECT non_negative_difference('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
             non_negative_difference             
-------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1,,,0)
 (1970-01-01T00:00:02Z,,0.09999999999999998,,,0)
 (1970-01-01T00:00:04Z,,1.1,,,0)
(3 rows)

-- select non_negative_difference(*) (stub function, expose data, explain)
--Testcase 538:
EXPLAIN VERBOSE
SELECT (non_negative_difference_all()::s3).* from s3;
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((non_negative_difference_all()))::s3)."time", (((non_negative_difference_all()))::s3).tag1, (((non_negative_difference_all()))::s3).value1, (((non_negative_difference_all()))::s3).value2, (((non_negative_difference_all()))::s3).value3, (((non_negative_difference_all()))::s3).value4
   InfluxDB query: SELECT non_negative_difference(*) FROM "s3"
(3 rows)

-- select non_negative_difference(*) (stub function, expose data, result)
--Testcase 539:
SELECT (non_negative_difference_all()::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    0.1 |      0 |        |      0
 1970-01-01 09:00:02+09 |      |    0.1 |      0 |        |      0
 1970-01-01 09:00:03+09 |      |    0.8 |    100 |        |       
 1970-01-01 09:00:04+09 |      |    1.1 |      0 |        |      0
 1970-01-01 09:00:05+09 |      |    1.1 |      0 |        |      0
(5 rows)

-- select non_negative_difference(regex) (stub function, expose data, explain)
--Testcase 538:
EXPLAIN VERBOSE
SELECT (non_negative_difference('/value[1,4]/')::s3).* from s3;
                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((non_negative_difference('/value[1,4]/'::text)))::s3)."time", (((non_negative_difference('/value[1,4]/'::text)))::s3).tag1, (((non_negative_difference('/value[1,4]/'::text)))::s3).value1, (((non_negative_difference('/value[1,4]/'::text)))::s3).value2, (((non_negative_difference('/value[1,4]/'::text)))::s3).value3, (((non_negative_difference('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT non_negative_difference(/value[1,4]/) FROM "s3"
(3 rows)

-- select non_negative_difference(regex) (stub function, expose data, result)
--Testcase 901:
SELECT (non_negative_difference('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    0.1 |        |        |      0
 1970-01-01 09:00:02+09 |      |    0.1 |        |        |      0
 1970-01-01 09:00:03+09 |      |    0.8 |        |        |       
 1970-01-01 09:00:04+09 |      |    1.1 |        |        |      0
 1970-01-01 09:00:05+09 |      |    1.1 |        |        |      0
(5 rows)

--Testcase 94:
EXPLAIN VERBOSE
SELECT elapsed(value1),elapsed(value2),elapsed(value3),elapsed(value4) FROM s3;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (elapsed(value1)), (elapsed(value2)), (elapsed(value3)), (elapsed(value4))
   InfluxDB query: SELECT elapsed("value1"), elapsed("value2"), elapsed("value3"), elapsed("value4") FROM "s3"
(3 rows)

--Testcase 95:
SELECT elapsed(value1),elapsed(value2),elapsed(value3),elapsed(value4) FROM s3;
  elapsed   |  elapsed   |  elapsed   |  elapsed   
------------+------------+------------+------------
 1000000000 | 1000000000 | 1000000000 | 1000000000
 1000000000 | 1000000000 | 1000000000 | 1000000000
 1000000000 | 1000000000 | 1000000000 | 1000000000
 1000000000 | 1000000000 | 1000000000 | 1000000000
 1000000000 | 1000000000 | 1000000000 | 1000000000
(5 rows)

--Testcase 96:
EXPLAIN VERBOSE
SELECT elapsed(value1, interval '0.5s'),elapsed(value2, interval '0.2s'),elapsed(value3, interval '0.1s'),elapsed(value4, interval '2s') FROM s3;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (elapsed(value1, '@ 0.5 secs'::interval)), (elapsed(value2, '@ 0.2 secs'::interval)), (elapsed(value3, '@ 0.1 secs'::interval)), (elapsed(value4, '@ 2 secs'::interval))
   InfluxDB query: SELECT elapsed("value1", 0d0h0m0s500000u), elapsed("value2", 0d0h0m0s200000u), elapsed("value3", 0d0h0m0s100000u), elapsed("value4", 0d0h0m2s0u) FROM "s3"
(3 rows)

--Testcase 97:
SELECT elapsed(value1, interval '0.5s'),elapsed(value2, interval '0.2s'),elapsed(value3, interval '0.1s'),elapsed(value4, interval '2s') FROM s3;
 elapsed | elapsed | elapsed | elapsed 
---------+---------+---------+---------
       2 |       5 |      10 |       0
       2 |       5 |      10 |       0
       2 |       5 |      10 |       0
       2 |       5 |      10 |       0
       2 |       5 |      10 |       0
(5 rows)

-- select elapsed(*) (stub function, explain)
--Testcase 540:
EXPLAIN VERBOSE
SELECT elapsed_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (elapsed_all())
   InfluxDB query: SELECT elapsed(*) FROM "s3"
(3 rows)

-- select elapsed(*) (stub function, result)
--Testcase 541:
SELECT elapsed_all() from s3;
                             elapsed_all                             
---------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,1000000000,1000000000,1000000000,1000000000)
 (1970-01-01T00:00:02Z,,1000000000,1000000000,1000000000,1000000000)
 (1970-01-01T00:00:03Z,,1000000000,1000000000,1000000000,1000000000)
 (1970-01-01T00:00:04Z,,1000000000,1000000000,1000000000,1000000000)
 (1970-01-01T00:00:05Z,,1000000000,1000000000,1000000000,1000000000)
(5 rows)

-- select elapsed(regex) (stub function, explain)
--Testcase 902:
EXPLAIN VERBOSE
SELECT elapsed('/value[1,4]/') from s3;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (elapsed('/value[1,4]/'::text))
   InfluxDB query: SELECT elapsed(/value[1,4]/) FROM "s3"
(3 rows)

-- select elapsed(regex) (stub agg function, result)
--Testcase 903:
SELECT elapsed('/value[1,4]/') from s3;
                     elapsed                     
-------------------------------------------------
 (1970-01-01T00:00:01Z,,1000000000,,,1000000000)
 (1970-01-01T00:00:02Z,,1000000000,,,1000000000)
 (1970-01-01T00:00:03Z,,1000000000,,,1000000000)
 (1970-01-01T00:00:04Z,,1000000000,,,1000000000)
 (1970-01-01T00:00:05Z,,1000000000,,,1000000000)
(5 rows)

-- select elapsed(*) (stub function and group by tag only) (explain)
--Testcase 542:
EXPLAIN VERBOSE
SELECT elapsed_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (elapsed_all()), tag1
   InfluxDB query: SELECT elapsed(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select elapsed(*) (stub function and group by tag only) (result)
--Testcase 543:
SELECT elapsed_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                             elapsed_all                             
---------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,1000000000,1000000000,1000000000,1000000000)
 (1970-01-01T00:00:02Z,,1000000000,1000000000,1000000000,1000000000)
 (1970-01-01T00:00:04Z,,1000000000,1000000000,1000000000,1000000000)
(3 rows)

-- select elapsed(regex) (stub function and group by tag only) (explain)
--Testcase 904:
EXPLAIN VERBOSE
SELECT elapsed('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (elapsed('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT elapsed(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select elapsed(regex) (stub function and group by tag only) (result)
--Testcase 905:
SELECT elapsed('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                     elapsed                     
-------------------------------------------------
 (1970-01-01T00:00:01Z,,1000000000,,,1000000000)
 (1970-01-01T00:00:02Z,,1000000000,,,1000000000)
 (1970-01-01T00:00:04Z,,1000000000,,,1000000000)
(3 rows)

-- select elapsed(*) (stub function, expose data, explain)
--Testcase 544:
EXPLAIN VERBOSE
SELECT (elapsed_all()::s3).* from s3;
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((elapsed_all()))::s3)."time", (((elapsed_all()))::s3).tag1, (((elapsed_all()))::s3).value1, (((elapsed_all()))::s3).value2, (((elapsed_all()))::s3).value3, (((elapsed_all()))::s3).value4
   InfluxDB query: SELECT elapsed(*) FROM "s3"
(3 rows)

-- select elapsed(*) (stub function, expose data, result)
--Testcase 545:
SELECT (elapsed_all()::s3).* from s3;
          time          | tag1 |   value1   |   value2   |   value3   |   value4   
------------------------+------+------------+------------+------------+------------
 1970-01-01 09:00:01+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000
 1970-01-01 09:00:02+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000
 1970-01-01 09:00:03+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000
 1970-01-01 09:00:04+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000
 1970-01-01 09:00:05+09 |      | 1000000000 | 1000000000 | 1000000000 | 1000000000
(5 rows)

-- select elapsed(regex) (stub function, expose data, explain)
--Testcase 906:
EXPLAIN VERBOSE
SELECT (elapsed('/value[1,4]/')::s3).* from s3;
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((elapsed('/value[1,4]/'::text)))::s3)."time", (((elapsed('/value[1,4]/'::text)))::s3).tag1, (((elapsed('/value[1,4]/'::text)))::s3).value1, (((elapsed('/value[1,4]/'::text)))::s3).value2, (((elapsed('/value[1,4]/'::text)))::s3).value3, (((elapsed('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT elapsed(/value[1,4]/) FROM "s3"
(3 rows)

-- select elapsed(regex) (stub agg function, expose data, result)
--Testcase 907:
SELECT (elapsed('/value[1,4]/')::s3).* from s3;
          time          | tag1 |   value1   | value2 | value3 |   value4   
------------------------+------+------------+--------+--------+------------
 1970-01-01 09:00:01+09 |      | 1000000000 |        |        | 1000000000
 1970-01-01 09:00:02+09 |      | 1000000000 |        |        | 1000000000
 1970-01-01 09:00:03+09 |      | 1000000000 |        |        | 1000000000
 1970-01-01 09:00:04+09 |      | 1000000000 |        |        | 1000000000
 1970-01-01 09:00:05+09 |      | 1000000000 |        |        | 1000000000
(5 rows)

--Testcase 98:
EXPLAIN VERBOSE
SELECT moving_average(value1, 2),moving_average(value2, 2),moving_average(value3, 2),moving_average(value4, 2) FROM s3;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (moving_average(value1, 2)), (moving_average(value2, 2)), (moving_average(value3, 2)), (moving_average(value4, 2))
   InfluxDB query: SELECT moving_average("value1", 2), moving_average("value2", 2), moving_average("value3", 2), moving_average("value4", 2) FROM "s3"
(3 rows)

--Testcase 99:
SELECT moving_average(value1, 2),moving_average(value2, 2),moving_average(value3, 2),moving_average(value4, 2) FROM s3;
 moving_average | moving_average | moving_average | moving_average 
----------------+----------------+----------------+----------------
           0.15 |            100 |          -0.15 |           -100
           0.25 |            100 |          -0.25 |           -100
            0.7 |            150 |           -0.7 |           -150
           1.65 |            200 |          -1.65 |           -200
           2.75 |            200 |          -2.75 |           -200
(5 rows)

-- select moving_average(*) (stub function, explain)
--Testcase 546:
EXPLAIN VERBOSE
SELECT moving_average_all(2) from s3;
                       QUERY PLAN                        
---------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (moving_average_all(2))
   InfluxDB query: SELECT moving_average(*, 2) FROM "s3"
(3 rows)

-- select moving_average(*) (stub function, result)
--Testcase 547:
SELECT moving_average_all(2) from s3;
                            moving_average_all                             
---------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.15000000000000002,100,-0.15000000000000002,-100)
 (1970-01-01T00:00:02Z,,0.25,100,-0.25,-100)
 (1970-01-01T00:00:03Z,,0.7000000000000001,150,-0.7000000000000001,-150)
 (1970-01-01T00:00:04Z,,1.6500000000000001,200,-1.6500000000000001,-200)
 (1970-01-01T00:00:05Z,,2.75,200,-2.75,-200)
(5 rows)

-- select moving_average(regex) (stub function, explain)
--Testcase 908:
EXPLAIN VERBOSE
SELECT moving_average('/value[1,4]/', 2) from s3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (moving_average('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT moving_average(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select moving_average(regex) (stub function, result)
--Testcase 909:
SELECT moving_average('/value[1,4]/', 2) from s3;
                   moving_average                   
----------------------------------------------------
 (1970-01-01T00:00:01Z,,0.15000000000000002,,,-100)
 (1970-01-01T00:00:02Z,,0.25,,,-100)
 (1970-01-01T00:00:03Z,,0.7000000000000001,,,-150)
 (1970-01-01T00:00:04Z,,1.6500000000000001,,,-200)
 (1970-01-01T00:00:05Z,,2.75,,,-200)
(5 rows)

-- select moving_average(*) (stub function and group by tag only) (explain)
--Testcase 548:
EXPLAIN VERBOSE
SELECT moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (moving_average_all(2)), tag1
   InfluxDB query: SELECT moving_average(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select moving_average(*) (stub function and group by tag only) (result)
--Testcase 549:
SELECT moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                            moving_average_all                             
---------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.15000000000000002,100,-0.15000000000000002,-100)
 (1970-01-01T00:00:02Z,,0.25,100,-0.25,-100)
 (1970-01-01T00:00:04Z,,1.6500000000000001,200,-1.6500000000000001,-200)
(3 rows)

-- select moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 910:
EXPLAIN VERBOSE
SELECT moving_average('/value[1,4]/', 2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (moving_average('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT moving_average(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select moving_average(regex) (stub function and group by tag only) (result)
--Testcase 911:
SELECT moving_average('/value[1,4]/', 2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                   moving_average                   
----------------------------------------------------
 (1970-01-01T00:00:01Z,,0.15000000000000002,,,-100)
 (1970-01-01T00:00:02Z,,0.25,,,-100)
 (1970-01-01T00:00:04Z,,1.6500000000000001,,,-200)
(3 rows)

-- select moving_average(*) (stub function, expose data, explain)
--Testcase 550:
EXPLAIN VERBOSE
SELECT (moving_average_all(2)::s3).* from s3;
                                                                                                                       QUERY PLAN                                                                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((moving_average_all(2)))::s3)."time", (((moving_average_all(2)))::s3).tag1, (((moving_average_all(2)))::s3).value1, (((moving_average_all(2)))::s3).value2, (((moving_average_all(2)))::s3).value3, (((moving_average_all(2)))::s3).value4
   InfluxDB query: SELECT moving_average(*, 2) FROM "s3"
(3 rows)

-- select moving_average(*) (stub function, expose data, result)
--Testcase 551:
SELECT (moving_average_all(2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |   0.15 |    100 |  -0.15 |   -100
 1970-01-01 09:00:02+09 |      |   0.25 |    100 |  -0.25 |   -100
 1970-01-01 09:00:03+09 |      |    0.7 |    150 |   -0.7 |   -150
 1970-01-01 09:00:04+09 |      |   1.65 |    200 |  -1.65 |   -200
 1970-01-01 09:00:05+09 |      |   2.75 |    200 |  -2.75 |   -200
(5 rows)

-- select moving_average(regex) (stub function, expose data, explain)
--Testcase 912:
EXPLAIN VERBOSE
SELECT (moving_average('/value[1,4]/', 2)::s3).* from s3;
                                                                                                                                                                             QUERY PLAN                                                                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((moving_average('/value[1,4]/'::text, 2)))::s3)."time", (((moving_average('/value[1,4]/'::text, 2)))::s3).tag1, (((moving_average('/value[1,4]/'::text, 2)))::s3).value1, (((moving_average('/value[1,4]/'::text, 2)))::s3).value2, (((moving_average('/value[1,4]/'::text, 2)))::s3).value3, (((moving_average('/value[1,4]/'::text, 2)))::s3).value4
   InfluxDB query: SELECT moving_average(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select moving_average(regex) (stub function, expose data, result)
--Testcase 913:
SELECT (moving_average('/value[1,4]/', 2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |   0.15 |        |        |   -100
 1970-01-01 09:00:02+09 |      |   0.25 |        |        |   -100
 1970-01-01 09:00:03+09 |      |    0.7 |        |        |   -150
 1970-01-01 09:00:04+09 |      |   1.65 |        |        |   -200
 1970-01-01 09:00:05+09 |      |   2.75 |        |        |   -200
(5 rows)

--Testcase 111:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator(value1, 2),chande_momentum_oscillator(value2, 2),chande_momentum_oscillator(value3, 2),chande_momentum_oscillator(value4, 2) FROM s3;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (chande_momentum_oscillator(value1, 2)), (chande_momentum_oscillator(value2, 2)), (chande_momentum_oscillator(value3, 2)), (chande_momentum_oscillator(value4, 2))
   InfluxDB query: SELECT chande_momentum_oscillator("value1", 2), chande_momentum_oscillator("value2", 2), chande_momentum_oscillator("value3", 2), chande_momentum_oscillator("value4", 2) FROM "s3"
(3 rows)

--Testcase 112:
SELECT chande_momentum_oscillator(value1, 2),chande_momentum_oscillator(value2, 2),chande_momentum_oscillator(value3, 2),chande_momentum_oscillator(value4, 2) FROM s3;
 chande_momentum_oscillator | chande_momentum_oscillator | chande_momentum_oscillator | chande_momentum_oscillator 
----------------------------+----------------------------+----------------------------+----------------------------
                        100 |                          0 |                       -100 |                          0
                        100 |                          0 |                       -100 |                          0
                        100 |                        100 |                       -100 |                       -100
                        100 |                        100 |                       -100 |                       -100
                        100 |                          0 |                       -100 |                          0
(5 rows)

--Testcase 113:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator(value1, 2, 2),chande_momentum_oscillator(value2, 2, 2),chande_momentum_oscillator(value3, 2, 2),chande_momentum_oscillator(value4, 2, 2) FROM s3;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (chande_momentum_oscillator(value1, 2, 2)), (chande_momentum_oscillator(value2, 2, 2)), (chande_momentum_oscillator(value3, 2, 2)), (chande_momentum_oscillator(value4, 2, 2))
   InfluxDB query: SELECT chande_momentum_oscillator("value1", 2, 2), chande_momentum_oscillator("value2", 2, 2), chande_momentum_oscillator("value3", 2, 2), chande_momentum_oscillator("value4", 2, 2) FROM "s3"
(3 rows)

--Testcase 114:
SELECT chande_momentum_oscillator(value1, 2, 2),chande_momentum_oscillator(value2, 2, 2),chande_momentum_oscillator(value3, 2, 2),chande_momentum_oscillator(value4, 2, 2) FROM s3;
 chande_momentum_oscillator | chande_momentum_oscillator | chande_momentum_oscillator | chande_momentum_oscillator 
----------------------------+----------------------------+----------------------------+----------------------------
                        100 |                          0 |                       -100 |                          0
                        100 |                        100 |                       -100 |                       -100
                        100 |                        100 |                       -100 |                       -100
                        100 |                          0 |                       -100 |                          0
(4 rows)

-- select chande_momentum_oscillator(*) (stub function, explain)
--Testcase 552:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator_all(2) from s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (chande_momentum_oscillator_all(2))
   InfluxDB query: SELECT chande_momentum_oscillator(*, 2) FROM "s3"
(3 rows)

-- select chande_momentum_oscillator(*) (stub function, result)
--Testcase 553:
SELECT chande_momentum_oscillator_all(2) from s3;
      chande_momentum_oscillator_all       
-------------------------------------------
 (1970-01-01T00:00:01Z,,100,0,-100,0)
 (1970-01-01T00:00:02Z,,100,0,-100,0)
 (1970-01-01T00:00:03Z,,100,100,-100,-100)
 (1970-01-01T00:00:04Z,,100,100,-100,-100)
 (1970-01-01T00:00:05Z,,100,0,-100,0)
(5 rows)

-- select chande_momentum_oscillator(regex) (stub function, explain)
--Testcase 914:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator('/value[1,4]/',2) from s3;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (chande_momentum_oscillator('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT chande_momentum_oscillator(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select chande_momentum_oscillator(regex) (stub agg function, result)
--Testcase 915:
SELECT chande_momentum_oscillator('/value[1,4]/',2) from s3;
     chande_momentum_oscillator     
------------------------------------
 (1970-01-01T00:00:01Z,,100,,,0)
 (1970-01-01T00:00:02Z,,100,,,0)
 (1970-01-01T00:00:03Z,,100,,,-100)
 (1970-01-01T00:00:04Z,,100,,,-100)
 (1970-01-01T00:00:05Z,,100,,,0)
(5 rows)

-- select chande_momentum_oscillator(*) (stub function and group by tag only) (explain)
--Testcase 554:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (chande_momentum_oscillator_all(2)), tag1
   InfluxDB query: SELECT chande_momentum_oscillator(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select chande_momentum_oscillator(*) (stub agg function and group by tag only) (result)
--Testcase 555:
SELECT chande_momentum_oscillator_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
    chande_momentum_oscillator_all    
--------------------------------------
 (1970-01-01T00:00:01Z,,100,0,-100,0)
 (1970-01-01T00:00:02Z,,100,0,-100,0)
 (1970-01-01T00:00:04Z,,100,0,-100,0)
(3 rows)

-- select chande_momentum_oscillator(regex) (stub agg function and group by tag only) (explain)
--Testcase 916:
EXPLAIN VERBOSE
SELECT chande_momentum_oscillator('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (chande_momentum_oscillator('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT chande_momentum_oscillator(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select chande_momentum_oscillator(regex) (stub function and group by tag only) (result)
--Testcase 917:
SELECT chande_momentum_oscillator('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
   chande_momentum_oscillator    
---------------------------------
 (1970-01-01T00:00:01Z,,100,,,0)
 (1970-01-01T00:00:02Z,,100,,,0)
 (1970-01-01T00:00:04Z,,100,,,0)
(3 rows)

-- select chande_momentum_oscillator(*) (stub agg function, expose data, explain)
--Testcase 556:
EXPLAIN VERBOSE
SELECT (chande_momentum_oscillator_all(2)::s3).* from s3;
                                                                                                                                                           QUERY PLAN                                                                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((chande_momentum_oscillator_all(2)))::s3)."time", (((chande_momentum_oscillator_all(2)))::s3).tag1, (((chande_momentum_oscillator_all(2)))::s3).value1, (((chande_momentum_oscillator_all(2)))::s3).value2, (((chande_momentum_oscillator_all(2)))::s3).value3, (((chande_momentum_oscillator_all(2)))::s3).value4
   InfluxDB query: SELECT chande_momentum_oscillator(*, 2) FROM "s3"
(3 rows)

-- select chande_momentum_oscillator(*) (stub function, expose data, result)
--Testcase 557:
SELECT (chande_momentum_oscillator_all(2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    100 |      0 |   -100 |      0
 1970-01-01 09:00:02+09 |      |    100 |      0 |   -100 |      0
 1970-01-01 09:00:03+09 |      |    100 |    100 |   -100 |   -100
 1970-01-01 09:00:04+09 |      |    100 |    100 |   -100 |   -100
 1970-01-01 09:00:05+09 |      |    100 |      0 |   -100 |      0
(5 rows)

-- select chande_momentum_oscillator(regex) (stub function, expose data, explain)
--Testcase 918:
EXPLAIN VERBOSE
SELECT (chande_momentum_oscillator('/value[1,4]/',2)::s3).* from s3;
                                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3)."time", (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).tag1, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value1, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value2, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value3, (((chande_momentum_oscillator('/value[1,4]/'::text, 2)))::s3).value4
   InfluxDB query: SELECT chande_momentum_oscillator(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select chande_momentum_oscillator(regex) (stub function, expose data, result)
--Testcase 919:
SELECT (chande_momentum_oscillator('/value[1,4]/',2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:01+09 |      |    100 |        |        |      0
 1970-01-01 09:00:02+09 |      |    100 |        |        |      0
 1970-01-01 09:00:03+09 |      |    100 |        |        |   -100
 1970-01-01 09:00:04+09 |      |    100 |        |        |   -100
 1970-01-01 09:00:05+09 |      |    100 |        |        |      0
(5 rows)

--Testcase 100:
EXPLAIN VERBOSE
SELECT exponential_moving_average(value1, 2),exponential_moving_average(value2, 2),exponential_moving_average(value3, 2),exponential_moving_average(value4, 2) FROM s3;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (exponential_moving_average(value1, 2)), (exponential_moving_average(value2, 2)), (exponential_moving_average(value3, 2)), (exponential_moving_average(value4, 2))
   InfluxDB query: SELECT exponential_moving_average("value1", 2), exponential_moving_average("value2", 2), exponential_moving_average("value3", 2), exponential_moving_average("value4", 2) FROM "s3"
(3 rows)

--Testcase 101:
SELECT exponential_moving_average(value1, 2),exponential_moving_average(value2, 2),exponential_moving_average(value3, 2),exponential_moving_average(value4, 2) FROM s3;
 exponential_moving_average | exponential_moving_average | exponential_moving_average | exponential_moving_average 
----------------------------+----------------------------+----------------------------+----------------------------
          0.166666666666667 |                        100 |         -0.166666666666667 |                       -100
          0.255555555555556 |                        100 |         -0.255555555555556 |                       -100
          0.818518518518519 |           166.666666666667 |         -0.818518518518519 |          -166.666666666667
           1.73950617283951 |           188.888888888889 |          -1.73950617283951 |          -188.888888888889
            2.7798353909465 |           196.296296296296 |           -2.7798353909465 |          -196.296296296296
(5 rows)

--Testcase 102:
EXPLAIN VERBOSE
SELECT exponential_moving_average(value1, 2, 2),exponential_moving_average(value2, 2, 2),exponential_moving_average(value3, 2, 2),exponential_moving_average(value4, 2, 2) FROM s3;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (exponential_moving_average(value1, 2, 2)), (exponential_moving_average(value2, 2, 2)), (exponential_moving_average(value3, 2, 2)), (exponential_moving_average(value4, 2, 2))
   InfluxDB query: SELECT exponential_moving_average("value1", 2, 2), exponential_moving_average("value2", 2, 2), exponential_moving_average("value3", 2, 2), exponential_moving_average("value4", 2, 2) FROM "s3"
(3 rows)

--Testcase 103:
SELECT exponential_moving_average(value1, 2, 2),exponential_moving_average(value2, 2, 2),exponential_moving_average(value3, 2, 2),exponential_moving_average(value4, 2, 2) FROM s3;
 exponential_moving_average | exponential_moving_average | exponential_moving_average | exponential_moving_average 
----------------------------+----------------------------+----------------------------+----------------------------
          0.255555555555556 |                        100 |         -0.255555555555556 |                       -100
          0.818518518518519 |           166.666666666667 |         -0.818518518518519 |          -166.666666666667
           1.73950617283951 |           188.888888888889 |          -1.73950617283951 |          -188.888888888889
            2.7798353909465 |           196.296296296296 |           -2.7798353909465 |          -196.296296296296
(4 rows)

-- select exponential_moving_average(*) (stub function, explain)
--Testcase 558:
EXPLAIN VERBOSE
SELECT exponential_moving_average_all(2) from s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (exponential_moving_average_all(2))
   InfluxDB query: SELECT exponential_moving_average(*, 2) FROM "s3"
(3 rows)

-- select exponential_moving_average(*) (stub function, result)
--Testcase 559:
SELECT exponential_moving_average_all(2) from s3;
                                    exponential_moving_average_all                                     
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.16666666666666669,100,-0.16666666666666669,-100)
 (1970-01-01T00:00:02Z,,0.25555555555555554,100,-0.25555555555555554,-100)
 (1970-01-01T00:00:03Z,,0.8185185185185185,166.66666666666666,-0.8185185185185185,-166.66666666666666)
 (1970-01-01T00:00:04Z,,1.7395061728395063,188.88888888888889,-1.7395061728395063,-188.88888888888889)
 (1970-01-01T00:00:05Z,,2.779835390946502,196.2962962962963,-2.779835390946502,-196.2962962962963)
(5 rows)

-- select exponential_moving_average(regex) (stub function, explain)
--Testcase 920:
EXPLAIN VERBOSE
SELECT exponential_moving_average('/value[1,4]/',2) from s3;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (exponential_moving_average('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT exponential_moving_average(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select exponential_moving_average(regex) (stub function, result)
--Testcase 921:
SELECT exponential_moving_average('/value[1,4]/',2) from s3;
                    exponential_moving_average                    
------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.16666666666666669,,,-100)
 (1970-01-01T00:00:02Z,,0.25555555555555554,,,-100)
 (1970-01-01T00:00:03Z,,0.8185185185185185,,,-166.66666666666666)
 (1970-01-01T00:00:04Z,,1.7395061728395063,,,-188.88888888888889)
 (1970-01-01T00:00:05Z,,2.779835390946502,,,-196.2962962962963)
(5 rows)

-- select exponential_moving_average(*) (stub function and group by tag only) (explain)
--Testcase 560:
EXPLAIN VERBOSE
SELECT exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (exponential_moving_average_all(2)), tag1
   InfluxDB query: SELECT exponential_moving_average(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select exponential_moving_average(*) (stub function and group by tag only) (result)
--Testcase 561:
SELECT exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                      exponential_moving_average_all                       
---------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.16666666666666669,100,-0.16666666666666669,-100)
 (1970-01-01T00:00:02Z,,0.25555555555555554,100,-0.25555555555555554,-100)
 (1970-01-01T00:00:04Z,,1.8333333333333335,200,-1.8333333333333335,-200)
(3 rows)

-- select exponential_moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 922:
EXPLAIN VERBOSE
SELECT exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (exponential_moving_average('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT exponential_moving_average(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select exponential_moving_average(regex) (stub function and group by tag only) (result)
--Testcase 923:
SELECT exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
             exponential_moving_average             
----------------------------------------------------
 (1970-01-01T00:00:01Z,,0.16666666666666669,,,-100)
 (1970-01-01T00:00:02Z,,0.25555555555555554,,,-100)
 (1970-01-01T00:00:04Z,,1.8333333333333335,,,-200)
(3 rows)

--Testcase 115:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average(value1, 2),double_exponential_moving_average(value2, 2),double_exponential_moving_average(value3, 2),double_exponential_moving_average(value4, 2) FROM s3;
                                                                                                            QUERY PLAN                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (double_exponential_moving_average(value1, 2)), (double_exponential_moving_average(value2, 2)), (double_exponential_moving_average(value3, 2)), (double_exponential_moving_average(value4, 2))
   InfluxDB query: SELECT double_exponential_moving_average("value1", 2), double_exponential_moving_average("value2", 2), double_exponential_moving_average("value3", 2), double_exponential_moving_average("value4", 2) FROM "s3"
(3 rows)

--Testcase 116:
SELECT double_exponential_moving_average(value1, 2),double_exponential_moving_average(value2, 2),double_exponential_moving_average(value3, 2),double_exponential_moving_average(value4, 2) FROM s3;
 double_exponential_moving_average | double_exponential_moving_average | double_exponential_moving_average | double_exponential_moving_average 
-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
                 0.188888888888889 |                               100 |                -0.188888888888889 |                              -100
                 0.292592592592593 |                               100 |                -0.292592592592593 |                              -100
                  1.01851851851852 |                  188.888888888889 |                 -1.01851851851852 |                 -188.888888888889
                  2.11316872427984 |                  203.703703703704 |                 -2.11316872427984 |                 -203.703703703704
                  3.25116598079561 |                  203.703703703704 |                 -3.25116598079561 |                 -203.703703703704
(5 rows)

--Testcase 117:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average(value1, 2, 2),double_exponential_moving_average(value2, 2, 2),double_exponential_moving_average(value3, 2, 2),double_exponential_moving_average(value4, 2, 2) FROM s3;
                                                                                                                  QUERY PLAN                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (double_exponential_moving_average(value1, 2, 2)), (double_exponential_moving_average(value2, 2, 2)), (double_exponential_moving_average(value3, 2, 2)), (double_exponential_moving_average(value4, 2, 2))
   InfluxDB query: SELECT double_exponential_moving_average("value1", 2, 2), double_exponential_moving_average("value2", 2, 2), double_exponential_moving_average("value3", 2, 2), double_exponential_moving_average("value4", 2, 2) FROM "s3"
(3 rows)

--Testcase 118:
SELECT double_exponential_moving_average(value1, 2, 2),double_exponential_moving_average(value2, 2, 2),double_exponential_moving_average(value3, 2, 2),double_exponential_moving_average(value4, 2, 2) FROM s3;
 double_exponential_moving_average | double_exponential_moving_average | double_exponential_moving_average | double_exponential_moving_average 
-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
                 0.292592592592593 |                               100 |                -0.292592592592593 |                              -100
                  1.01851851851852 |                  188.888888888889 |                 -1.01851851851852 |                 -188.888888888889
                  2.11316872427984 |                  203.703703703704 |                 -2.11316872427984 |                 -203.703703703704
                  3.25116598079561 |                  203.703703703704 |                 -3.25116598079561 |                 -203.703703703704
(4 rows)

-- select double_exponential_moving_average(*) (stub function, explain)
--Testcase 562:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average_all(2) from s3;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (double_exponential_moving_average_all(2))
   InfluxDB query: SELECT double_exponential_moving_average(*, 2) FROM "s3"
(3 rows)

-- select double_exponential_moving_average(*) (stub function, result)
--Testcase 563:
SELECT double_exponential_moving_average_all(2) from s3;
                                 double_exponential_moving_average_all                                 
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1888888888888889,100,-0.1888888888888889,-100)
 (1970-01-01T00:00:02Z,,0.29259259259259257,100,-0.29259259259259257,-100)
 (1970-01-01T00:00:03Z,,1.0185185185185186,188.88888888888889,-1.0185185185185186,-188.88888888888889)
 (1970-01-01T00:00:04Z,,2.1131687242798356,203.7037037037037,-2.1131687242798356,-203.7037037037037)
 (1970-01-01T00:00:05Z,,3.2511659807956104,203.70370370370372,-3.2511659807956104,-203.70370370370372)
(5 rows)

-- select double_exponential_moving_average(regex) (stub function, explain)
--Testcase 924:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average('/value[1,4]/',2) from s3;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (double_exponential_moving_average('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT double_exponential_moving_average(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select double_exponential_moving_average(regex) (stub function, result)
--Testcase 925:
SELECT double_exponential_moving_average('/value[1,4]/',2) from s3;
                double_exponential_moving_average                 
------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1888888888888889,,,-100)
 (1970-01-01T00:00:02Z,,0.29259259259259257,,,-100)
 (1970-01-01T00:00:03Z,,1.0185185185185186,,,-188.88888888888889)
 (1970-01-01T00:00:04Z,,2.1131687242798356,,,-203.7037037037037)
 (1970-01-01T00:00:05Z,,3.2511659807956104,,,-203.70370370370372)
(5 rows)

-- select double_exponential_moving_average(*) (stub function and group by tag only) (explain)
--Testcase 564:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (double_exponential_moving_average_all(2)), tag1
   InfluxDB query: SELECT double_exponential_moving_average(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select double_exponential_moving_average(*) (stub function and group by tag only) (result)
--Testcase 565:
SELECT double_exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                   double_exponential_moving_average_all                   
---------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1888888888888889,100,-0.1888888888888889,-100)
 (1970-01-01T00:00:02Z,,0.29259259259259257,100,-0.29259259259259257,-100)
 (1970-01-01T00:00:04Z,,2.077777777777778,200,-2.077777777777778,-200)
(3 rows)

-- select double_exponential_moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 926:
EXPLAIN VERBOSE
SELECT double_exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (double_exponential_moving_average('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT double_exponential_moving_average(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select double_exponential_moving_average(regex) (stub function and group by tag only) (result)
--Testcase 927:
SELECT double_exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
         double_exponential_moving_average          
----------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1888888888888889,,,-100)
 (1970-01-01T00:00:02Z,,0.29259259259259257,,,-100)
 (1970-01-01T00:00:04Z,,2.077777777777778,,,-200)
(3 rows)

--Testcase 119:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio(value1, 2),kaufmans_efficiency_ratio(value2, 2),kaufmans_efficiency_ratio(value3, 2),kaufmans_efficiency_ratio(value4, 2) FROM s3;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (kaufmans_efficiency_ratio(value1, 2)), (kaufmans_efficiency_ratio(value2, 2)), (kaufmans_efficiency_ratio(value3, 2)), (kaufmans_efficiency_ratio(value4, 2))
   InfluxDB query: SELECT kaufmans_efficiency_ratio("value1", 2), kaufmans_efficiency_ratio("value2", 2), kaufmans_efficiency_ratio("value3", 2), kaufmans_efficiency_ratio("value4", 2) FROM "s3"
(3 rows)

--Testcase 120:
SELECT kaufmans_efficiency_ratio(value1, 2),kaufmans_efficiency_ratio(value2, 2),kaufmans_efficiency_ratio(value3, 2),kaufmans_efficiency_ratio(value4, 2) FROM s3;
 kaufmans_efficiency_ratio | kaufmans_efficiency_ratio | kaufmans_efficiency_ratio | kaufmans_efficiency_ratio 
---------------------------+---------------------------+---------------------------+---------------------------
                         1 |                         0 |                         1 |                         0
                         1 |                         1 |                         1 |                         1
                         1 |                         1 |                         1 |                         1
                         1 |                         0 |                         1 |                         0
(4 rows)

--Testcase 121:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio(value1, 2, 2),kaufmans_efficiency_ratio(value2, 2, 2),kaufmans_efficiency_ratio(value3, 2, 2),kaufmans_efficiency_ratio(value4, 2, 2) FROM s3;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (kaufmans_efficiency_ratio(value1, 2, 2)), (kaufmans_efficiency_ratio(value2, 2, 2)), (kaufmans_efficiency_ratio(value3, 2, 2)), (kaufmans_efficiency_ratio(value4, 2, 2))
   InfluxDB query: SELECT kaufmans_efficiency_ratio("value1", 2, 2), kaufmans_efficiency_ratio("value2", 2, 2), kaufmans_efficiency_ratio("value3", 2, 2), kaufmans_efficiency_ratio("value4", 2, 2) FROM "s3"
(3 rows)

--Testcase 122:
SELECT kaufmans_efficiency_ratio(value1, 2, 2),kaufmans_efficiency_ratio(value2, 2, 2),kaufmans_efficiency_ratio(value3, 2, 2),kaufmans_efficiency_ratio(value4, 2, 2) FROM s3;
 kaufmans_efficiency_ratio | kaufmans_efficiency_ratio | kaufmans_efficiency_ratio | kaufmans_efficiency_ratio 
---------------------------+---------------------------+---------------------------+---------------------------
                         1 |                         0 |                         1 |                         0
                         1 |                         1 |                         1 |                         1
                         1 |                         1 |                         1 |                         1
                         1 |                         0 |                         1 |                         0
(4 rows)

-- select kaufmans_efficiency_ratio(*) (stub function, explain)
--Testcase 566:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio_all(2) from s3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (kaufmans_efficiency_ratio_all(2))
   InfluxDB query: SELECT kaufmans_efficiency_ratio(*, 2) FROM "s3"
(3 rows)

-- select kaufmans_efficiency_ratio(*) (stub function, result)
--Testcase 567:
SELECT kaufmans_efficiency_ratio_all(2) from s3;
                   kaufmans_efficiency_ratio_all                   
-------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,1,0,1,0)
 (1970-01-01T00:00:03Z,,1.0000000000000002,1,1.0000000000000002,1)
 (1970-01-01T00:00:04Z,,1,1,1,1)
 (1970-01-01T00:00:05Z,,1,0,1,0)
(4 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function, explain)
--Testcase 928:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio('/value[1,4]/',2) from s3;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (kaufmans_efficiency_ratio('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT kaufmans_efficiency_ratio(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function, result)
--Testcase 929:
SELECT kaufmans_efficiency_ratio('/value[1,4]/',2) from s3;
           kaufmans_efficiency_ratio            
------------------------------------------------
 (1970-01-01T00:00:02Z,,1,,,0)
 (1970-01-01T00:00:03Z,,1.0000000000000002,,,1)
 (1970-01-01T00:00:04Z,,1,,,1)
 (1970-01-01T00:00:05Z,,1,,,0)
(4 rows)

-- select kaufmans_efficiency_ratio(*) (stub function and group by tag only) (explain)
--Testcase 568:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (kaufmans_efficiency_ratio_all(2)), tag1
   InfluxDB query: SELECT kaufmans_efficiency_ratio(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select kaufmans_efficiency_ratio(*) (stub function and group by tag only) (result)
--Testcase 569:
SELECT kaufmans_efficiency_ratio_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
  kaufmans_efficiency_ratio_all  
---------------------------------
 (1970-01-01T00:00:02Z,,1,0,1,0)
(1 row)

-- select kaufmans_efficiency_ratio(regex) (stub function and group by tag only) (explain)
--Testcase 930:
EXPLAIN VERBOSE
SELECT kaufmans_efficiency_ratio('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT kaufmans_efficiency_ratio(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function and group by tag only) (result)
--Testcase 931:
SELECT kaufmans_efficiency_ratio('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
   kaufmans_efficiency_ratio   
-------------------------------
 (1970-01-01T00:00:02Z,,1,,,0)
(1 row)

-- select kaufmans_efficiency_ratio(*) (stub function, expose data, explain)
--Testcase 570:
EXPLAIN VERBOSE
SELECT (kaufmans_efficiency_ratio_all(2)::s3).* from s3;
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((kaufmans_efficiency_ratio_all(2)))::s3)."time", (((kaufmans_efficiency_ratio_all(2)))::s3).tag1, (((kaufmans_efficiency_ratio_all(2)))::s3).value1, (((kaufmans_efficiency_ratio_all(2)))::s3).value2, (((kaufmans_efficiency_ratio_all(2)))::s3).value3, (((kaufmans_efficiency_ratio_all(2)))::s3).value4
   InfluxDB query: SELECT kaufmans_efficiency_ratio(*, 2) FROM "s3"
(3 rows)

-- select kaufmans_efficiency_ratio(*) (stub function, expose data, result)
--Testcase 571:
SELECT (kaufmans_efficiency_ratio_all(2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:02+09 |      |      1 |      0 |      1 |      0
 1970-01-01 09:00:03+09 |      |      1 |      1 |      1 |      1
 1970-01-01 09:00:04+09 |      |      1 |      1 |      1 |      1
 1970-01-01 09:00:05+09 |      |      1 |      0 |      1 |      0
(4 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function, expose data, explain)
--Testcase 932:
EXPLAIN VERBOSE
SELECT (kaufmans_efficiency_ratio('/value[1,4]/',2)::s3).* from s3;
                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3)."time", (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).tag1, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value1, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value2, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value3, (((kaufmans_efficiency_ratio('/value[1,4]/'::text, 2)))::s3).value4
   InfluxDB query: SELECT kaufmans_efficiency_ratio(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select kaufmans_efficiency_ratio(regex) (stub function, expose data, result)
--Testcase 933:
SELECT (kaufmans_efficiency_ratio('/value[1,4]/',2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:02+09 |      |      1 |        |        |      0
 1970-01-01 09:00:03+09 |      |      1 |        |        |      1
 1970-01-01 09:00:04+09 |      |      1 |        |        |      1
 1970-01-01 09:00:05+09 |      |      1 |        |        |      0
(4 rows)

--Testcase 123:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average(value1, 2),kaufmans_adaptive_moving_average(value2, 2),kaufmans_adaptive_moving_average(value3, 2),kaufmans_adaptive_moving_average(value4, 2) FROM s3;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (kaufmans_adaptive_moving_average(value1, 2)), (kaufmans_adaptive_moving_average(value2, 2)), (kaufmans_adaptive_moving_average(value3, 2)), (kaufmans_adaptive_moving_average(value4, 2))
   InfluxDB query: SELECT kaufmans_adaptive_moving_average("value1", 2), kaufmans_adaptive_moving_average("value2", 2), kaufmans_adaptive_moving_average("value3", 2), kaufmans_adaptive_moving_average("value4", 2) FROM "s3"
(3 rows)

--Testcase 124:
SELECT kaufmans_adaptive_moving_average(value1, 2),kaufmans_adaptive_moving_average(value2, 2),kaufmans_adaptive_moving_average(value3, 2),kaufmans_adaptive_moving_average(value4, 2) FROM s3;
 kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average 
----------------------------------+----------------------------------+----------------------------------+----------------------------------
                0.244444444444444 |                              100 |               -0.244444444444444 |                             -100
                0.624691358024692 |                 144.444444444444 |               -0.624691358024692 |                -144.444444444444
                 1.32482853223594 |                 169.135802469136 |                -1.32482853223594 |                -169.135802469136
                 2.20268251790886 |                 169.264269472386 |                -2.20268251790886 |                -169.264269472386
(4 rows)

--Testcase 125:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average(value1, 2, 2),kaufmans_adaptive_moving_average(value2, 2, 2),kaufmans_adaptive_moving_average(value3, 2, 2),kaufmans_adaptive_moving_average(value4, 2, 2) FROM s3;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (kaufmans_adaptive_moving_average(value1, 2, 2)), (kaufmans_adaptive_moving_average(value2, 2, 2)), (kaufmans_adaptive_moving_average(value3, 2, 2)), (kaufmans_adaptive_moving_average(value4, 2, 2))
   InfluxDB query: SELECT kaufmans_adaptive_moving_average("value1", 2, 2), kaufmans_adaptive_moving_average("value2", 2, 2), kaufmans_adaptive_moving_average("value3", 2, 2), kaufmans_adaptive_moving_average("value4", 2, 2) FROM "s3"
(3 rows)

--Testcase 126:
SELECT kaufmans_adaptive_moving_average(value1, 2, 2),kaufmans_adaptive_moving_average(value2, 2, 2),kaufmans_adaptive_moving_average(value3, 2, 2),kaufmans_adaptive_moving_average(value4, 2, 2) FROM s3;
 kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average | kaufmans_adaptive_moving_average 
----------------------------------+----------------------------------+----------------------------------+----------------------------------
                0.244444444444444 |                              100 |               -0.244444444444444 |                             -100
                0.624691358024692 |                 144.444444444444 |               -0.624691358024692 |                -144.444444444444
                 1.32482853223594 |                 169.135802469136 |                -1.32482853223594 |                -169.135802469136
                 2.20268251790886 |                 169.264269472386 |                -2.20268251790886 |                -169.264269472386
(4 rows)

-- select kaufmans_adaptive_moving_average(*) (stub function, explain)
--Testcase 572:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average_all(2) from s3;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (kaufmans_adaptive_moving_average_all(2))
   InfluxDB query: SELECT kaufmans_adaptive_moving_average(*, 2) FROM "s3"
(3 rows)

-- select kaufmans_adaptive_moving_average(*) (stub function, result)
--Testcase 573:
SELECT kaufmans_adaptive_moving_average_all(2) from s3;
                                 kaufmans_adaptive_moving_average_all                                  
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,0.24444444444444446,100,-0.24444444444444446,-100)
 (1970-01-01T00:00:03Z,,0.6246913580246916,144.44444444444446,-0.6246913580246916,-144.44444444444446)
 (1970-01-01T00:00:04Z,,1.3248285322359399,169.13580246913583,-1.3248285322359399,-169.13580246913583)
 (1970-01-01T00:00:05Z,,2.2026825179088556,169.26426947238605,-2.2026825179088556,-169.26426947238605)
(4 rows)

-- select kaufmans_adaptive_moving_average(regex) (stub function, explain)
--Testcase 934:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average('/value[1,4]/',2) from s3;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT kaufmans_adaptive_moving_average(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select kaufmans_adaptive_moving_average(regex) (stub agg function, result)
--Testcase 935:
SELECT kaufmans_adaptive_moving_average('/value[1,4]/',2) from s3;
                 kaufmans_adaptive_moving_average                 
------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,0.24444444444444446,,,-100)
 (1970-01-01T00:00:03Z,,0.6246913580246916,,,-144.44444444444446)
 (1970-01-01T00:00:04Z,,1.3248285322359399,,,-169.13580246913583)
 (1970-01-01T00:00:05Z,,2.2026825179088556,,,-169.26426947238605)
(4 rows)

-- select kaufmans_adaptive_moving_average(*) (stub function and group by tag only) (explain)
--Testcase 574:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (kaufmans_adaptive_moving_average_all(2)), tag1
   InfluxDB query: SELECT kaufmans_adaptive_moving_average(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select kaufmans_adaptive_moving_average(*) (stub function and group by tag only) (result)
--Testcase 575:
SELECT kaufmans_adaptive_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                   kaufmans_adaptive_moving_average_all                    
---------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,0.24444444444444446,100,-0.24444444444444446,-100)
(1 row)

-- select kaufmans_adaptive_moving_average(regex) (stub function and group by tag only) (explain)
--Testcase 936:
EXPLAIN VERBOSE
SELECT kaufmans_adaptive_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (kaufmans_adaptive_moving_average('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT kaufmans_adaptive_moving_average(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select kaufmans_adaptive_moving_average(regex) (stub function and group by tag only) (result)
--Testcase 937:
SELECT kaufmans_adaptive_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
          kaufmans_adaptive_moving_average          
----------------------------------------------------
 (1970-01-01T00:00:02Z,,0.24444444444444446,,,-100)
(1 row)

--Testcase 127:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average(value1, 2),triple_exponential_moving_average(value2, 2),triple_exponential_moving_average(value3, 2),triple_exponential_moving_average(value4, 2) FROM s3;
                                                                                                            QUERY PLAN                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (triple_exponential_moving_average(value1, 2)), (triple_exponential_moving_average(value2, 2)), (triple_exponential_moving_average(value3, 2)), (triple_exponential_moving_average(value4, 2))
   InfluxDB query: SELECT triple_exponential_moving_average("value1", 2), triple_exponential_moving_average("value2", 2), triple_exponential_moving_average("value3", 2), triple_exponential_moving_average("value4", 2) FROM "s3"
(3 rows)

--Testcase 128:
SELECT triple_exponential_moving_average(value1, 2),triple_exponential_moving_average(value2, 2),triple_exponential_moving_average(value3, 2),triple_exponential_moving_average(value4, 2) FROM s3;
 triple_exponential_moving_average | triple_exponential_moving_average | triple_exponential_moving_average | triple_exponential_moving_average 
-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
                 0.196296296296296 |                               100 |                -0.196296296296296 |                              -100
                               0.3 |                               100 |                              -0.3 |                              -100
                  1.07530864197531 |                  196.296296296296 |                 -1.07530864197531 |                 -196.296296296296
                  2.18998628257888 |                  203.703703703704 |                 -2.18998628257888 |                 -203.703703703704
                  3.30932784636488 |                  201.234567901235 |                 -3.30932784636488 |                 -201.234567901235
(5 rows)

--Testcase 129:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average(value1, 2, 2),triple_exponential_moving_average(value2, 2, 2),triple_exponential_moving_average(value3, 2, 2),triple_exponential_moving_average(value4, 2, 2) FROM s3;
                                                                                                                  QUERY PLAN                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (triple_exponential_moving_average(value1, 2, 2)), (triple_exponential_moving_average(value2, 2, 2)), (triple_exponential_moving_average(value3, 2, 2)), (triple_exponential_moving_average(value4, 2, 2))
   InfluxDB query: SELECT triple_exponential_moving_average("value1", 2, 2), triple_exponential_moving_average("value2", 2, 2), triple_exponential_moving_average("value3", 2, 2), triple_exponential_moving_average("value4", 2, 2) FROM "s3"
(3 rows)

--Testcase 130:
SELECT triple_exponential_moving_average(value1, 2, 2),triple_exponential_moving_average(value2, 2, 2),triple_exponential_moving_average(value3, 2, 2),triple_exponential_moving_average(value4, 2, 2) FROM s3;
 triple_exponential_moving_average | triple_exponential_moving_average | triple_exponential_moving_average | triple_exponential_moving_average 
-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
                               0.3 |                               100 |                              -0.3 |                              -100
                  1.07530864197531 |                  196.296296296296 |                 -1.07530864197531 |                 -196.296296296296
                  2.18998628257888 |                  203.703703703704 |                 -2.18998628257888 |                 -203.703703703704
                  3.30932784636488 |                  201.234567901235 |                 -3.30932784636488 |                 -201.234567901235
(4 rows)

-- select triple_exponential_moving_average(*) (stub function, explain)
--Testcase 576:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average_all(2) from s3;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (triple_exponential_moving_average_all(2))
   InfluxDB query: SELECT triple_exponential_moving_average(*, 2) FROM "s3"
(3 rows)

-- select triple_exponential_moving_average(*) (stub function, result)
--Testcase 577:
SELECT triple_exponential_moving_average_all(2) from s3;
                                 triple_exponential_moving_average_all                                 
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1962962962962963,100,-0.1962962962962963,-100)
 (1970-01-01T00:00:02Z,,0.30000000000000004,100,-0.30000000000000004,-100)
 (1970-01-01T00:00:03Z,,1.0753086419753088,196.29629629629636,-1.0753086419753088,-196.29629629629636)
 (1970-01-01T00:00:04Z,,2.189986282578875,203.70370370370372,-2.189986282578875,-203.70370370370372)
 (1970-01-01T00:00:05Z,,3.309327846364883,201.23456790123464,-3.309327846364883,-201.23456790123464)
(5 rows)

-- select triple_exponential_moving_average(regex) (stub function, explain)
--Testcase 938:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average('/value[1,4]/',2) from s3;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (triple_exponential_moving_average('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT triple_exponential_moving_average(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select triple_exponential_moving_average(regex) (stub function, result)
--Testcase 939:
SELECT triple_exponential_moving_average('/value[1,4]/',2) from s3;
                triple_exponential_moving_average                 
------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1962962962962963,,,-100)
 (1970-01-01T00:00:02Z,,0.30000000000000004,,,-100)
 (1970-01-01T00:00:03Z,,1.0753086419753088,,,-196.29629629629636)
 (1970-01-01T00:00:04Z,,2.189986282578875,,,-203.70370370370372)
 (1970-01-01T00:00:05Z,,3.309327846364883,,,-201.23456790123464)
(5 rows)

-- select triple_exponential_moving_average(*) (stub function and group by tag only) (explain)
--Testcase 578:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (triple_exponential_moving_average_all(2)), tag1
   InfluxDB query: SELECT triple_exponential_moving_average(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select triple_exponential_moving_average(*) (stub function and group by tag only) (result)
--Testcase 579:
SELECT triple_exponential_moving_average_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                   triple_exponential_moving_average_all                   
---------------------------------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1962962962962963,100,-0.1962962962962963,-100)
 (1970-01-01T00:00:02Z,,0.30000000000000004,100,-0.30000000000000004,-100)
 (1970-01-01T00:00:04Z,,2.1592592592592585,200,-2.1592592592592585,-200)
(3 rows)

-- select triple_exponential_moving_average(regex) (stub agg function and group by tag only) (explain)
--Testcase 940:
EXPLAIN VERBOSE
SELECT triple_exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (triple_exponential_moving_average('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT triple_exponential_moving_average(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select triple_exponential_moving_average(regex) (stub agg function and group by tag only) (result)
--Testcase 941:
SELECT triple_exponential_moving_average('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
         triple_exponential_moving_average          
----------------------------------------------------
 (1970-01-01T00:00:01Z,,0.1962962962962963,,,-100)
 (1970-01-01T00:00:02Z,,0.30000000000000004,,,-100)
 (1970-01-01T00:00:04Z,,2.1592592592592585,,,-200)
(3 rows)

--Testcase 131:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative(value1, 2),triple_exponential_derivative(value2, 2),triple_exponential_derivative(value3, 2),triple_exponential_derivative(value4, 2) FROM s3;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (triple_exponential_derivative(value1, 2)), (triple_exponential_derivative(value2, 2)), (triple_exponential_derivative(value3, 2)), (triple_exponential_derivative(value4, 2))
   InfluxDB query: SELECT triple_exponential_derivative("value1", 2), triple_exponential_derivative("value2", 2), triple_exponential_derivative("value3", 2), triple_exponential_derivative("value4", 2) FROM "s3"
(3 rows)

--Testcase 132:
SELECT triple_exponential_derivative(value1, 2),triple_exponential_derivative(value2, 2),triple_exponential_derivative(value3, 2),triple_exponential_derivative(value4, 2) FROM s3;
 triple_exponential_derivative | triple_exponential_derivative | triple_exponential_derivative | triple_exponential_derivative 
-------------------------------+-------------------------------+-------------------------------+-------------------------------
              45.7142857142857 |                             0 |              45.7142857142857 |                             0
              151.633986928105 |              29.6296296296296 |              151.633986928105 |              29.6296296296296
              124.906204906205 |              22.8571428571429 |              124.906204906205 |              22.8571428571429
              77.3001411523162 |              12.4031007751938 |              77.3001411523162 |              12.4031007751938
(4 rows)

--Testcase 133:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative(value1, 2, 2),triple_exponential_derivative(value2, 2, 2),triple_exponential_derivative(value3, 2, 2),triple_exponential_derivative(value4, 2, 2) FROM s3;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (triple_exponential_derivative(value1, 2, 2)), (triple_exponential_derivative(value2, 2, 2)), (triple_exponential_derivative(value3, 2, 2)), (triple_exponential_derivative(value4, 2, 2))
   InfluxDB query: SELECT triple_exponential_derivative("value1", 2, 2), triple_exponential_derivative("value2", 2, 2), triple_exponential_derivative("value3", 2, 2), triple_exponential_derivative("value4", 2, 2) FROM "s3"
(3 rows)

--Testcase 134:
SELECT triple_exponential_derivative(value1, 2, 2),triple_exponential_derivative(value2, 2, 2),triple_exponential_derivative(value3, 2, 2),triple_exponential_derivative(value4, 2, 2) FROM s3;
 triple_exponential_derivative | triple_exponential_derivative | triple_exponential_derivative | triple_exponential_derivative 
-------------------------------+-------------------------------+-------------------------------+-------------------------------
              45.7142857142857 |                             0 |              45.7142857142857 |                             0
              151.633986928105 |              29.6296296296296 |              151.633986928105 |              29.6296296296296
              124.906204906205 |              22.8571428571429 |              124.906204906205 |              22.8571428571429
              77.3001411523162 |              12.4031007751938 |              77.3001411523162 |              12.4031007751938
(4 rows)

-- select triple_exponential_derivative(*) (stub function, explain)
--Testcase 580:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative_all(2) from s3;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (triple_exponential_derivative_all(2))
   InfluxDB query: SELECT triple_exponential_derivative(*, 2) FROM "s3"
(3 rows)

-- select triple_exponential_derivative(*) (stub function, result)
--Testcase 581:
SELECT triple_exponential_derivative_all(2) from s3;
                                  triple_exponential_derivative_all                                  
-----------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:02Z,,45.71428571428569,0,45.71428571428569,0)
 (1970-01-01T00:00:03Z,,151.63398692810458,29.629629629629626,151.63398692810458,29.629629629629626)
 (1970-01-01T00:00:04Z,,124.90620490620489,22.857142857142865,124.90620490620489,22.857142857142865)
 (1970-01-01T00:00:05Z,,77.30014115231623,12.4031007751938,77.30014115231623,12.4031007751938)
(4 rows)

-- select triple_exponential_derivative(regex) (stub function, explain)
--Testcase 942:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative('/value[1,4]/',2) from s3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (triple_exponential_derivative('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT triple_exponential_derivative(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select triple_exponential_derivative(regex) (stub function, result)
--Testcase 943:
SELECT triple_exponential_derivative('/value[1,4]/',2) from s3;
                  triple_exponential_derivative                  
-----------------------------------------------------------------
 (1970-01-01T00:00:02Z,,45.71428571428569,,,0)
 (1970-01-01T00:00:03Z,,151.63398692810458,,,29.629629629629626)
 (1970-01-01T00:00:04Z,,124.90620490620489,,,22.857142857142865)
 (1970-01-01T00:00:05Z,,77.30014115231623,,,12.4031007751938)
(4 rows)

-- select triple_exponential_derivative(*) (stub function and group by tag only) (explain)
--Testcase 582:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (triple_exponential_derivative_all(2)), tag1
   InfluxDB query: SELECT triple_exponential_derivative(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select triple_exponential_derivative(*) (stub function and group by tag only) (result)
--Testcase 583:
SELECT triple_exponential_derivative_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                triple_exponential_derivative_all                
-----------------------------------------------------------------
 (1970-01-01T00:00:02Z,,45.71428571428569,0,45.71428571428569,0)
(1 row)

-- select triple_exponential_derivative(regex) (stub function and group by tag only) (explain)
--Testcase 944:
EXPLAIN VERBOSE
SELECT triple_exponential_derivative('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (triple_exponential_derivative('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT triple_exponential_derivative(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select triple_exponential_derivative(regex) (stub function and group by tag only) (result)
--Testcase 945:
SELECT triple_exponential_derivative('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
         triple_exponential_derivative         
-----------------------------------------------
 (1970-01-01T00:00:02Z,,45.71428571428569,,,0)
(1 row)

--Testcase 135:
EXPLAIN VERBOSE
SELECT relative_strength_index(value1, 2),relative_strength_index(value2, 2),relative_strength_index(value3, 2),relative_strength_index(value4, 2) FROM s3;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (relative_strength_index(value1, 2)), (relative_strength_index(value2, 2)), (relative_strength_index(value3, 2)), (relative_strength_index(value4, 2))
   InfluxDB query: SELECT relative_strength_index("value1", 2), relative_strength_index("value2", 2), relative_strength_index("value3", 2), relative_strength_index("value4", 2) FROM "s3"
(3 rows)

--Testcase 136:
SELECT relative_strength_index(value1, 2),relative_strength_index(value2, 2),relative_strength_index(value3, 2),relative_strength_index(value4, 2) FROM s3;
 relative_strength_index | relative_strength_index | relative_strength_index | relative_strength_index 
-------------------------+-------------------------+-------------------------+-------------------------
                     100 |                     100 |                       0 |                       0
                     100 |                     100 |                       0 |                       0
                     100 |                     100 |                       0 |                       0
                     100 |                     100 |                       0 |                       0
(4 rows)

--Testcase 137:
EXPLAIN VERBOSE
SELECT relative_strength_index(value1, 2, 2),relative_strength_index(value2, 2, 2),relative_strength_index(value3, 2, 2),relative_strength_index(value4, 2, 2) FROM s3;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (relative_strength_index(value1, 2, 2)), (relative_strength_index(value2, 2, 2)), (relative_strength_index(value3, 2, 2)), (relative_strength_index(value4, 2, 2))
   InfluxDB query: SELECT relative_strength_index("value1", 2, 2), relative_strength_index("value2", 2, 2), relative_strength_index("value3", 2, 2), relative_strength_index("value4", 2, 2) FROM "s3"
(3 rows)

--Testcase 138:
SELECT relative_strength_index(value1, 2, 2),relative_strength_index(value2, 2, 2),relative_strength_index(value3, 2, 2),relative_strength_index(value4, 2, 2) FROM s3;
 relative_strength_index | relative_strength_index | relative_strength_index | relative_strength_index 
-------------------------+-------------------------+-------------------------+-------------------------
                     100 |                     100 |                       0 |                       0
                     100 |                     100 |                       0 |                       0
                     100 |                     100 |                       0 |                       0
                     100 |                     100 |                       0 |                       0
(4 rows)

-- select relative_strength_index(*) (stub function, explain)
--Testcase 584:
EXPLAIN VERBOSE
SELECT relative_strength_index_all(2) from s3;
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (relative_strength_index_all(2))
   InfluxDB query: SELECT relative_strength_index(*, 2) FROM "s3"
(3 rows)

-- select relative_strength_index(*) (stub function, result)
--Testcase 585:
SELECT relative_strength_index_all(2) from s3;
     relative_strength_index_all     
-------------------------------------
 (1970-01-01T00:00:02Z,,100,100,0,0)
 (1970-01-01T00:00:03Z,,100,100,0,0)
 (1970-01-01T00:00:04Z,,100,100,0,0)
 (1970-01-01T00:00:05Z,,100,100,0,0)
(4 rows)

-- select relative_strength_index(regex) (stub agg function, explain)
--Testcase 946:
EXPLAIN VERBOSE
SELECT relative_strength_index('/value[1,4]/',2) from s3;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (relative_strength_index('/value[1,4]/'::text, 2))
   InfluxDB query: SELECT relative_strength_index(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select relative_strength_index(regex) (stub agg function, result)
--Testcase 947:
SELECT relative_strength_index('/value[1,4]/',2) from s3;
     relative_strength_index     
---------------------------------
 (1970-01-01T00:00:02Z,,100,,,0)
 (1970-01-01T00:00:03Z,,100,,,0)
 (1970-01-01T00:00:04Z,,100,,,0)
 (1970-01-01T00:00:05Z,,100,,,0)
(4 rows)

-- select relative_strength_index(*) (stub function and group by tag only) (explain)
--Testcase 586:
EXPLAIN VERBOSE
SELECT relative_strength_index_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (relative_strength_index_all(2)), tag1
   InfluxDB query: SELECT relative_strength_index(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select relative_strength_index(*) (stub function and group by tag only) (result)
--Testcase 587:
SELECT relative_strength_index_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
     relative_strength_index_all     
-------------------------------------
 (1970-01-01T00:00:02Z,,100,100,0,0)
(1 row)

-- select relative_strength_index(regex) (stub function and group by tag only) (explain)
--Testcase 948:
EXPLAIN VERBOSE
SELECT relative_strength_index('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (relative_strength_index('/value[1,4]/'::text, 2)), tag1
   InfluxDB query: SELECT relative_strength_index(/value[1,4]/, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select relative_strength_index(regex) (stub function and group by tag only) (result)
--Testcase 949:
SELECT relative_strength_index('/value[1,4]/',2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
     relative_strength_index     
---------------------------------
 (1970-01-01T00:00:02Z,,100,,,0)
(1 row)

-- select relative_strength_index(*) (stub function, expose data, explain)
--Testcase 588:
EXPLAIN VERBOSE
SELECT (relative_strength_index_all(2)::s3).* from s3;
                                                                                                                                                  QUERY PLAN                                                                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((relative_strength_index_all(2)))::s3)."time", (((relative_strength_index_all(2)))::s3).tag1, (((relative_strength_index_all(2)))::s3).value1, (((relative_strength_index_all(2)))::s3).value2, (((relative_strength_index_all(2)))::s3).value3, (((relative_strength_index_all(2)))::s3).value4
   InfluxDB query: SELECT relative_strength_index(*, 2) FROM "s3"
(3 rows)

-- select relative_strength_index(*) (stub function, expose data, result)
--Testcase 589:
SELECT (relative_strength_index_all(2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:02+09 |      |    100 |    100 |      0 |      0
 1970-01-01 09:00:03+09 |      |    100 |    100 |      0 |      0
 1970-01-01 09:00:04+09 |      |    100 |    100 |      0 |      0
 1970-01-01 09:00:05+09 |      |    100 |    100 |      0 |      0
(4 rows)

-- select relative_strength_index(regex) (stub function, expose data, explain)
--Testcase 950:
EXPLAIN VERBOSE
SELECT (relative_strength_index('/value[1,4]/',2)::s3).* from s3;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((relative_strength_index('/value[1,4]/'::text, 2)))::s3)."time", (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).tag1, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value1, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value2, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value3, (((relative_strength_index('/value[1,4]/'::text, 2)))::s3).value4
   InfluxDB query: SELECT relative_strength_index(/value[1,4]/, 2) FROM "s3"
(3 rows)

-- select relative_strength_index(regex) (stub function, expose data, result)
--Testcase 951:
SELECT (relative_strength_index('/value[1,4]/',2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:02+09 |      |    100 |        |        |      0
 1970-01-01 09:00:03+09 |      |    100 |        |        |      0
 1970-01-01 09:00:04+09 |      |    100 |        |        |      0
 1970-01-01 09:00:05+09 |      |    100 |        |        |      0
(4 rows)

-- select integral (stub agg function, explain)
--Testcase 139:
EXPLAIN VERBOSE
SELECT integral(value1),integral(value2),integral(value3),integral(value4) FROM s3;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (integral(value1)), (integral(value2)), (integral(value3)), (integral(value4))
   InfluxDB query: SELECT integral("value1"), integral("value2"), integral("value3"), integral("value4") FROM "s3"
(3 rows)

-- select integral (stub agg function, result)
--Testcase 140:
SELECT integral(value1),integral(value2),integral(value3),integral(value4) FROM s3;
 integral | integral | integral | integral 
----------+----------+----------+----------
      5.5 |      750 |     -5.5 |     -750
(1 row)

--Testcase 141:
EXPLAIN VERBOSE
SELECT integral(value1, interval '1s'),integral(value2, interval '1s'),integral(value3, interval '1s'),integral(value4, interval '1s') FROM s3;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (integral(value1, '@ 1 sec'::interval)), (integral(value2, '@ 1 sec'::interval)), (integral(value3, '@ 1 sec'::interval)), (integral(value4, '@ 1 sec'::interval))
   InfluxDB query: SELECT integral("value1", 0d0h0m1s0u), integral("value2", 0d0h0m1s0u), integral("value3", 0d0h0m1s0u), integral("value4", 0d0h0m1s0u) FROM "s3"
(3 rows)

-- select integral (stub agg function, result)
--Testcase 142:
SELECT integral(value1, interval '1s'),integral(value2, interval '1s'),integral(value3, interval '1s'),integral(value4, interval '1s') FROM s3;
 integral | integral | integral | integral 
----------+----------+----------+----------
      5.5 |      750 |     -5.5 |     -750
(1 row)

-- select integral (stub agg function, raise exception if not expected type)
--Testcase 143:
SELECT integral(value1::numeric),integral(value2::numeric),integral(value3::numeric),integral(value4::numeric) FROM s3;
ERROR:  stub integral_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function integral_sfunc(double precision,double precision) line 3 at RAISE
-- select integral (stub agg function and group by influx_time() and tag) (explain)
--Testcase 144:
EXPLAIN VERBOSE
SELECT integral("value1"),influx_time(time, interval '1s'),tag1 FROM s3 GROUP BY influx_time(time, interval '1s'), tag1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (integral(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT integral("value1") FROM "s3" GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select integral (stub agg function and group by influx_time() and tag) (result)
--Testcase 145:
SELECT integral("value1"),influx_time(time, interval '1s'),tag1 FROM s3 GROUP BY influx_time(time, interval '1s'), tag1;
 integral |      influx_time       | tag1 
----------+------------------------+------
     0.15 | 1970-01-01 09:00:00+09 | a
     0.25 | 1970-01-01 09:00:01+09 | a
     1.65 | 1970-01-01 09:00:03+09 | b
     2.75 | 1970-01-01 09:00:04+09 | b
(4 rows)

-- select integral (stub agg function and group by influx_time() and tag) (explain)
--Testcase 146:
EXPLAIN VERBOSE
SELECT integral("value1", interval '1s'),influx_time(time, interval '1s'),tag1 FROM s3 GROUP BY influx_time(time, interval '1s'), tag1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (integral(value1, '@ 1 sec'::interval)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT integral("value1", 0d0h0m1s0u) FROM "s3" GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select integral (stub agg function and group by influx_time() and tag) (result)
--Testcase 147:
SELECT integral("value1", interval '1s'),influx_time(time, interval '1s'),tag1 FROM s3 GROUP BY influx_time(time, interval '1s'), tag1;
 integral |      influx_time       | tag1 
----------+------------------------+------
     0.15 | 1970-01-01 09:00:00+09 | a
     0.25 | 1970-01-01 09:00:01+09 | a
     1.65 | 1970-01-01 09:00:03+09 | b
     2.75 | 1970-01-01 09:00:04+09 | b
(4 rows)

-- select integral (stub agg function and group by tag only) (result)
--Testcase 148:
SELECT tag1,integral("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY tag1;
 tag1 | integral 
------+----------
 a    |      0.4
 b    |     1.65
(2 rows)

-- select integral (stub agg function and other aggs) (result)
--Testcase 149:
SELECT sum("value1"),integral("value1"),count("value1") FROM s3;
 sum | integral | count 
-----+----------+-------
 7.2 |      5.5 |     6
(1 row)

-- select integral (stub agg function and group by tag only) (result)
--Testcase 150:
SELECT tag1,integral("value1", interval '1s') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1 ORDER BY tag1;
 tag1 | integral 
------+----------
 a    |      0.4
 b    |     1.65
(2 rows)

-- select integral (stub agg function and other aggs) (result)
--Testcase 151:
SELECT sum("value1"),integral("value1", interval '1s'),count("value1") FROM s3;
 sum | integral | count 
-----+----------+-------
 7.2 |      5.5 |     6
(1 row)

-- select integral over join query (explain)
--Testcase 152:
EXPLAIN VERBOSE
SELECT integral(t1.value1), integral(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=112.64..112.66 rows=1 width=16)
   Output: integral(t1.value1), integral(t2.value1)
   ->  Nested Loop  (cost=20.00..28.14 rows=169 width=16)
         Output: t1.value1, t2.value1
         ->  Foreign Scan on public.s3 t1  (cost=10.00..13.00 rows=13 width=8)
               Output: t1."time", t1.tag1, t1.value1, t1.value2, t1.value3, t1.value4
               InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
         ->  Materialize  (cost=10.00..13.06 rows=13 width=8)
               Output: t2.value1
               ->  Foreign Scan on public.s3 t2  (cost=10.00..13.00 rows=13 width=8)
                     Output: t2.value1
                     InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
(12 rows)

-- select integral over join query (result, stub call error)
--Testcase 153:
SELECT integral(t1.value1), integral(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
ERROR:  stub integral_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function integral_sfunc(double precision,double precision) line 3 at RAISE
-- select integral over join query (explain)
--Testcase 154:
EXPLAIN VERBOSE
SELECT integral(t1.value1, interval '1s'), integral(t2.value1, interval '1s') FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=112.64..112.66 rows=1 width=16)
   Output: integral(t1.value1, '@ 1 sec'::interval), integral(t2.value1, '@ 1 sec'::interval)
   ->  Nested Loop  (cost=20.00..28.14 rows=169 width=16)
         Output: t1.value1, t2.value1
         ->  Foreign Scan on public.s3 t1  (cost=10.00..13.00 rows=13 width=8)
               Output: t1."time", t1.tag1, t1.value1, t1.value2, t1.value3, t1.value4
               InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
         ->  Materialize  (cost=10.00..13.06 rows=13 width=8)
               Output: t2.value1
               ->  Foreign Scan on public.s3 t2  (cost=10.00..13.00 rows=13 width=8)
                     Output: t2.value1
                     InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
(12 rows)

-- select integral over join query (result, stub call error)
--Testcase 155:
SELECT integral(t1.value1, interval '1s'), integral(t2.value1, interval '1s') FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
ERROR:  stub integral_sfunc(double precision, float8, interval) is called
CONTEXT:  PL/pgSQL function integral_sfunc(double precision,double precision,interval) line 3 at RAISE
-- select integral with having (explain)
--Testcase 156:
EXPLAIN VERBOSE
SELECT integral(value1) FROM s3 HAVING integral(value1) > 100;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=3840.00..3840.01 rows=1 width=8)
   Output: integral(value1)
   Filter: (integral(s3.value1) > '100'::double precision)
   ->  Foreign Scan on public.s3  (cost=10.00..2560.00 rows=2560 width=8)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT "value1" FROM "s3"
(6 rows)

-- select integral with having (explain, not pushdown, stub call error)
--Testcase 157:
SELECT integral(value1) FROM s3 HAVING integral(value1) > 100;
ERROR:  stub integral_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function integral_sfunc(double precision,double precision) line 3 at RAISE
-- select integral with having (explain)
--Testcase 158:
EXPLAIN VERBOSE
SELECT integral(value1, interval '1s') FROM s3 HAVING integral(value1, interval '1s') > 100;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Aggregate  (cost=3840.00..3840.01 rows=1 width=8)
   Output: integral(value1, '@ 1 sec'::interval)
   Filter: (integral(s3.value1, '@ 1 sec'::interval) > '100'::double precision)
   ->  Foreign Scan on public.s3  (cost=10.00..2560.00 rows=2560 width=8)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT "value1" FROM "s3"
(6 rows)

-- select integral with having (explain, not pushdown, stub call error)
--Testcase 159:
SELECT integral(value1, interval '1s') FROM s3 HAVING integral(value1, interval '1s') > 100;
ERROR:  stub integral_sfunc(double precision, float8, interval) is called
CONTEXT:  PL/pgSQL function integral_sfunc(double precision,double precision,interval) line 3 at RAISE
-- select integral(*) (stub agg function, explain)
--Testcase 590:
EXPLAIN VERBOSE
SELECT integral_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (integral_all(*))
   InfluxDB query: SELECT integral(*) FROM "s3"
(3 rows)

-- select integral(*) (stub agg function, result)
--Testcase 591:
SELECT integral_all(*) from s3;
               integral_all                
-------------------------------------------
 (1970-01-01T00:00:00Z,,5.5,750,-5.5,-750)
(1 row)

-- select integral(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 592:
EXPLAIN VERBOSE
SELECT integral_all(*) FROM s3 GROUP BY influx_time(time, interval '1s'), tag1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (integral_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT integral(*) FROM "s3" GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select integral(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 593:
SELECT integral_all(*) FROM s3 GROUP BY influx_time(time, interval '1s'), tag1;
                               integral_all                                
---------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.15000000000000002,100,-0.15000000000000002,-100)
 (1970-01-01T00:00:01Z,,0.25,100,-0.25,-100)
 (1970-01-01T00:00:03Z,,1.6500000000000001,200,-1.6500000000000001,-200)
 (1970-01-01T00:00:04Z,,2.75,200,-2.75,-200)
(4 rows)

-- select integral(*) (stub agg function and group by tag only) (explain)
--Testcase 594:
EXPLAIN VERBOSE
SELECT integral_all(*) FROM s3 WHERE value1 > 0.3 GROUP BY tag1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (integral_all(*)), tag1
   InfluxDB query: SELECT integral(*) FROM "s3" WHERE (("value1" > 0.299999999999999989)) GROUP BY "tag1"
(3 rows)

-- select integral(*) (stub agg function and group by tag only) (result)
--Testcase 595:
SELECT integral_all(*) FROM s3 WHERE value1 > 0.3 GROUP BY tag1;
               integral_all                
-------------------------------------------
 (1970-01-01T00:00:00Z,,4.4,400,-4.4,-400)
(1 row)

-- select integral(*) (stub agg function, expose data, explain)
--Testcase 597:
EXPLAIN VERBOSE
SELECT (integral_all(*)::s3).* from s3;
                                                                                                     QUERY PLAN                                                                                                     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((integral_all(*)))::s3)."time", (((integral_all(*)))::s3).tag1, (((integral_all(*)))::s3).value1, (((integral_all(*)))::s3).value2, (((integral_all(*)))::s3).value3, (((integral_all(*)))::s3).value4
   InfluxDB query: SELECT integral(*) FROM "s3"
(3 rows)

-- select integral(*) (stub agg function, expose data, result)
--Testcase 598:
SELECT (integral_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    5.5 |    750 |   -5.5 |   -750
(1 row)

-- select integral(regex) (stub agg function, explain)
--Testcase 599:
EXPLAIN VERBOSE
SELECT integral('/value[1,4]/') from s3;
                        QUERY PLAN                         
-----------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (integral('/value[1,4]/'::text))
   InfluxDB query: SELECT integral(/value[1,4]/) FROM "s3"
(3 rows)

-- select integral(regex) (stub agg function, result)
--Testcase 600:
SELECT integral('/value[1,4]/') from s3;
              integral              
------------------------------------
 (1970-01-01T00:00:00Z,,5.5,,,-750)
(1 row)

-- select integral(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 601:
EXPLAIN VERBOSE
SELECT integral('/^v.*/') FROM s3 GROUP BY influx_time(time, interval '1s'), tag1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (integral('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT integral(/^v.*/) FROM "s3" GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select integral(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 602:
SELECT integral('/^v.*/') FROM s3 GROUP BY influx_time(time, interval '1s'), tag1;
                                 integral                                  
---------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.15000000000000002,100,-0.15000000000000002,-100)
 (1970-01-01T00:00:01Z,,0.25,100,-0.25,-100)
 (1970-01-01T00:00:03Z,,1.6500000000000001,200,-1.6500000000000001,-200)
 (1970-01-01T00:00:04Z,,2.75,200,-2.75,-200)
(4 rows)

-- select integral(regex) (stub agg function and group by tag only) (explain)
--Testcase 603:
EXPLAIN VERBOSE
SELECT integral('/value[1,4]/') FROM s3 WHERE value1 > 0.3 GROUP BY tag1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (integral('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT integral(/value[1,4]/) FROM "s3" WHERE (("value1" > 0.299999999999999989)) GROUP BY "tag1"
(3 rows)

-- select integral(regex) (stub agg function and group by tag only) (result)
--Testcase 604:
SELECT integral('/value[1,4]/') FROM s3 WHERE value1 > 0.3 GROUP BY tag1;
              integral              
------------------------------------
 (1970-01-01T00:00:00Z,,4.4,,,-400)
(1 row)

-- select integral(regex) (stub agg function, expose data, explain)
--Testcase 606:
EXPLAIN VERBOSE
SELECT (integral('/value[1,4]/')::s3).* from s3;
                                                                                                                                                  QUERY PLAN                                                                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((integral('/value[1,4]/'::text)))::s3)."time", (((integral('/value[1,4]/'::text)))::s3).tag1, (((integral('/value[1,4]/'::text)))::s3).value1, (((integral('/value[1,4]/'::text)))::s3).value2, (((integral('/value[1,4]/'::text)))::s3).value3, (((integral('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT integral(/value[1,4]/) FROM "s3"
(3 rows)

-- select integral(regex) (stub agg function, expose data, result)
--Testcase 607:
SELECT (integral('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    5.5 |        |        |   -750
(1 row)

-- select mean (stub agg function, explain)
--Testcase 160:
EXPLAIN VERBOSE
SELECT mean(value1),mean(value2),mean(value3),mean(value4) FROM s3;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (mean(value1)), (mean(value2)), (mean(value3)), (mean(value4))
   InfluxDB query: SELECT mean("value1"), mean("value2"), mean("value3"), mean("value4") FROM "s3"
(3 rows)

-- select mean (stub agg function, result)
--Testcase 161:
SELECT mean(value1),mean(value2),mean(value3),mean(value4) FROM s3;
 mean | mean | mean | mean 
------+------+------+------
  1.2 |  150 | -1.2 | -150
(1 row)

-- select mean (stub agg function, raise exception if not expected type)
--Testcase 162:
SELECT mean(value1::numeric),mean(value2::numeric),mean(value3::numeric),mean(value4::numeric) FROM s3;
ERROR:  stub mean_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function mean_sfunc(double precision,double precision) line 3 at RAISE
-- select mean (stub agg function and group by influx_time() and tag) (explain)
--Testcase 163:
EXPLAIN VERBOSE
SELECT mean("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (mean(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT mean("value1") FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select mean (stub agg function and group by influx_time() and tag) (result)
--Testcase 164:
SELECT mean("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
 mean |      influx_time       | tag1 
------+------------------------+------
  0.1 | 1970-01-01 09:00:00+09 | a
  0.2 | 1970-01-01 09:00:01+09 | a
  0.3 | 1970-01-01 09:00:02+09 | a
      | 1970-01-01 09:00:03+09 | a
      | 1970-01-01 09:00:04+09 | a
      | 1970-01-01 09:00:00+09 | b
      | 1970-01-01 09:00:01+09 | b
      | 1970-01-01 09:00:02+09 | b
  1.1 | 1970-01-01 09:00:03+09 | b
  2.2 | 1970-01-01 09:00:04+09 | b
(10 rows)

-- select mean (stub agg function and group by tag only) (result)
--Testcase 165:
SELECT tag1,mean("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
 tag1 | mean 
------+------
 a    |  0.2
 b    | 1.65
(2 rows)

-- select mean (stub agg function and other aggs) (result)
--Testcase 166:
SELECT sum("value1"),mean("value1"),count("value1") FROM s3;
 sum | mean | count 
-----+------+-------
 7.2 |  1.2 |     6
(1 row)

-- select mean over join query (explain)
--Testcase 167:
EXPLAIN VERBOSE
SELECT mean(t1.value1), mean(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=112.64..112.66 rows=1 width=16)
   Output: mean(t1.value1), mean(t2.value1)
   ->  Nested Loop  (cost=20.00..28.14 rows=169 width=16)
         Output: t1.value1, t2.value1
         ->  Foreign Scan on public.s3 t1  (cost=10.00..13.00 rows=13 width=8)
               Output: t1."time", t1.tag1, t1.value1, t1.value2, t1.value3, t1.value4
               InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
         ->  Materialize  (cost=10.00..13.06 rows=13 width=8)
               Output: t2.value1
               ->  Foreign Scan on public.s3 t2  (cost=10.00..13.00 rows=13 width=8)
                     Output: t2.value1
                     InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
(12 rows)

-- select mean over join query (result, stub call error)
--Testcase 168:
SELECT mean(t1.value1), mean(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
ERROR:  stub mean_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function mean_sfunc(double precision,double precision) line 3 at RAISE
-- select mean with having (explain)
--Testcase 169:
EXPLAIN VERBOSE
SELECT mean(value1) FROM s3 HAVING mean(value1) > 100;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=3840.00..3840.01 rows=1 width=8)
   Output: mean(value1)
   Filter: (mean(s3.value1) > '100'::double precision)
   ->  Foreign Scan on public.s3  (cost=10.00..2560.00 rows=2560 width=8)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT "value1" FROM "s3"
(6 rows)

-- select mean with having (explain, not pushdown, stub call error)
--Testcase 170:
SELECT mean(value1) FROM s3 HAVING mean(value1) > 100;
ERROR:  stub mean_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function mean_sfunc(double precision,double precision) line 3 at RAISE
-- select mean(*) (stub agg function, explain)
--Testcase 608:
EXPLAIN VERBOSE
SELECT mean_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (mean_all(*))
   InfluxDB query: SELECT mean(*) FROM "s3"
(3 rows)

-- select mean(*) (stub agg function, result)
--Testcase 609:
SELECT mean_all(*) from s3;
                 mean_all                  
-------------------------------------------
 (1970-01-01T00:00:00Z,,1.2,150,-1.2,-150)
(1 row)

-- select mean(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 610:
EXPLAIN VERBOSE
SELECT mean_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (mean_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT mean(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select mean(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 611:
SELECT mean_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                 mean_all                  
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select mean(*) (stub agg function and group by tag only) (explain)
--Testcase 612:
EXPLAIN VERBOSE
SELECT mean_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (mean_all(*)), tag1
   InfluxDB query: SELECT mean(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select mean(*) (stub agg function and group by tag only) (result)
--Testcase 613:
SELECT mean_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                 mean_all                                  
---------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.20000000000000004,100,-0.20000000000000004,-100)
 (1970-01-01T00:00:00Z,,1.6500000000000001,200,-1.6500000000000001,-200)
(2 rows)

-- select mean(*) (stub agg function, expose data, explain)
--Testcase 615:
EXPLAIN VERBOSE
SELECT (mean_all(*)::s3).* from s3;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((mean_all(*)))::s3)."time", (((mean_all(*)))::s3).tag1, (((mean_all(*)))::s3).value1, (((mean_all(*)))::s3).value2, (((mean_all(*)))::s3).value3, (((mean_all(*)))::s3).value4
   InfluxDB query: SELECT mean(*) FROM "s3"
(3 rows)

-- select mean(*) (stub agg function, expose data, result)
--Testcase 616:
SELECT (mean_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    1.2 |    150 |   -1.2 |   -150
(1 row)

-- select mean(regex) (stub agg function, explain)
--Testcase 617:
EXPLAIN VERBOSE
SELECT mean('/value[1,4]/') from s3;
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (mean('/value[1,4]/'::text))
   InfluxDB query: SELECT mean(/value[1,4]/) FROM "s3"
(3 rows)

-- select mean(regex) (stub agg function, result)
--Testcase 618:
SELECT mean('/value[1,4]/') from s3;
                mean                
------------------------------------
 (1970-01-01T00:00:00Z,,1.2,,,-150)
(1 row)

-- select mean(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 619:
EXPLAIN VERBOSE
SELECT mean('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (mean('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT mean(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select mean(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 620:
SELECT mean('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                   mean                    
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select mean(regex) (stub agg function and group by tag only) (explain)
--Testcase 621:
EXPLAIN VERBOSE
SELECT mean('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (mean('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT mean(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select mean(regex) (stub agg function and group by tag only) (result)
--Testcase 622:
SELECT mean('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                        mean                        
----------------------------------------------------
 (1970-01-01T00:00:00Z,,0.20000000000000004,,,-100)
 (1970-01-01T00:00:00Z,,1.6500000000000001,,,-200)
(2 rows)

-- select mean(regex) (stub agg function, expose data, explain)
--Testcase 624:
EXPLAIN VERBOSE
SELECT (mean('/value[1,4]/')::s3).* from s3;
                                                                                                                                      QUERY PLAN                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((mean('/value[1,4]/'::text)))::s3)."time", (((mean('/value[1,4]/'::text)))::s3).tag1, (((mean('/value[1,4]/'::text)))::s3).value1, (((mean('/value[1,4]/'::text)))::s3).value2, (((mean('/value[1,4]/'::text)))::s3).value3, (((mean('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT mean(/value[1,4]/) FROM "s3"
(3 rows)

-- select mean(regex) (stub agg function, expose data, result)
--Testcase 625:
SELECT (mean('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    1.2 |        |        |   -150
(1 row)

-- select median (stub agg function, explain)
--Testcase 171:
EXPLAIN VERBOSE
SELECT median(value1),median(value2),median(value3),median(value4) FROM s3;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (median(value1)), (median(value2)), (median(value3)), (median(value4))
   InfluxDB query: SELECT median("value1"), median("value2"), median("value3"), median("value4") FROM "s3"
(3 rows)

-- select median (stub agg function, result)
--Testcase 172:
SELECT median(value1),median(value2),median(value3),median(value4) FROM s3;
 median | median | median | median 
--------+--------+--------+--------
    0.7 |    150 |   -0.7 |   -150
(1 row)

-- select median (stub agg function, raise exception if not expected type)
--Testcase 173:
SELECT median(value1::numeric),median(value2::numeric),median(value3::numeric),median(value4::numeric) FROM s3;
ERROR:  stub median_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function median_sfunc(double precision,double precision) line 3 at RAISE
-- select median (stub agg function and group by influx_time() and tag) (explain)
--Testcase 174:
EXPLAIN VERBOSE
SELECT median("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (median(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT median("value1") FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select median (stub agg function and group by influx_time() and tag) (result)
--Testcase 175:
SELECT median("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
 median |      influx_time       | tag1 
--------+------------------------+------
    0.1 | 1970-01-01 09:00:00+09 | a
    0.2 | 1970-01-01 09:00:01+09 | a
    0.3 | 1970-01-01 09:00:02+09 | a
        | 1970-01-01 09:00:03+09 | a
        | 1970-01-01 09:00:04+09 | a
        | 1970-01-01 09:00:00+09 | b
        | 1970-01-01 09:00:01+09 | b
        | 1970-01-01 09:00:02+09 | b
    1.1 | 1970-01-01 09:00:03+09 | b
    2.2 | 1970-01-01 09:00:04+09 | b
(10 rows)

-- select median (stub agg function and group by tag only) (result)
--Testcase 176:
SELECT tag1,median("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
 tag1 | median 
------+--------
 a    |    0.2
 b    |   1.65
(2 rows)

-- select median (stub agg function and other aggs) (result)
--Testcase 177:
SELECT sum("value1"),median("value1"),count("value1") FROM s3;
 sum | median | count 
-----+--------+-------
 7.2 |    0.7 |     6
(1 row)

-- select median over join query (explain)
--Testcase 178:
EXPLAIN VERBOSE
SELECT median(t1.value1), median(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=112.64..112.66 rows=1 width=16)
   Output: median(t1.value1), median(t2.value1)
   ->  Nested Loop  (cost=20.00..28.14 rows=169 width=16)
         Output: t1.value1, t2.value1
         ->  Foreign Scan on public.s3 t1  (cost=10.00..13.00 rows=13 width=8)
               Output: t1."time", t1.tag1, t1.value1, t1.value2, t1.value3, t1.value4
               InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
         ->  Materialize  (cost=10.00..13.06 rows=13 width=8)
               Output: t2.value1
               ->  Foreign Scan on public.s3 t2  (cost=10.00..13.00 rows=13 width=8)
                     Output: t2.value1
                     InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
(12 rows)

-- select median over join query (result, stub call error)
--Testcase 179:
SELECT median(t1.value1), median(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
ERROR:  stub median_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function median_sfunc(double precision,double precision) line 3 at RAISE
-- select median with having (explain)
--Testcase 180:
EXPLAIN VERBOSE
SELECT median(value1) FROM s3 HAVING median(value1) > 100;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=3840.00..3840.01 rows=1 width=8)
   Output: median(value1)
   Filter: (median(s3.value1) > '100'::double precision)
   ->  Foreign Scan on public.s3  (cost=10.00..2560.00 rows=2560 width=8)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT "value1" FROM "s3"
(6 rows)

-- select median with having (explain, not pushdown, stub call error)
--Testcase 181:
SELECT median(value1) FROM s3 HAVING median(value1) > 100;
ERROR:  stub median_sfunc(double precision, float8) is called
CONTEXT:  PL/pgSQL function median_sfunc(double precision,double precision) line 3 at RAISE
-- select median(*) (stub agg function, explain)
--Testcase 626:
EXPLAIN VERBOSE
SELECT median_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (median_all(*))
   InfluxDB query: SELECT median(*) FROM "s3"
(3 rows)

-- select median(*) (stub agg function, result)
--Testcase 627:
SELECT median_all(*) from s3;
                        median_all                        
----------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.7,150,-0.7000000000000001,-150)
(1 row)

-- select median(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 628:
EXPLAIN VERBOSE
SELECT median_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (median_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT median(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select median(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 629:
SELECT median_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                median_all                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select median(*) (stub agg function and group by tag only) (explain)
--Testcase 630:
EXPLAIN VERBOSE
SELECT median_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (median_all(*)), tag1
   InfluxDB query: SELECT median(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select median(*) (stub agg function and group by tag only) (result)
--Testcase 631:
SELECT median_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                               median_all                                
-------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:00Z,,1.6500000000000001,200,-1.6500000000000001,-200)
(2 rows)

-- select median(*) (stub agg function, expose data, explain)
--Testcase 633:
EXPLAIN VERBOSE
SELECT (median_all(*)::s3).* from s3;
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((median_all(*)))::s3)."time", (((median_all(*)))::s3).tag1, (((median_all(*)))::s3).value1, (((median_all(*)))::s3).value2, (((median_all(*)))::s3).value3, (((median_all(*)))::s3).value4
   InfluxDB query: SELECT median(*) FROM "s3"
(3 rows)

-- select median(*) (stub agg function, expose data, result)
--Testcase 634:
SELECT (median_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.7 |    150 |   -0.7 |   -150
(1 row)

-- select median(regex) (stub agg function, explain)
--Testcase 635:
EXPLAIN VERBOSE
SELECT median('/^v.*/') from s3;
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (median('/^v.*/'::text))
   InfluxDB query: SELECT median(/^v.*/) FROM "s3"
(3 rows)

-- select median(regex) (stub agg function, result)
--Testcase 636:
SELECT  median('/^v.*/') from s3;
                          median                          
----------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.7,150,-0.7000000000000001,-150)
(1 row)

-- select median(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 637:
EXPLAIN VERBOSE
SELECT median('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (median('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT median(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select median(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 638:
SELECT median('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                  median                   
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select median(regex) (stub agg function and group by tag only) (explain)
--Testcase 639:
EXPLAIN VERBOSE
SELECT median('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (median('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT median(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select median(regex) (stub agg function and group by tag only) (result)
--Testcase 640:
SELECT median('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                      median                       
---------------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,,,-100)
 (1970-01-01T00:00:00Z,,1.6500000000000001,,,-200)
(2 rows)

-- select median(regex) (stub agg function, expose data, explain)
--Testcase 642:
EXPLAIN VERBOSE
SELECT (median('/value[1,4]/')::s3).* from s3;
                                                                                                                                            QUERY PLAN                                                                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((median('/value[1,4]/'::text)))::s3)."time", (((median('/value[1,4]/'::text)))::s3).tag1, (((median('/value[1,4]/'::text)))::s3).value1, (((median('/value[1,4]/'::text)))::s3).value2, (((median('/value[1,4]/'::text)))::s3).value3, (((median('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT median(/value[1,4]/) FROM "s3"
(3 rows)

-- select median(regex) (stub agg function, expose data, result)
--Testcase 643:
SELECT (median('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.7 |        |        |   -150
(1 row)

-- select influx_mode (stub agg function, explain)
--Testcase 182:
EXPLAIN VERBOSE
SELECT influx_mode(value1),influx_mode(value2),influx_mode(value3),influx_mode(value4) FROM s3;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_mode(value1)), (influx_mode(value2)), (influx_mode(value3)), (influx_mode(value4))
   InfluxDB query: SELECT mode("value1"), mode("value2"), mode("value3"), mode("value4") FROM "s3"
(3 rows)

-- select influx_mode (stub agg function, result)
--Testcase 183:
SELECT influx_mode(value1),influx_mode(value2),influx_mode(value3),influx_mode(value4) FROM s3;
 influx_mode | influx_mode | influx_mode | influx_mode 
-------------+-------------+-------------+-------------
         0.1 |         100 |        -3.3 |        -100
(1 row)

-- select influx_mode (stub agg function, raise exception if not expected type)
--Testcase 184:
SELECT influx_mode(value1::numeric),influx_mode(value2::numeric),influx_mode(value3::numeric),influx_mode(value4::numeric) FROM s3;
ERROR:  stub influx_mode_sfunc(anyelement, anyelement) is called
CONTEXT:  PL/pgSQL function influx_mode_sfunc(anyelement,anyelement) line 3 at RAISE
-- select influx_mode (stub agg function and group by influx_time() and tag) (explain)
--Testcase 185:
EXPLAIN VERBOSE
SELECT influx_mode("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (influx_mode(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT mode("value1") FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_mode (stub agg function and group by influx_time() and tag) (result)
--Testcase 186:
SELECT influx_mode("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
 influx_mode |      influx_time       | tag1 
-------------+------------------------+------
         0.1 | 1970-01-01 09:00:00+09 | a
         0.2 | 1970-01-01 09:00:01+09 | a
         0.3 | 1970-01-01 09:00:02+09 | a
             | 1970-01-01 09:00:03+09 | a
             | 1970-01-01 09:00:04+09 | a
             | 1970-01-01 09:00:00+09 | b
             | 1970-01-01 09:00:01+09 | b
             | 1970-01-01 09:00:02+09 | b
         1.1 | 1970-01-01 09:00:03+09 | b
         2.2 | 1970-01-01 09:00:04+09 | b
(10 rows)

-- select influx_mode (stub agg function and group by tag only) (result)
--Testcase 187:
SELECT tag1,influx_mode("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
 tag1 | influx_mode 
------+-------------
 a    |         0.1
 b    |         1.1
(2 rows)

-- select influx_mode (stub agg function and other aggs) (result)
--Testcase 188:
SELECT sum("value1"),influx_mode("value1"),count("value1") FROM s3;
 sum | influx_mode | count 
-----+-------------+-------
 7.2 |         0.1 |     6
(1 row)

-- select influx_mode over join query (explain)
--Testcase 189:
EXPLAIN VERBOSE
SELECT influx_mode(t1.value1), influx_mode(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=112.64..112.66 rows=1 width=16)
   Output: influx_mode(t1.value1), influx_mode(t2.value1)
   ->  Nested Loop  (cost=20.00..28.14 rows=169 width=16)
         Output: t1.value1, t2.value1
         ->  Foreign Scan on public.s3 t1  (cost=10.00..13.00 rows=13 width=8)
               Output: t1."time", t1.tag1, t1.value1, t1.value2, t1.value3, t1.value4
               InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
         ->  Materialize  (cost=10.00..13.06 rows=13 width=8)
               Output: t2.value1
               ->  Foreign Scan on public.s3 t2  (cost=10.00..13.00 rows=13 width=8)
                     Output: t2.value1
                     InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
(12 rows)

-- select influx_mode over join query (result, stub call error)
--Testcase 190:
SELECT influx_mode(t1.value1), influx_mode(t2.value1) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
ERROR:  stub influx_mode_sfunc(anyelement, anyelement) is called
CONTEXT:  PL/pgSQL function influx_mode_sfunc(anyelement,anyelement) line 3 at RAISE
-- select influx_mode with having (explain)
--Testcase 191:
EXPLAIN VERBOSE
SELECT influx_mode(value1) FROM s3 HAVING influx_mode(value1) > 100;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=3840.00..3840.01 rows=1 width=8)
   Output: influx_mode(value1)
   Filter: (influx_mode(s3.value1) > '100'::double precision)
   ->  Foreign Scan on public.s3  (cost=10.00..2560.00 rows=2560 width=8)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT "value1" FROM "s3"
(6 rows)

-- select influx_mode with having (explain, not pushdown, stub call error)
--Testcase 192:
SELECT influx_mode(value1) FROM s3 HAVING influx_mode(value1) > 100;
ERROR:  stub influx_mode_sfunc(anyelement, anyelement) is called
CONTEXT:  PL/pgSQL function influx_mode_sfunc(anyelement,anyelement) line 3 at RAISE
-- select influx_mode(*) (stub agg function, explain)
--Testcase 644:
EXPLAIN VERBOSE
SELECT influx_mode_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_mode_all(*))
   InfluxDB query: SELECT mode(*) FROM "s3"
(3 rows)

-- select influx_mode(*) (stub agg function, result)
--Testcase 645:
SELECT influx_mode_all(*) from s3;
              influx_mode_all              
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-3.3,-100)
(1 row)

-- select influx_mode(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 646:
EXPLAIN VERBOSE
SELECT influx_mode_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_mode_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT mode(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_mode(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 647:
SELECT influx_mode_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
              influx_mode_all              
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select influx_mode(*) (stub agg function and group by tag only) (explain)
--Testcase 648:
EXPLAIN VERBOSE
SELECT influx_mode_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_mode_all(*)), tag1
   InfluxDB query: SELECT mode(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select influx_mode(*) (stub agg function and group by tag only) (result)
--Testcase 649:
SELECT influx_mode_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
              influx_mode_all              
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.3,-100)
 (1970-01-01T00:00:00Z,,1.1,200,-2.2,-200)
(2 rows)

-- select influx_mode(*) (stub agg function, expose data, explain)
--Testcase 651:
EXPLAIN VERBOSE
SELECT (influx_mode_all(*)::s3).* from s3;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((influx_mode_all(*)))::s3)."time", (((influx_mode_all(*)))::s3).tag1, (((influx_mode_all(*)))::s3).value1, (((influx_mode_all(*)))::s3).value2, (((influx_mode_all(*)))::s3).value3, (((influx_mode_all(*)))::s3).value4
   InfluxDB query: SELECT mode(*) FROM "s3"
(3 rows)

-- select influx_mode(*) (stub agg function, expose data, result)
--Testcase 652:
SELECT (influx_mode_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |    100 |   -3.3 |   -100
(1 row)

-- select influx_mode(regex) (stub function, explain)
--Testcase 653:
EXPLAIN VERBOSE
SELECT influx_mode('/value[1,4]/') from s3;
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_mode('/value[1,4]/'::text))
   InfluxDB query: SELECT mode(/value[1,4]/) FROM "s3"
(3 rows)

-- select influx_mode(regex) (stub function, result)
--Testcase 654:
SELECT influx_mode('/value[1,4]/') from s3;
            influx_mode             
------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
(1 row)

-- select influx_mode(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 655:
EXPLAIN VERBOSE
SELECT influx_mode('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_mode('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT mode(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_mode(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 656:
SELECT influx_mode('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                influx_mode                
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select influx_mode(regex) (stub agg function and group by tag only) (explain)
--Testcase 657:
EXPLAIN VERBOSE
SELECT influx_mode('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_mode('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT mode(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select influx_mode(regex) (stub agg function and group by tag only) (result)
--Testcase 658:
SELECT influx_mode('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
            influx_mode             
------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
 (1970-01-01T00:00:00Z,,1.1,,,-200)
(2 rows)

-- select influx_mode(regex) (stub agg function, expose data, explain)
--Testcase 660:
EXPLAIN VERBOSE
SELECT (influx_mode('/value[1,4]/')::s3).* from s3;
                                                                                                                                                           QUERY PLAN                                                                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((influx_mode('/value[1,4]/'::text)))::s3)."time", (((influx_mode('/value[1,4]/'::text)))::s3).tag1, (((influx_mode('/value[1,4]/'::text)))::s3).value1, (((influx_mode('/value[1,4]/'::text)))::s3).value2, (((influx_mode('/value[1,4]/'::text)))::s3).value3, (((influx_mode('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT mode(/value[1,4]/) FROM "s3"
(3 rows)

-- select influx_mode(regex) (stub agg function, expose data, result)
--Testcase 661:
SELECT (influx_mode('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |        |        |   -100
(1 row)

-- select stddev (agg function, explain)
--Testcase 193:
EXPLAIN VERBOSE
SELECT stddev(value1),stddev(value2),stddev(value3),stddev(value4) FROM s3;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=80)
   Output: (stddev(value1)), (stddev(value2)), (stddev(value3)), (stddev(value4))
   InfluxDB query: SELECT stddev("value1"), stddev("value2"), stddev("value3"), stddev("value4") FROM "s3"
(3 rows)

-- select stddev (agg function, result)
--Testcase 194:
SELECT stddev(value1),stddev(value2),stddev(value3),stddev(value4) FROM s3;
      stddev      |       stddev       |      stddev      |       stddev       
------------------+--------------------+------------------+--------------------
 1.29923054151294 | 54.772255750516614 | 1.29923054151294 | 54.772255750516614
(1 row)

-- select stddev (agg function and group by influx_time() and tag) (explain)
--Testcase 195:
EXPLAIN VERBOSE
SELECT stddev("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (stddev(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT stddev("value1") FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select stddev (agg function and group by influx_time() and tag) (result)
--Testcase 196:
SELECT stddev("value1"),influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
 stddev |      influx_time       | tag1 
--------+------------------------+------
        | 1970-01-01 09:00:00+09 | a
        | 1970-01-01 09:00:01+09 | a
        | 1970-01-01 09:00:02+09 | a
        | 1970-01-01 09:00:03+09 | a
        | 1970-01-01 09:00:04+09 | a
        | 1970-01-01 09:00:00+09 | b
        | 1970-01-01 09:00:01+09 | b
        | 1970-01-01 09:00:02+09 | b
        | 1970-01-01 09:00:03+09 | b
        | 1970-01-01 09:00:04+09 | b
(10 rows)

-- select stddev (agg function and group by tag only) (result)
--Testcase 197:
SELECT tag1,stddev("value1") FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
 tag1 |      stddev       
------+-------------------
 a    |               0.1
 b    | 0.777817459305202
(2 rows)

-- select stddev (agg function and other aggs) (result)
--Testcase 198:
SELECT sum("value1"),stddev("value1"),count("value1") FROM s3;
 sum |      stddev      | count 
-----+------------------+-------
 7.2 | 1.29923054151294 |     6
(1 row)

-- select stddev(*) (stub agg function, explain)
--Testcase 662:
EXPLAIN VERBOSE
SELECT stddev_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (stddev_all(*))
   InfluxDB query: SELECT stddev(*) FROM "s3"
(3 rows)

-- select stddev(*) (stub agg function, result)
--Testcase 663:
SELECT stddev_all(*) from s3;
                                            stddev_all                                             
---------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.299230541512937,54.772255750516614,1.299230541512937,54.772255750516614)
(1 row)

-- select stddev(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 664:
EXPLAIN VERBOSE
SELECT stddev_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (stddev_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT stddev(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select stddev(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 665:
SELECT stddev_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
         stddev_all          
-----------------------------
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
(10 rows)

-- select stddev(*) (stub agg function and group by tag only) (explain)
--Testcase 666:
EXPLAIN VERBOSE
SELECT stddev_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (stddev_all(*)), tag1
   InfluxDB query: SELECT stddev(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select stddev(*) (stub agg function and group by tag only) (result)
--Testcase 667:
SELECT stddev_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                             stddev_all                              
---------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09999999999999999,0,0.09999999999999999,0)
 (1970-01-01T00:00:00Z,,0.7778174593052023,0,0.7778174593052023,0)
(2 rows)

-- select stddev(regex) (stub function, explain)
--Testcase 669:
EXPLAIN VERBOSE
SELECT stddev('/value[1,4]/') from s3;
                       QUERY PLAN                        
---------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (stddev('/value[1,4]/'::text))
   InfluxDB query: SELECT stddev(/value[1,4]/) FROM "s3"
(3 rows)

-- select stddev(regex) (stub function, result)
--Testcase 670:
SELECT stddev('/value[1,4]/') from s3;
                             stddev                             
----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.299230541512937,,,54.772255750516614)
(1 row)

-- select stddev(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 671:
EXPLAIN VERBOSE
SELECT stddev('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (stddev('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT stddev(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select stddev(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 672:
SELECT stddev('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
           stddev            
-----------------------------
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
(10 rows)

-- select stddev(regex) (stub agg function and group by tag only) (explain)
--Testcase 673:
EXPLAIN VERBOSE
SELECT stddev('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (stddev('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT stddev(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select stddev(regex) (stub agg function and group by tag only) (result)
--Testcase 674:
SELECT stddev('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                     stddev                      
-------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09999999999999999,,,0)
 (1970-01-01T00:00:00Z,,0.7778174593052023,,,0)
(2 rows)

-- select influx_sum(*) (stub agg function, explain)
--Testcase 676:
EXPLAIN VERBOSE
SELECT influx_sum_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_sum_all(*))
   InfluxDB query: SELECT sum(*) FROM "s3"
(3 rows)

-- select influx_sum(*) (stub agg function, result)
--Testcase 677:
SELECT influx_sum_all(*) from s3;
                            influx_sum_all                             
-----------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,7.199999999999999,900,-7.199999999999999,-900)
(1 row)

-- select influx_sum(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 678:
EXPLAIN VERBOSE
SELECT influx_sum_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_sum_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT sum(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_sum(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 679:
SELECT influx_sum_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
              influx_sum_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select influx_sum(*) (stub agg function and group by tag only) (explain)
--Testcase 680:
EXPLAIN VERBOSE
SELECT influx_sum_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_sum_all(*)), tag1
   InfluxDB query: SELECT sum(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select influx_sum(*) (stub agg function and group by tag only) (result)
--Testcase 681:
SELECT influx_sum_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                             influx_sum_all                              
-------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.6000000000000001,300,-0.6000000000000001,-300)
 (1970-01-01T00:00:00Z,,3.3000000000000003,400,-3.3000000000000003,-400)
(2 rows)

-- select influx_sum(*) (stub agg function, expose data, explain)
--Testcase 683:
EXPLAIN VERBOSE
SELECT (influx_sum_all(*)::s3).* from s3;
                                                                                                           QUERY PLAN                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((influx_sum_all(*)))::s3)."time", (((influx_sum_all(*)))::s3).tag1, (((influx_sum_all(*)))::s3).value1, (((influx_sum_all(*)))::s3).value2, (((influx_sum_all(*)))::s3).value3, (((influx_sum_all(*)))::s3).value4
   InfluxDB query: SELECT sum(*) FROM "s3"
(3 rows)

-- select influx_sum(*) (stub agg function, expose data, result)
--Testcase 684:
SELECT (influx_sum_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    7.2 |    900 |   -7.2 |   -900
(1 row)

-- select influx_sum(regex) (stub function, explain)
--Testcase 685:
EXPLAIN VERBOSE
SELECT influx_sum('/value[1,4]/') from s3;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_sum('/value[1,4]/'::text))
   InfluxDB query: SELECT sum(/value[1,4]/) FROM "s3"
(3 rows)

-- select influx_sum(regex) (stub function, result)
--Testcase 686:
SELECT influx_sum('/value[1,4]/') from s3;
                    influx_sum                    
--------------------------------------------------
 (1970-01-01T00:00:00Z,,7.199999999999999,,,-900)
(1 row)

-- select influx_sum(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 687:
EXPLAIN VERBOSE
SELECT influx_sum('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_sum('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT sum(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_sum(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 688:
SELECT influx_sum('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                influx_sum                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select influx_sum(regex) (stub agg function and group by tag only) (explain)
--Testcase 689:
EXPLAIN VERBOSE
SELECT influx_sum('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_sum('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT sum(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select influx_sum(regex) (stub agg function and group by tag only) (result)
--Testcase 690:
SELECT influx_sum('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                    influx_sum                     
---------------------------------------------------
 (1970-01-01T00:00:00Z,,0.6000000000000001,,,-300)
 (1970-01-01T00:00:00Z,,3.3000000000000003,,,-400)
(2 rows)

-- select influx_sum(regex) (stub agg function, expose data, explain)
--Testcase 692:
EXPLAIN VERBOSE
SELECT (influx_sum('/value[1,4]/')::s3).* from s3;
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((influx_sum('/value[1,4]/'::text)))::s3)."time", (((influx_sum('/value[1,4]/'::text)))::s3).tag1, (((influx_sum('/value[1,4]/'::text)))::s3).value1, (((influx_sum('/value[1,4]/'::text)))::s3).value2, (((influx_sum('/value[1,4]/'::text)))::s3).value3, (((influx_sum('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT sum(/value[1,4]/) FROM "s3"
(3 rows)

-- select influx_sum(regex) (stub agg function, expose data, result)
--Testcase 693:
SELECT (influx_sum('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    7.2 |        |        |   -900
(1 row)

-- selector function bottom() (explain)
--Testcase 199:
EXPLAIN VERBOSE
SELECT bottom(value1, 1) FROM s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..3200.00 rows=2560 width=8)
   Output: (bottom(value1, 1))
   InfluxDB query: SELECT bottom("value1", 1) FROM "s3"
(3 rows)

-- selector function bottom() (result)
--Testcase 200:
SELECT bottom(value1, 1) FROM s3;
 bottom 
--------
    0.1
(1 row)

-- selector function bottom() cannot be combined with other functions(explain)
--Testcase 201:
EXPLAIN VERBOSE
SELECT bottom(value1, 1), bottom(value2, 1), bottom(value3, 1), bottom(value4, 1) FROM s3;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (bottom(value1, 1)), (bottom(value2, 1)), (bottom(value3, 1)), (bottom(value4, 1))
   InfluxDB query: SELECT bottom("value1", 1), bottom("value2", 1), bottom("value3", 1), bottom("value4", 1) FROM "s3"
(3 rows)

-- selector function bottom() cannot be combined with other functions(result)
--Testcase 202:
SELECT bottom(value1, 1), bottom(value2, 1), bottom(value3, 1), bottom(value4, 1) FROM s3;
ERROR:  influxdb_fdw : selector function bottom() cannot be combined with other functions
-- select influx_max(*) (stub agg function, explain)
--Testcase 694:
EXPLAIN VERBOSE
SELECT influx_max_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_max_all(*))
   InfluxDB query: SELECT max(*) FROM "s3"
(3 rows)

-- select influx_max(*) (stub agg function, result)
--Testcase 695:
SELECT influx_max_all(*) from s3;
              influx_max_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,3.3,200,-0.1,-100)
(1 row)

-- select influx_max(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 696:
EXPLAIN VERBOSE
SELECT influx_max_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_max_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT max(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_max(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 697:
SELECT influx_max_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
              influx_max_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select influx_max(*) (stub agg function and group by tag only) (explain)
--Testcase 698:
EXPLAIN VERBOSE
SELECT influx_max_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_max_all(*)), tag1
   InfluxDB query: SELECT max(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select influx_max(*) (stub agg function and group by tag only) (result)
--Testcase 699:
SELECT influx_max_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
              influx_max_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.3,100,-0.1,-100)
 (1970-01-01T00:00:00Z,,2.2,200,-1.1,-200)
(2 rows)

-- select influx_max(*) (stub agg function, expose data, explain)
--Testcase 701:
EXPLAIN VERBOSE
SELECT (influx_max_all(*)::s3).* from s3;
                                                                                                           QUERY PLAN                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((influx_max_all(*)))::s3)."time", (((influx_max_all(*)))::s3).tag1, (((influx_max_all(*)))::s3).value1, (((influx_max_all(*)))::s3).value2, (((influx_max_all(*)))::s3).value3, (((influx_max_all(*)))::s3).value4
   InfluxDB query: SELECT max(*) FROM "s3"
(3 rows)

-- select influx_max(*) (stub agg function, expose data, result)
--Testcase 702:
SELECT (influx_max_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    3.3 |    200 |   -0.1 |   -100
(1 row)

-- select influx_max(regex) (stub function, explain)
--Testcase 703:
EXPLAIN VERBOSE
SELECT influx_max('/value[1,4]/') from s3;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_max('/value[1,4]/'::text))
   InfluxDB query: SELECT max(/value[1,4]/) FROM "s3"
(3 rows)

-- select influx_max(regex) (stub function, result)
--Testcase 704:
SELECT influx_max('/value[1,4]/') from s3;
             influx_max             
------------------------------------
 (1970-01-01T00:00:00Z,,3.3,,,-100)
(1 row)

-- select influx_max(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 705:
EXPLAIN VERBOSE
SELECT influx_max('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_max('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT max(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_max(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 706:
SELECT influx_max('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                influx_max                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select influx_max(regex) (stub agg function and group by tag only) (explain)
--Testcase 707:
EXPLAIN VERBOSE
SELECT influx_max('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_max('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT max(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select influx_max(regex) (stub agg function and group by tag only) (result)
--Testcase 708:
SELECT influx_max('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
             influx_max             
------------------------------------
 (1970-01-01T00:00:00Z,,0.3,,,-100)
 (1970-01-01T00:00:00Z,,2.2,,,-200)
(2 rows)

-- select influx_max(regex) (stub agg function, expose data, explain)
--Testcase 710:
EXPLAIN VERBOSE
SELECT (influx_max('/value[1,4]/')::s3).* from s3;
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((influx_max('/value[1,4]/'::text)))::s3)."time", (((influx_max('/value[1,4]/'::text)))::s3).tag1, (((influx_max('/value[1,4]/'::text)))::s3).value1, (((influx_max('/value[1,4]/'::text)))::s3).value2, (((influx_max('/value[1,4]/'::text)))::s3).value3, (((influx_max('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT max(/value[1,4]/) FROM "s3"
(3 rows)

-- select influx_max(regex) (stub agg function, expose data, result)
--Testcase 711:
SELECT (influx_max('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    3.3 |        |        |   -100
(1 row)

-- select influx_min(*) (stub agg function, explain)
--Testcase 712:
EXPLAIN VERBOSE
SELECT influx_min_all(*) from s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_min_all(*))
   InfluxDB query: SELECT min(*) FROM "s3"
(3 rows)

-- select influx_min(*) (stub agg function, result)
--Testcase 713:
SELECT influx_min_all(*) from s3;
              influx_min_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-3.3,-200)
(1 row)

-- select influx_min(*) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 714:
EXPLAIN VERBOSE
SELECT influx_min_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_min_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT min(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_min(*) (stub agg function and group by influx_time() and tag) (result)
--Testcase 715:
SELECT influx_min_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
              influx_min_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select influx_min(*) (stub agg function and group by tag only) (explain)
--Testcase 716:
EXPLAIN VERBOSE
SELECT influx_min_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_min_all(*)), tag1
   InfluxDB query: SELECT min(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select influx_min(*) (stub agg function and group by tag only) (result)
--Testcase 717:
SELECT influx_min_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
              influx_min_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.3,-100)
 (1970-01-01T00:00:00Z,,1.1,200,-2.2,-200)
(2 rows)

-- select influx_min(*) (stub agg function, expose data, explain)
--Testcase 719:
EXPLAIN VERBOSE
SELECT (influx_min_all(*)::s3).* from s3;
                                                                                                           QUERY PLAN                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((influx_min_all(*)))::s3)."time", (((influx_min_all(*)))::s3).tag1, (((influx_min_all(*)))::s3).value1, (((influx_min_all(*)))::s3).value2, (((influx_min_all(*)))::s3).value3, (((influx_min_all(*)))::s3).value4
   InfluxDB query: SELECT min(*) FROM "s3"
(3 rows)

-- select influx_min(*) (stub agg function, expose data, result)
--Testcase 720:
SELECT (influx_min_all(*)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |    100 |   -3.3 |   -200
(1 row)

-- select influx_min(regex) (stub function, explain)
--Testcase 721:
EXPLAIN VERBOSE
SELECT influx_min('/value[1,4]/') from s3;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_min('/value[1,4]/'::text))
   InfluxDB query: SELECT min(/value[1,4]/) FROM "s3"
(3 rows)

-- select influx_min(regex) (stub function, result)
--Testcase 722:
SELECT influx_min('/value[1,4]/') from s3;
             influx_min             
------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-200)
(1 row)

-- select influx_min(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 723:
EXPLAIN VERBOSE
SELECT influx_min('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_min('/^v.*/'::text)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT min(/^v.*/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select influx_min(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 724:
SELECT influx_min('/^v.*/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                influx_min                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select influx_min(regex) (stub agg function and group by tag only) (explain)
--Testcase 725:
EXPLAIN VERBOSE
SELECT influx_min('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_min('/value[1,4]/'::text)), tag1
   InfluxDB query: SELECT min(/value[1,4]/) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select influx_min(regex) (stub agg function and group by tag only) (result)
--Testcase 726:
SELECT influx_min('/value[1,4]/') FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
             influx_min             
------------------------------------
 (1970-01-01T00:00:00Z,,0.1,,,-100)
 (1970-01-01T00:00:00Z,,1.1,,,-200)
(2 rows)

-- select influx_min(regex) (stub agg function, expose data, explain)
--Testcase 728:
EXPLAIN VERBOSE
SELECT (influx_min('/value[1,4]/')::s3).* from s3;
                                                                                                                                                        QUERY PLAN                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (((influx_min('/value[1,4]/'::text)))::s3)."time", (((influx_min('/value[1,4]/'::text)))::s3).tag1, (((influx_min('/value[1,4]/'::text)))::s3).value1, (((influx_min('/value[1,4]/'::text)))::s3).value2, (((influx_min('/value[1,4]/'::text)))::s3).value3, (((influx_min('/value[1,4]/'::text)))::s3).value4
   InfluxDB query: SELECT min(/value[1,4]/) FROM "s3"
(3 rows)

-- select influx_min(regex) (stub agg function, expose data, result)
--Testcase 729:
SELECT (influx_min('/value[1,4]/')::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.1 |        |        |   -200
(1 row)

-- selector function percentile() (explain)
--Testcase 203:
EXPLAIN VERBOSE
SELECT percentile(value1, 50), percentile(value2, 60), percentile(value3, 25), percentile(value4, 33) FROM s3;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (percentile(value1, 50)), (percentile(value2, 60)), (percentile(value3, 25)), (percentile(value4, 33))
   InfluxDB query: SELECT percentile("value1", 50), percentile("value2", 60), percentile("value3", 25), percentile("value4", 33) FROM "s3"
(3 rows)

-- selector function percentile() (result)
--Testcase 204:
SELECT percentile(value1, 50), percentile(value2, 60), percentile(value3, 25), percentile(value4, 33) FROM s3;
 percentile | percentile | percentile | percentile 
------------+------------+------------+------------
        0.3 |        200 |       -2.2 |       -200
(1 row)

-- selector function percentile() (explain)
--Testcase 730:
EXPLAIN VERBOSE
SELECT percentile(value1, 1.5), percentile(value2, 6.7), percentile(value3, 20.5), percentile(value4, 75.2) FROM s3;
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (percentile(value1, '1.5'::double precision)), (percentile(value2, '6.7'::double precision)), (percentile(value3, '20.5'::double precision)), (percentile(value4, '75.2'::double precision))
   InfluxDB query: SELECT percentile("value1", 1.5), percentile("value2", 6.7), percentile("value3", 20.5), percentile("value4", 75.2) FROM "s3"
(3 rows)

-- selector function percentile() (result)
--Testcase 731:
SELECT percentile(value1, 1.5), percentile(value2, 6.7), percentile(value3, 20.5), percentile(value4, 75.2) FROM s3;
 percentile | percentile | percentile | percentile 
------------+------------+------------+------------
            |            |       -3.3 |       -100
(1 row)

-- select percentile(*, int) (stub agg function, explain)
--Testcase 732:
EXPLAIN VERBOSE
SELECT percentile_all(50) from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (percentile_all(50))
   InfluxDB query: SELECT percentile(*, 50) FROM "s3"
(3 rows)

-- select percentile(*, int) (stub agg function, result)
--Testcase 733:
SELECT percentile_all(50) from s3;
              percentile_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.3,100,-1.1,-200)
(1 row)

-- select percentile(*, float8) (stub agg function, explain)
--Testcase 734:
EXPLAIN VERBOSE
SELECT percentile_all(70.5) from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (percentile_all('70.5'::double precision))
   InfluxDB query: SELECT percentile(*, 70.5) FROM "s3"
(3 rows)

-- select percentile(*, float8) (stub agg function, result)
--Testcase 735:
SELECT percentile_all(70.5) from s3;
              percentile_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,1.1,200,-0.3,-100)
(1 row)

-- select percentile(*, int) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 736:
EXPLAIN VERBOSE
SELECT percentile_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (percentile_all(50)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT percentile(*, 50) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select percentile(*, int) (stub agg function and group by influx_time() and tag) (result)
--Testcase 737:
SELECT percentile_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
              percentile_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select percentile(*, float8) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 738:
EXPLAIN VERBOSE
SELECT percentile_all(70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (percentile_all('70.5'::double precision)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT percentile(*, 70.5) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select percentile(*, float8) (stub agg function and group by influx_time() and tag) (result)
--Testcase 739:
SELECT percentile_all(70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
              percentile_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select percentile(*, int) (stub agg function and group by tag only) (explain)
--Testcase 740:
EXPLAIN VERBOSE
SELECT percentile_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (percentile_all(50)), tag1
   InfluxDB query: SELECT percentile(*, 50) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select percentile(*, int) (stub agg function and group by tag only) (result)
--Testcase 741:
SELECT percentile_all(50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
              percentile_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:00Z,,1.1,200,-2.2,-200)
(2 rows)

-- select percentile(*, float8) (stub agg function and group by tag only) (explain)
--Testcase 742:
EXPLAIN VERBOSE
SELECT percentile_all(70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (percentile_all('70.5'::double precision)), tag1
   InfluxDB query: SELECT percentile(*, 70.5) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select percentile(*, float8) (stub agg function and group by tag only) (result)
--Testcase 743:
SELECT percentile_all(70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
              percentile_all               
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:00Z,,1.1,200,-2.2,-200)
(2 rows)

-- select percentile(*, int) (stub agg function, expose data, explain)
--Testcase 745:
EXPLAIN VERBOSE
SELECT (percentile_all(50)::s3).* from s3;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((percentile_all(50)))::s3)."time", (((percentile_all(50)))::s3).tag1, (((percentile_all(50)))::s3).value1, (((percentile_all(50)))::s3).value2, (((percentile_all(50)))::s3).value3, (((percentile_all(50)))::s3).value4
   InfluxDB query: SELECT percentile(*, 50) FROM "s3"
(3 rows)

-- select percentile(*, int) (stub agg function, expose data, result)
--Testcase 746:
SELECT (percentile_all(50)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.3 |    100 |   -1.1 |   -200
(1 row)

-- select percentile(*, int) (stub agg function, expose data, explain)
--Testcase 747:
EXPLAIN VERBOSE
SELECT (percentile_all(70.5)::s3).* from s3;
                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((percentile_all('70.5'::double precision)))::s3)."time", (((percentile_all('70.5'::double precision)))::s3).tag1, (((percentile_all('70.5'::double precision)))::s3).value1, (((percentile_all('70.5'::double precision)))::s3).value2, (((percentile_all('70.5'::double precision)))::s3).value3, (((percentile_all('70.5'::double precision)))::s3).value4
   InfluxDB query: SELECT percentile(*, 70.5) FROM "s3"
(3 rows)

-- select percentile(*, int) (stub agg function, expose data, result)
--Testcase 748:
SELECT (percentile_all(70.5)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    1.1 |    200 |   -0.3 |   -100
(1 row)

-- select percentile(regex) (stub function, explain)
--Testcase 749:
EXPLAIN VERBOSE
SELECT percentile('/value[1,4]/', 50) from s3;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (percentile('/value[1,4]/'::text, 50))
   InfluxDB query: SELECT percentile(/value[1,4]/, 50) FROM "s3"
(3 rows)

-- select percentile(regex) (stub function, result)
--Testcase 750:
SELECT percentile('/value[1,4]/', 50) from s3;
             percentile             
------------------------------------
 (1970-01-01T00:00:00Z,,0.3,,,-200)
(1 row)

-- select percentile(regex) (stub agg function and group by influx_time() and tag) (explain)
--Testcase 751:
EXPLAIN VERBOSE
SELECT percentile('/^v.*/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (percentile('/^v.*/'::text, 50)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT percentile(/^v.*/, 50) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select percentile(regex) (stub agg function and group by influx_time() and tag) (result)
--Testcase 752:
SELECT percentile('/^v.*/', 50) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                percentile                 
-------------------------------------------
 (1970-01-01T00:00:00Z,,0.1,100,-0.1,-100)
 (1970-01-01T00:00:01Z,,0.2,100,-0.2,-100)
 (1970-01-01T00:00:02Z,,0.3,100,-0.3,-100)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:00Z,,,,,)
 (1970-01-01T00:00:01Z,,,,,)
 (1970-01-01T00:00:02Z,,,,,)
 (1970-01-01T00:00:03Z,,1.1,200,-1.1,-200)
 (1970-01-01T00:00:04Z,,2.2,200,-2.2,-200)
(10 rows)

-- select percentile(regex) (stub agg function and group by tag only) (explain)
--Testcase 753:
EXPLAIN VERBOSE
SELECT percentile('/value[1,4]/', 70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (percentile('/value[1,4]/'::text, '70.5'::double precision)), tag1
   InfluxDB query: SELECT percentile(/value[1,4]/, 70.5) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select percentile(regex) (stub agg function and group by tag only) (result)
--Testcase 754:
SELECT percentile('/value[1,4]/', 70.5) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
             percentile             
------------------------------------
 (1970-01-01T00:00:00Z,,0.2,,,-100)
 (1970-01-01T00:00:00Z,,1.1,,,-200)
(2 rows)

-- select percentile(regex) (stub agg function, expose data, explain)
--Testcase 756:
EXPLAIN VERBOSE
SELECT (percentile('/value[1,4]/', 50)::s3).* from s3;
                                                                                                                                                                    QUERY PLAN                                                                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((percentile('/value[1,4]/'::text, 50)))::s3)."time", (((percentile('/value[1,4]/'::text, 50)))::s3).tag1, (((percentile('/value[1,4]/'::text, 50)))::s3).value1, (((percentile('/value[1,4]/'::text, 50)))::s3).value2, (((percentile('/value[1,4]/'::text, 50)))::s3).value3, (((percentile('/value[1,4]/'::text, 50)))::s3).value4
   InfluxDB query: SELECT percentile(/value[1,4]/, 50) FROM "s3"
(3 rows)

-- select percentile(regex) (stub agg function, expose data, result)
--Testcase 757:
SELECT (percentile('/value[1,4]/', 50)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    0.3 |        |        |   -200
(1 row)

-- select percentile(regex) (stub agg function, expose data, explain)
--Testcase 758:
EXPLAIN VERBOSE
SELECT (percentile('/value[1,4]/', 70.5)::s3).* from s3;
                                                                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3)."time", (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).tag1, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value1, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value2, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value3, (((percentile('/value[1,4]/'::text, '70.5'::double precision)))::s3).value4
   InfluxDB query: SELECT percentile(/value[1,4]/, 70.5) FROM "s3"
(3 rows)

-- select percentile(regex) (stub agg function, expose data, result)
--Testcase 759:
SELECT (percentile('/value[1,4]/', 70.5)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |    1.1 |        |        |   -100
(1 row)

-- selector function top(field_key,N) (explain)
--Testcase 205:
EXPLAIN VERBOSE
SELECT top(value1, 1) FROM s3;
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan  (cost=10.00..3200.00 rows=2560 width=8)
   Output: (top(value1, 1))
   InfluxDB query: SELECT top("value1", 1) FROM "s3"
(3 rows)

-- selector function top(field_key,N) (result)
--Testcase 206:
SELECT top(value1, 1) FROM s3;
 top 
-----
 3.3
(1 row)

-- selector function top(field_key,tag_key(s),N) (explain)
--Testcase 207:
EXPLAIN VERBOSE
SELECT top(value1, tag1, 1) FROM s3;
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan  (cost=10.00..1600.00 rows=1280 width=8)
   Output: (top(value1, tag1, 1))
   InfluxDB query: SELECT top("value1", "tag1", 1) FROM "s3"
(3 rows)

-- selector function top(field_key,tag_key(s),N) (result)
--Testcase 208:
SELECT top(value1, tag1, 1) FROM s3;
 top 
-----
 3.3
(1 row)

-- selector function top() cannot be combined with other functions(explain)
--Testcase 209:
EXPLAIN VERBOSE
SELECT top(value1, 1), top(value2, 1), top(value3, 1), top(value4, 1) FROM s3;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2924.00 rows=1462 width=32)
   Output: (top(value1, 1)), (top(value2, 1)), (top(value3, 1)), (top(value4, 1))
   InfluxDB query: SELECT top("value1", 1), top("value2", 1), top("value3", 1), top("value4", 1) FROM "s3"
(3 rows)

-- selector function top() cannot be combined with other functions(result)
--Testcase 210:
SELECT top(value1, 1), top(value2, 1), top(value3, 1), top(value4, 1) FROM s3;
ERROR:  influxdb_fdw : selector function top() cannot be combined with other functions
-- select acos (builtin function, explain)
--Testcase 211:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value3) FROM s3;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2058.24 rows=2048 width=16)
   Output: (acos(value1)), (acos(value3))
   InfluxDB query: SELECT acos("value1"), acos("value3") FROM "s3"
(3 rows)

-- select acos (builtin function, result)
--Testcase 212:
SELECT acos(value1), acos(value3) FROM s3;
       acos       |       acos       
------------------+------------------
 1.47062890563334 | 1.67096374795646
 1.36943840600457 | 1.77215424758523
  1.2661036727795 | 1.87548898081029
                  |                 
                  |                 
                  |                 
(6 rows)

-- select acos (builtin function, not pushdown constraints, explain)
--Testcase 213:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value3) FROM s3 WHERE to_hex(value2) = '64';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..10.05 rows=10 width=16)
   Output: (acos(value1)), (acos(value3))
   Filter: (to_hex(s3.value2) = '64'::text)
   InfluxDB query: SELECT acos("value1"), acos("value3"), "value2" FROM "s3"
(4 rows)

-- select acos (builtin function, not pushdown constraints, result)
--Testcase 214:
SELECT acos(value1), acos(value3) FROM s3 WHERE to_hex(value2) = '64';
       acos       |       acos       
------------------+------------------
 1.47062890563334 | 1.67096374795646
 1.36943840600457 | 1.77215424758523
  1.2661036727795 | 1.87548898081029
(3 rows)

-- select acos (builtin function, pushdown constraints, explain)
--Testcase 215:
EXPLAIN VERBOSE
SELECT acos(value1), acos(value3) FROM s3 WHERE value2 != 200;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2048.19 rows=2038 width=16)
   Output: (acos(value1)), (acos(value3))
   InfluxDB query: SELECT acos("value1"), acos("value3") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select acos (builtin function, pushdown constraints, result)
--Testcase 216:
SELECT acos(value1), acos(value3) FROM s3 WHERE value2 != 200;
       acos       |       acos       
------------------+------------------
 1.47062890563334 | 1.67096374795646
 1.36943840600457 | 1.77215424758523
  1.2661036727795 | 1.87548898081029
(3 rows)

-- select acos as nest function with agg (pushdown, explain)
--Testcase 217:
EXPLAIN VERBOSE
SELECT sum(value3), acos(sum(value3)) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (acos(sum(value3)))
   InfluxDB query: SELECT sum("value3"), acos(sum("value3")) FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select acos as nest function with agg (pushdown, result)
--Testcase 218:
SELECT sum(value3), acos(sum(value3)) FROM s3 WHERE value2 != 200;
 sum  |       acos       
------+------------------
 -0.6 | 2.21429743558818
(1 row)

-- select acos as nest with log2 (pushdown, explain)
--Testcase 219:
EXPLAIN VERBOSE
SELECT acos(log2(value1)),acos(log2(1/value1)) FROM s3;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (acos(log2(value1))), (acos(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT acos(log2("value1")), acos(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select acos as nest with log2 (pushdown, result)
--Testcase 220:
SELECT acos(log2(value1)),acos(log2(1/value1)) FROM s3;
       acos       |       acos       
------------------+------------------
                  |                 
                  |                 
                  |                 
 1.43285577283535 | 1.70873688075444
                  |                 
                  |                 
(6 rows)

-- select acos with non pushdown func and explicit constant (explain)
--Testcase 221:
EXPLAIN VERBOSE
SELECT acos(value3), pi(), 4.1 FROM s3 WHERE value2 != 200;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2553.37 rows=2547 width=48)
   Output: (acos(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT acos("value3") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select acos with non pushdown func and explicit constant (result)
--Testcase 222:
SELECT acos(value3), pi(), 4.1 FROM s3 WHERE value2 != 200;
       acos       |        pi        | ?column? 
------------------+------------------+----------
 1.67096374795646 | 3.14159265358979 |      4.1
 1.77215424758523 | 3.14159265358979 |      4.1
 1.87548898081029 | 3.14159265358979 |      4.1
(3 rows)

-- select acos with order by (explain)
--Testcase 223:
EXPLAIN VERBOSE
SELECT value1, acos(1-value1) FROM s3 WHERE value2 != 200 ORDER BY acos(1-value1);
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=2703.83..2710.19 rows=2547 width=16)
   Output: value1, (acos(('1'::double precision - value1)))
   Sort Key: (acos(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2559.74 rows=2547 width=16)
         Output: value1, (acos(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", acos((1 - "value1")) FROM "s3" WHERE (("value2" <> 200))
(6 rows)

-- select acos with order by (result)
--Testcase 224:
SELECT value1, acos(1-value1) FROM s3 WHERE value2 != 200 ORDER BY acos(1-value1);
 value1 |       acos        
--------+-------------------
    0.1 | 0.451026811796262
    0.2 | 0.643501108793284
    0.3 | 0.795398830184144
(3 rows)

-- select acos with order by index (result)
--Testcase 225:
SELECT value1, acos(1-value1) FROM s3 WHERE value2 != 200 ORDER BY 2,1;
 value1 |       acos        
--------+-------------------
    0.1 | 0.451026811796262
    0.2 | 0.643501108793284
    0.3 | 0.795398830184144
(3 rows)

-- select acos with order by index (result)
--Testcase 226:
SELECT value1, acos(1-value1) FROM s3 WHERE value2 != 200 ORDER BY 1,2;
 value1 |       acos        
--------+-------------------
    0.1 | 0.451026811796262
    0.2 | 0.643501108793284
    0.3 | 0.795398830184144
(3 rows)

-- select acos and as
--Testcase 227:
SELECT acos(value3) as acos1 FROM s3 WHERE value2 != 200;
      acos1       
------------------
 1.67096374795646
 1.77215424758523
 1.87548898081029
(3 rows)

-- select acos(*) (stub agg function, explain)
--Testcase 760:
EXPLAIN VERBOSE
SELECT acos_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (acos_all())
   InfluxDB query: SELECT acos(*) FROM "s3"
(3 rows)

-- select acos(*) (stub agg function, result)
--Testcase 761:
SELECT acos_all() from s3;
                            acos_all                             
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.4706289056333368,,1.6709637479564563,)
 (1970-01-01T00:00:01Z,,1.3694384060045657,,1.7721542475852274,)
 (1970-01-01T00:00:02Z,,1.266103672779499,,1.8754889808102941,)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:05Z,,,,,)
(6 rows)

-- select acos(*) (stub agg function and group by tag only) (explain)
--Testcase 762:
EXPLAIN VERBOSE
SELECT acos_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (acos_all()), tag1
   InfluxDB query: SELECT acos(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select acos(*) (stub agg function and group by tag only) (result)
--Testcase 763:
SELECT acos_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                            acos_all                             
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.4706289056333368,,1.6709637479564563,)
 (1970-01-01T00:00:01Z,,1.3694384060045657,,1.7721542475852274,)
 (1970-01-01T00:00:02Z,,1.266103672779499,,1.8754889808102941,)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
(5 rows)

-- select acos(*) (stub agg function, expose data, explain)
--Testcase 764:
EXPLAIN VERBOSE
SELECT (acos_all()::s3).* from s3;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((acos_all()))::s3)."time", (((acos_all()))::s3).tag1, (((acos_all()))::s3).value1, (((acos_all()))::s3).value2, (((acos_all()))::s3).value3, (((acos_all()))::s3).value4
   InfluxDB query: SELECT acos(*) FROM "s3"
(3 rows)

-- select acos(*) (stub agg function, expose data, result)
--Testcase 765:
SELECT (acos_all()::s3).* from s3;
          time          | tag1 |      value1      | value2 |      value3      | value4 
------------------------+------+------------------+--------+------------------+--------
 1970-01-01 09:00:00+09 |      | 1.47062890563334 |        | 1.67096374795646 |       
 1970-01-01 09:00:01+09 |      | 1.36943840600457 |        | 1.77215424758523 |       
 1970-01-01 09:00:02+09 |      |  1.2661036727795 |        | 1.87548898081029 |       
 1970-01-01 09:00:03+09 |      |                  |        |                  |       
 1970-01-01 09:00:04+09 |      |                  |        |                  |       
 1970-01-01 09:00:05+09 |      |                  |        |                  |       
(6 rows)

-- select asin (builtin function, explain)
--Testcase 228:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value3) FROM s3;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2058.24 rows=2048 width=16)
   Output: (asin(value1)), (asin(value3))
   InfluxDB query: SELECT asin("value1"), asin("value3") FROM "s3"
(3 rows)

-- select asin (builtin function, result)
--Testcase 229:
SELECT asin(value1), asin(value3) FROM s3;
       asin        |        asin        
-------------------+--------------------
  0.10016742116156 |  -0.10016742116156
 0.201357920790331 | -0.201357920790331
 0.304692654015398 | -0.304692654015398
                   |                   
                   |                   
                   |                   
(6 rows)

-- select asin (builtin function, not pushdown constraints, explain)
--Testcase 230:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value3) FROM s3 WHERE to_hex(value2) = '64';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..10.05 rows=10 width=16)
   Output: (asin(value1)), (asin(value3))
   Filter: (to_hex(s3.value2) = '64'::text)
   InfluxDB query: SELECT asin("value1"), asin("value3"), "value2" FROM "s3"
(4 rows)

-- select asin (builtin function, not pushdown constraints, result)
--Testcase 231:
SELECT asin(value1), asin(value3) FROM s3 WHERE to_hex(value2) = '64';
       asin        |        asin        
-------------------+--------------------
  0.10016742116156 |  -0.10016742116156
 0.201357920790331 | -0.201357920790331
 0.304692654015398 | -0.304692654015398
(3 rows)

-- select asin (builtin function, pushdown constraints, explain)
--Testcase 232:
EXPLAIN VERBOSE
SELECT asin(value1), asin(value3) FROM s3 WHERE value2 != 200;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2048.19 rows=2038 width=16)
   Output: (asin(value1)), (asin(value3))
   InfluxDB query: SELECT asin("value1"), asin("value3") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select asin (builtin function, pushdown constraints, result)
--Testcase 233:
SELECT asin(value1), asin(value3) FROM s3 WHERE value2 != 200;
       asin        |        asin        
-------------------+--------------------
  0.10016742116156 |  -0.10016742116156
 0.201357920790331 | -0.201357920790331
 0.304692654015398 | -0.304692654015398
(3 rows)

-- select asin as nest function with agg (pushdown, explain)
--Testcase 234:
EXPLAIN VERBOSE
SELECT sum(value3), asin(sum(value3)) FROM s3 WHERE value2 != 200;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (asin(sum(value3)))
   InfluxDB query: SELECT sum("value3"), asin(sum("value3")) FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select asin as nest function with agg (pushdown, result)
--Testcase 235:
SELECT sum(value3), asin(sum(value3)) FROM s3 WHERE value2 != 200;
 sum  |        asin        
------+--------------------
 -0.6 | -0.643501108793284
(1 row)

-- select asin as nest with log2 (pushdown, explain)
--Testcase 236:
EXPLAIN VERBOSE
SELECT asin(log2(value1)),asin(log2(1/value1)) FROM s3;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (asin(log2(value1))), (asin(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT asin(log2("value1")), asin(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select asin as nest with log2 (pushdown, result)
--Testcase 237:
SELECT asin(log2(value1)),asin(log2(1/value1)) FROM s3;
       asin        |        asin        
-------------------+--------------------
                   |                   
                   |                   
                   |                   
 0.137940553959545 | -0.137940553959545
                   |                   
                   |                   
(6 rows)

-- select asin with non pushdown func and explicit constant (explain)
--Testcase 238:
EXPLAIN VERBOSE
SELECT asin(value3), pi(), 4.1 FROM s3 WHERE value2 != 200;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2553.37 rows=2547 width=48)
   Output: (asin(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT asin("value3") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select asin with non pushdown func and explicit constant (result)
--Testcase 239:
SELECT asin(value3), pi(), 4.1 FROM s3 WHERE value2 != 200;
        asin        |        pi        | ?column? 
--------------------+------------------+----------
  -0.10016742116156 | 3.14159265358979 |      4.1
 -0.201357920790331 | 3.14159265358979 |      4.1
 -0.304692654015398 | 3.14159265358979 |      4.1
(3 rows)

-- select asin with order by (explain)
--Testcase 240:
EXPLAIN VERBOSE
SELECT value1, asin(1-value1) FROM s3 WHERE value2 != 200 ORDER BY asin(1-value1);
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort  (cost=2703.83..2710.19 rows=2547 width=16)
   Output: value1, (asin(('1'::double precision - value1)))
   Sort Key: (asin(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2559.74 rows=2547 width=16)
         Output: value1, (asin(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", asin((1 - "value1")) FROM "s3" WHERE (("value2" <> 200))
(6 rows)

-- select asin with order by (result)
--Testcase 241:
SELECT value1, asin(1-value1) FROM s3 WHERE value2 != 200 ORDER BY asin(1-value1);
 value1 |       asin        
--------+-------------------
    0.3 | 0.775397496610753
    0.2 | 0.927295218001612
    0.1 |  1.11976951499863
(3 rows)

-- select asin with order by index (result)
--Testcase 242:
SELECT value1, asin(1-value1) FROM s3 WHERE value2 != 200 ORDER BY 2,1;
 value1 |       asin        
--------+-------------------
    0.3 | 0.775397496610753
    0.2 | 0.927295218001612
    0.1 |  1.11976951499863
(3 rows)

-- select asin with order by index (result)
--Testcase 243:
SELECT value1, asin(1-value1) FROM s3 WHERE value2 != 200 ORDER BY 1,2;
 value1 |       asin        
--------+-------------------
    0.1 |  1.11976951499863
    0.2 | 0.927295218001612
    0.3 | 0.775397496610753
(3 rows)

-- select asin and as
--Testcase 244:
SELECT asin(value3) as asin1 FROM s3 WHERE value2 != 200;
       asin1        
--------------------
  -0.10016742116156
 -0.201357920790331
 -0.304692654015398
(3 rows)

-- select asin(*) (stub agg function, explain)
--Testcase 766:
EXPLAIN VERBOSE
SELECT asin_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (asin_all())
   InfluxDB query: SELECT asin(*) FROM "s3"
(3 rows)

-- select asin(*) (stub agg function, result)
--Testcase 767:
SELECT asin_all() from s3;
                              asin_all                              
--------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1001674211615598,,-0.1001674211615598,)
 (1970-01-01T00:00:01Z,,0.20135792079033082,,-0.20135792079033082,)
 (1970-01-01T00:00:02Z,,0.3046926540153975,,-0.3046926540153975,)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
 (1970-01-01T00:00:05Z,,,,,)
(6 rows)

-- select asin(*) (stub agg function and group by tag only) (explain)
--Testcase 768:
EXPLAIN VERBOSE
SELECT asin_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (asin_all()), tag1
   InfluxDB query: SELECT asin(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select asin(*) (stub agg function and group by tag only) (result)
--Testcase 769:
SELECT asin_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                              asin_all                              
--------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.1001674211615598,,-0.1001674211615598,)
 (1970-01-01T00:00:01Z,,0.20135792079033082,,-0.20135792079033082,)
 (1970-01-01T00:00:02Z,,0.3046926540153975,,-0.3046926540153975,)
 (1970-01-01T00:00:03Z,,,,,)
 (1970-01-01T00:00:04Z,,,,,)
(5 rows)

-- select asin(*) (stub agg function, expose data, explain)
--Testcase 770:
EXPLAIN VERBOSE
SELECT (asin_all()::s3).* from s3;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((asin_all()))::s3)."time", (((asin_all()))::s3).tag1, (((asin_all()))::s3).value1, (((asin_all()))::s3).value2, (((asin_all()))::s3).value3, (((asin_all()))::s3).value4
   InfluxDB query: SELECT asin(*) FROM "s3"
(3 rows)

-- select asin(*) (stub agg function, expose data, result)
--Testcase 771:
SELECT (asin_all()::s3).* from s3;
          time          | tag1 |      value1       | value2 |       value3       | value4 
------------------------+------+-------------------+--------+--------------------+--------
 1970-01-01 09:00:00+09 |      |  0.10016742116156 |        |  -0.10016742116156 |       
 1970-01-01 09:00:01+09 |      | 0.201357920790331 |        | -0.201357920790331 |       
 1970-01-01 09:00:02+09 |      | 0.304692654015398 |        | -0.304692654015398 |       
 1970-01-01 09:00:03+09 |      |                   |        |                    |       
 1970-01-01 09:00:04+09 |      |                   |        |                    |       
 1970-01-01 09:00:05+09 |      |                   |        |                    |       
(6 rows)

-- select atan (builtin function, explain)
--Testcase 245:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
   InfluxDB query: SELECT atan("value1"), atan("value2"), atan("value3"), atan("value4") FROM "s3"
(3 rows)

-- select atan (builtin function, result)
--Testcase 246:
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3;
       atan        |       atan       |        atan        |       atan        
-------------------+------------------+--------------------+-------------------
 0.099668652491162 | 1.56079666010823 | -0.099668652491162 | -1.56079666010823
 0.197395559849881 | 1.56079666010823 | -0.197395559849881 | -1.56079666010823
 0.291456794477867 | 1.56079666010823 | -0.291456794477867 | -1.56079666010823
 0.832981266674432 | 1.56579636846094 | -0.832981266674432 | -1.56579636846094
  1.14416883366802 | 1.56579636846094 |  -1.14416883366802 | -1.56579636846094
  1.27656176168371 | 1.56579636846094 |  -1.27656176168371 | -1.56579636846094
(6 rows)

-- select atan (builtin function, not pushdown constraints, explain)
--Testcase 247:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 WHERE to_hex(value2) != '64';
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT atan("value1"), atan("value2"), atan("value3"), atan("value4"), "value2" FROM "s3"
(4 rows)

-- select atan (builtin function, not pushdown constraints, result)
--Testcase 248:
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 WHERE to_hex(value2) != '64';
       atan        |       atan       |        atan        |       atan        
-------------------+------------------+--------------------+-------------------
 0.832981266674432 | 1.56579636846094 | -0.832981266674432 | -1.56579636846094
  1.14416883366802 | 1.56579636846094 |  -1.14416883366802 | -1.56579636846094
  1.27656176168371 | 1.56579636846094 |  -1.27656176168371 | -1.56579636846094
(3 rows)

-- select atan (builtin function, pushdown constraints, explain)
--Testcase 249:
EXPLAIN VERBOSE
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 WHERE value2 != 200;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (atan(value1)), (atan((value2)::double precision)), (atan(value3)), (atan((value4)::double precision))
   InfluxDB query: SELECT atan("value1"), atan("value2"), atan("value3"), atan("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select atan (builtin function, pushdown constraints, result)
--Testcase 250:
SELECT atan(value1), atan(value2), atan(value3), atan(value4) FROM s3 WHERE value2 != 200;
       atan        |       atan       |        atan        |       atan        
-------------------+------------------+--------------------+-------------------
 0.099668652491162 | 1.56079666010823 | -0.099668652491162 | -1.56079666010823
 0.197395559849881 | 1.56079666010823 | -0.197395559849881 | -1.56079666010823
 0.291456794477867 | 1.56079666010823 | -0.291456794477867 | -1.56079666010823
(3 rows)

-- select atan as nest function with agg (pushdown, explain)
--Testcase 251:
EXPLAIN VERBOSE
SELECT sum(value3),atan(sum(value3)) FROM s3;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (atan(sum(value3)))
   InfluxDB query: SELECT sum("value3"), atan(sum("value3")) FROM "s3"
(3 rows)

-- select atan as nest function with agg (pushdown, result)
--Testcase 252:
SELECT sum(value3),atan(sum(value3)) FROM s3;
 sum  |       atan        
------+-------------------
 -7.2 | -1.43279030313738
(1 row)

-- select atan as nest with log2 (pushdown, explain)
--Testcase 253:
EXPLAIN VERBOSE
SELECT atan(log2(value1)),atan(log2(1/value1)) FROM s3;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (atan(log2(value1))), (atan(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT atan(log2("value1")), atan(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select atan as nest with log2 (pushdown, result)
--Testcase 254:
SELECT atan(log2(value1)),atan(log2(1/value1)) FROM s3;
       atan        |        atan        
-------------------+--------------------
 -1.27839485025093 |   1.27839485025093
 -1.16412742542701 |   1.16412742542701
 -1.04842363791536 |   1.04842363791536
  0.13664662085466 |  -0.13664662085466
 0.849638674971166 | -0.849638674971166
  1.04479137360874 |  -1.04479137360874
(6 rows)

-- select atan with non pushdown func and explicit constant (explain)
--Testcase 255:
EXPLAIN VERBOSE
SELECT atan(value3), pi(), 4.1 FROM s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (atan(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT atan("value3") FROM "s3"
(3 rows)

-- select atan with non pushdown func and explicit constant (result)
--Testcase 256:
SELECT atan(value3), pi(), 4.1 FROM s3;
        atan        |        pi        | ?column? 
--------------------+------------------+----------
 -0.099668652491162 | 3.14159265358979 |      4.1
 -0.197395559849881 | 3.14159265358979 |      4.1
 -0.291456794477867 | 3.14159265358979 |      4.1
 -0.832981266674432 | 3.14159265358979 |      4.1
  -1.14416883366802 | 3.14159265358979 |      4.1
  -1.27656176168371 | 3.14159265358979 |      4.1
(6 rows)

-- select atan with order by (explain)
--Testcase 257:
EXPLAIN VERBOSE
SELECT value1, atan(1-value1) FROM s3 order by atan(1-value1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (atan(('1'::double precision - value1)))
   Sort Key: (atan(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (atan(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", atan((1 - "value1")) FROM "s3"
(6 rows)

-- select atan with order by (result)
--Testcase 258:
SELECT value1, atan(1-value1) FROM s3 order by atan(1-value1);
 value1 |        atan         
--------+---------------------
    3.3 |   -1.16066898625341
    2.2 |  -0.876058050598193
    1.1 | -0.0996686524911621
    0.3 |   0.610725964389209
    0.2 |   0.674740942223553
    0.1 |   0.732815101786507
(6 rows)

-- select atan with order by index (result)
--Testcase 259:
SELECT value1, atan(1-value1) FROM s3 order by 2,1;
 value1 |        atan         
--------+---------------------
    3.3 |   -1.16066898625341
    2.2 |  -0.876058050598193
    1.1 | -0.0996686524911621
    0.3 |   0.610725964389209
    0.2 |   0.674740942223553
    0.1 |   0.732815101786507
(6 rows)

-- select atan with order by index (result)
--Testcase 260:
SELECT value1, atan(1-value1) FROM s3 order by 1,2;
 value1 |        atan         
--------+---------------------
    0.1 |   0.732815101786507
    0.2 |   0.674740942223553
    0.3 |   0.610725964389209
    1.1 | -0.0996686524911621
    2.2 |  -0.876058050598193
    3.3 |   -1.16066898625341
(6 rows)

-- select atan and as
--Testcase 261:
SELECT atan(value3) as atan1 FROM s3;
       atan1        
--------------------
 -0.099668652491162
 -0.197395559849881
 -0.291456794477867
 -0.832981266674432
  -1.14416883366802
  -1.27656176168371
(6 rows)

-- select atan(*) (stub agg function, explain)
--Testcase 772:
EXPLAIN VERBOSE
SELECT atan_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (atan_all())
   InfluxDB query: SELECT atan(*) FROM "s3"
(3 rows)

-- select atan(*) (stub agg function, result)
--Testcase 773:
SELECT atan_all() from s3;
                                                atan_all                                                 
---------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09966865249116204,1.5607966601082313,-0.09966865249116204,-1.5607966601082313)
 (1970-01-01T00:00:01Z,,0.19739555984988078,1.5607966601082313,-0.19739555984988078,-1.5607966601082313)
 (1970-01-01T00:00:02Z,,0.2914567944778671,1.5607966601082313,-0.2914567944778671,-1.5607966601082313)
 (1970-01-01T00:00:03Z,,0.8329812666744317,1.5657963684609382,-0.8329812666744317,-1.5657963684609382)
 (1970-01-01T00:00:04Z,,1.1441688336680205,1.5657963684609382,-1.1441688336680205,-1.5657963684609382)
 (1970-01-01T00:00:05Z,,1.2765617616837088,1.5657963684609382,-1.2765617616837088,-1.5657963684609382)
(6 rows)

-- select atan(*) (stub agg function and group by tag only) (explain)
--Testcase 774:
EXPLAIN VERBOSE
SELECT atan_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (atan_all()), tag1
   InfluxDB query: SELECT atan(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select atan(*) (stub agg function and group by tag only) (result)
--Testcase 775:
SELECT atan_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                atan_all                                                 
---------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09966865249116204,1.5607966601082313,-0.09966865249116204,-1.5607966601082313)
 (1970-01-01T00:00:01Z,,0.19739555984988078,1.5607966601082313,-0.19739555984988078,-1.5607966601082313)
 (1970-01-01T00:00:02Z,,0.2914567944778671,1.5607966601082313,-0.2914567944778671,-1.5607966601082313)
 (1970-01-01T00:00:03Z,,0.8329812666744317,1.5657963684609382,-0.8329812666744317,-1.5657963684609382)
 (1970-01-01T00:00:04Z,,1.1441688336680205,1.5657963684609382,-1.1441688336680205,-1.5657963684609382)
(5 rows)

-- select atan(*) (stub agg function, expose data, explain)
--Testcase 776:
EXPLAIN VERBOSE
SELECT (atan_all()::s3).* from s3;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((atan_all()))::s3)."time", (((atan_all()))::s3).tag1, (((atan_all()))::s3).value1, (((atan_all()))::s3).value2, (((atan_all()))::s3).value3, (((atan_all()))::s3).value4
   InfluxDB query: SELECT atan(*) FROM "s3"
(3 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 778:
SELECT asin_all(), acos_all(), atan_all() FROM s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub asin_all() is called
CONTEXT:  PL/pgSQL function asin_all() line 3 at RAISE
-- select atan2 (builtin function, explain)
--Testcase 262:
EXPLAIN VERBOSE
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1491.24 rows=1462 width=32)
   Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
   InfluxDB query: SELECT atan2("value1", "value2"), atan2("value2", "value3"), atan2("value3", "value4"), atan2("value4", "value1") FROM "s3"
(3 rows)

-- select atan2 (builtin function, result)
--Testcase 263:
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3;
        atan2         |      atan2       |       atan2       |       atan2       
----------------------+------------------+-------------------+-------------------
 0.000999999666666867 | 1.57179632646156 | -3.14059265392313 | -1.56979632712823
  0.00199999733333973 | 1.57279632412824 | -3.13959265625645 | -1.56879632946156
   0.0029999910000486 | 1.57379631779495 | -3.13859266258974 | -1.56779633579485
  0.00549994454267321 | 1.57629627133757 | -3.13609270904712 | -1.56529638225222
   0.0109995563655408 | 1.58179588316044 | -3.13059309722425 | -1.55979677042936
   0.0164985028695487 | 1.58729482966445 | -3.12509415072024 | -1.55429782392535
(6 rows)

-- select atan2 (builtin function, not pushdown constraints, explain)
--Testcase 264:
EXPLAIN VERBOSE
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 WHERE to_hex(value2) != '64';
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1484.10 rows=1455 width=32)
   Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT atan2("value1", "value2"), atan2("value2", "value3"), atan2("value3", "value4"), atan2("value4", "value1"), "value2" FROM "s3"
(4 rows)

-- select atan2 (builtin function, not pushdown constraints, result)
--Testcase 265:
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 WHERE to_hex(value2) != '64';
        atan2        |      atan2       |       atan2       |       atan2       
---------------------+------------------+-------------------+-------------------
 0.00549994454267321 | 1.57629627133757 | -3.13609270904712 | -1.56529638225222
  0.0109995563655408 | 1.58179588316044 | -3.13059309722425 | -1.55979677042936
  0.0164985028695487 | 1.58729482966445 | -3.12509415072024 | -1.55429782392535
(3 rows)

-- select atan2 (builtin function, pushdown constraints, explain)
--Testcase 266:
EXPLAIN VERBOSE
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 WHERE value2 != 200;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1484.10 rows=1455 width=32)
   Output: (atan2(value1, (value2)::double precision)), (atan2((value2)::double precision, value3)), (atan2(value3, (value4)::double precision)), (atan2((value4)::double precision, value1))
   InfluxDB query: SELECT atan2("value1", "value2"), atan2("value2", "value3"), atan2("value3", "value4"), atan2("value4", "value1") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select atan2 (builtin function, pushdown constraints, result)
--Testcase 267:
SELECT atan2(value1, value2), atan2(value2, value3), atan2(value3, value4), atan2(value4, value1) FROM s3 WHERE value2 != 200;
        atan2         |      atan2       |       atan2       |       atan2       
----------------------+------------------+-------------------+-------------------
 0.000999999666666867 | 1.57179632646156 | -3.14059265392313 | -1.56979632712823
  0.00199999733333973 | 1.57279632412824 | -3.13959265625645 | -1.56879632946156
   0.0029999910000486 | 1.57379631779495 | -3.13859266258974 | -1.56779633579485
(3 rows)

-- select atan2 as nest function with agg (pushdown, explain)
--Testcase 268:
EXPLAIN VERBOSE
SELECT sum(value3), sum(value4),atan2(sum(value3), sum(value3)) FROM s3;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (sum(value3)), (sum(value4)), (atan2(sum(value3), sum(value3)))
   InfluxDB query: SELECT sum("value3"), sum("value4"), atan2(sum("value3"), sum("value3")) FROM "s3"
(3 rows)

-- select atan2 as nest function with agg (pushdown, result)
--Testcase 269:
SELECT sum(value3), sum(value4),atan2(sum(value3), sum(value3)) FROM s3;
 sum  | sum  |       atan2       
------+------+-------------------
 -7.2 | -900 | -2.35619449019234
(1 row)

-- select atan2 as nest with log2 (pushdown, explain)
--Testcase 270:
EXPLAIN VERBOSE
SELECT atan2(log2(value1), log2(value1)),atan2(log2(1/value1), log2(1/value1)) FROM s3;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..5145.60 rows=2560 width=16)
   Output: (atan2(log2(value1), log2(value1))), (atan2(log2(('1'::double precision / value1)), log2(('1'::double precision / value1))))
   InfluxDB query: SELECT atan2(log2("value1"), log2("value1")), atan2(log2((1 / "value1")), log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select atan2 as nest with log2 (pushdown, result)
--Testcase 271:
SELECT atan2(log2(value1), log2(value1)),atan2(log2(1/value1), log2(1/value1)) FROM s3;
       atan2       |       atan2       
-------------------+-------------------
 -2.35619449019234 | 0.785398163397448
 -2.35619449019234 | 0.785398163397448
 -2.35619449019234 | 0.785398163397448
 0.785398163397448 | -2.35619449019234
 0.785398163397448 | -2.35619449019234
 0.785398163397448 | -2.35619449019234
(6 rows)

-- select atan2 with non pushdown func and explicit constant (explain)
--Testcase 272:
EXPLAIN VERBOSE
SELECT atan2(value3, value4), pi(), 4.1 FROM s3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2058.24 rows=2048 width=48)
   Output: (atan2(value3, (value4)::double precision)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT atan2("value3", "value4") FROM "s3"
(3 rows)

-- select atan2 with non pushdown func and explicit constant (result)
--Testcase 273:
SELECT atan2(value3, value4), pi(), 4.1 FROM s3;
       atan2       |        pi        | ?column? 
-------------------+------------------+----------
 -3.14059265392313 | 3.14159265358979 |      4.1
 -3.13959265625645 | 3.14159265358979 |      4.1
 -3.13859266258974 | 3.14159265358979 |      4.1
 -3.13609270904712 | 3.14159265358979 |      4.1
 -3.13059309722425 | 3.14159265358979 |      4.1
 -3.12509415072024 | 3.14159265358979 |      4.1
(6 rows)

-- select atan2 with order by (explain)
--Testcase 274:
EXPLAIN VERBOSE
SELECT value1, atan2(1-value1, 1-value2) FROM s3 order by atan2(1-value1, 1-value2);
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort  (cost=2181.12..2186.24 rows=2048 width=16)
   Output: value1, (atan2(('1'::double precision - value1), ((1 - value2))::double precision))
   Sort Key: (atan2(('1'::double precision - s3.value1), ((1 - s3.value2))::double precision))
   ->  Foreign Scan  (cost=10.00..2068.48 rows=2048 width=16)
         Output: value1, (atan2(('1'::double precision - value1), ((1 - value2))::double precision))
         InfluxDB query: SELECT "value1", atan2((1 - "value1"), (1 - "value2")) FROM "s3"
(6 rows)

-- select atan2 with order by (result)
--Testcase 275:
SELECT value1, atan2(1-value1, 1-value2) FROM s3 order by atan2(1-value1, 1-value2);
 value1 |       atan2       
--------+-------------------
    1.1 | -3.14109014106928
    2.2 | -3.13556257592532
    3.3 | -3.13003537924322
    0.1 |  3.13250199492473
    0.2 |  3.13351202139289
    0.3 |  3.13452206434865
(6 rows)

-- select atan2 with order by index (result)
--Testcase 276:
SELECT value1, atan2(1-value1, 1-value2) FROM s3 order by 2,1;
 value1 |       atan2       
--------+-------------------
    1.1 | -3.14109014106928
    2.2 | -3.13556257592532
    3.3 | -3.13003537924322
    0.1 |  3.13250199492473
    0.2 |  3.13351202139289
    0.3 |  3.13452206434865
(6 rows)

-- select atan2 with order by index (result)
--Testcase 277:
SELECT value1, atan2(1-value1, 1-value2) FROM s3 order by 1,2;
 value1 |       atan2       
--------+-------------------
    0.1 |  3.13250199492473
    0.2 |  3.13351202139289
    0.3 |  3.13452206434865
    1.1 | -3.14109014106928
    2.2 | -3.13556257592532
    3.3 | -3.13003537924322
(6 rows)

-- select atan2 and as
--Testcase 278:
SELECT atan2(value3, value4) as atan21 FROM s3;
      atan21       
-------------------
 -3.14059265392313
 -3.13959265625645
 -3.13859266258974
 -3.13609270904712
 -3.13059309722425
 -3.12509415072024
(6 rows)

-- select atan2(*) (stub function, explain)
--Testcase 779:
EXPLAIN VERBOSE
SELECT atan2_all(value1) from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..3200.00 rows=2560 width=32)
   Output: (atan2_all(value1))
   InfluxDB query: SELECT atan2(*, "value1") FROM "s3"
(3 rows)

-- select atan2(*) (stub function, result)
--Testcase 780:
SELECT atan2_all(value1) from s3;
                                               atan2_all                                               
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.7853981633974483,1.5697963271282296,-0.7853981633974483,-1.5697963271282296)
 (1970-01-01T00:00:01Z,,0.7853981633974483,1.5687963294615568,-0.7853981633974483,-1.5687963294615568)
 (1970-01-01T00:00:02Z,,0.7853981633974483,1.567796335794848,-0.7853981633974483,-1.567796335794848)
 (1970-01-01T00:00:03Z,,0.7853981633974483,1.5652963822522235,-0.7853981633974483,-1.5652963822522235)
 (1970-01-01T00:00:04Z,,0.7853981633974483,1.5597967704293558,-0.7853981633974483,-1.5597967704293558)
 (1970-01-01T00:00:05Z,,0.7853981633974483,1.554297823925348,-0.7853981633974483,-1.554297823925348)
(6 rows)

-- select ceil (builtin function, explain)
--Testcase 279:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
   InfluxDB query: SELECT ceil("value1"), ceil("value2"), ceil("value3"), ceil("value4") FROM "s3"
(3 rows)

-- select ceil (builtin function, result)
--Testcase 280:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3;
 ceil | ceil | ceil | ceil 
------+------+------+------
    1 |  100 |   -0 | -100
    1 |  100 |   -0 | -100
    1 |  100 |   -0 | -100
    2 |  200 |   -1 | -200
    3 |  200 |   -2 | -200
    4 |  200 |   -3 | -200
(6 rows)

-- select ceil (builtin function, not pushdown constraints, explain)
--Testcase 281:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 WHERE to_hex(value2) != '64';
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT ceil("value1"), ceil("value2"), ceil("value3"), ceil("value4"), "value2" FROM "s3"
(4 rows)

-- select ceil (builtin function, not pushdown constraints, result)
--Testcase 282:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 WHERE to_hex(value2) != '64';
 ceil | ceil | ceil | ceil 
------+------+------+------
    2 |  200 |   -1 | -200
    3 |  200 |   -2 | -200
    4 |  200 |   -3 | -200
(3 rows)

-- select ceil (builtin function, pushdown constraints, explain)
--Testcase 283:
EXPLAIN VERBOSE
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 WHERE value2 != 200;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (ceil(value1)), (ceil((value2)::double precision)), (ceil(value3)), (ceil((value4)::double precision))
   InfluxDB query: SELECT ceil("value1"), ceil("value2"), ceil("value3"), ceil("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select ceil (builtin function, pushdown constraints, result)
--Testcase 284:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4) FROM s3 WHERE value2 != 200;
 ceil | ceil | ceil | ceil 
------+------+------+------
    1 |  100 |   -0 | -100
    1 |  100 |   -0 | -100
    1 |  100 |   -0 | -100
(3 rows)

-- select ceil as nest function with agg (pushdown, explain)
--Testcase 285:
EXPLAIN VERBOSE
SELECT sum(value3),ceil(sum(value3)) FROM s3;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (ceil(sum(value3)))
   InfluxDB query: SELECT sum("value3"), ceil(sum("value3")) FROM "s3"
(3 rows)

-- select ceil as nest function with agg (pushdown, result)
--Testcase 286:
SELECT sum(value3),ceil(sum(value3)) FROM s3;
 sum  | ceil 
------+------
 -7.2 |   -7
(1 row)

-- select ceil as nest with log2 (pushdown, explain)
--Testcase 287:
EXPLAIN VERBOSE
SELECT ceil(log2(value1)),ceil(log2(1/value1)) FROM s3;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (ceil(log2(value1))), (ceil(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT ceil(log2("value1")), ceil(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select ceil as nest with log2 (pushdown, result)
--Testcase 288:
SELECT ceil(log2(value1)),ceil(log2(1/value1)) FROM s3;
 ceil | ceil 
------+------
   -3 |    4
   -2 |    3
   -1 |    2
    1 |   -0
    2 |   -1
    2 |   -1
(6 rows)

-- select ceil with non pushdown func and explicit constant (explain)
--Testcase 289:
EXPLAIN VERBOSE
SELECT ceil(value3), pi(), 4.1 FROM s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (ceil(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT ceil("value3") FROM "s3"
(3 rows)

-- select ceil with non pushdown func and explicit constant (result)
--Testcase 290:
SELECT ceil(value3), pi(), 4.1 FROM s3;
 ceil |        pi        | ?column? 
------+------------------+----------
   -0 | 3.14159265358979 |      4.1
   -0 | 3.14159265358979 |      4.1
   -0 | 3.14159265358979 |      4.1
   -1 | 3.14159265358979 |      4.1
   -2 | 3.14159265358979 |      4.1
   -3 | 3.14159265358979 |      4.1
(6 rows)

-- select ceil with order by (explain)
--Testcase 291:
EXPLAIN VERBOSE
SELECT value1, ceil(1-value1) FROM s3 order by ceil(1-value1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (ceil(('1'::double precision - value1)))
   Sort Key: (ceil(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (ceil(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", ceil((1 - "value1")) FROM "s3"
(6 rows)

-- select ceil with order by (result)
--Testcase 292:
SELECT value1, ceil(1-value1) FROM s3 order by ceil(1-value1);
 value1 | ceil 
--------+------
    3.3 |   -2
    2.2 |   -1
    1.1 |   -0
    0.1 |    1
    0.2 |    1
    0.3 |    1
(6 rows)

-- select ceil with order by index (result)
--Testcase 293:
SELECT value1, ceil(1-value1) FROM s3 order by 2,1;
 value1 | ceil 
--------+------
    3.3 |   -2
    2.2 |   -1
    1.1 |   -0
    0.1 |    1
    0.2 |    1
    0.3 |    1
(6 rows)

-- select ceil with order by index (result)
--Testcase 294:
SELECT value1, ceil(1-value1) FROM s3 order by 1,2;
 value1 | ceil 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |   -0
    2.2 |   -1
    3.3 |   -2
(6 rows)

-- select ceil and as
--Testcase 295:
SELECT ceil(value3) as ceil1 FROM s3;
 ceil1 
-------
    -0
    -0
    -0
    -1
    -2
    -3
(6 rows)

-- select ceil(*) (stub agg function, explain)
--Testcase 783:
EXPLAIN VERBOSE
SELECT ceil_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (ceil_all())
   InfluxDB query: SELECT ceil(*) FROM "s3"
(3 rows)

-- select ceil(*) (stub agg function, result)
--Testcase 784:
SELECT ceil_all() from s3;
               ceil_all                
---------------------------------------
 (1970-01-01T00:00:00Z,,1,100,-0,-100)
 (1970-01-01T00:00:01Z,,1,100,-0,-100)
 (1970-01-01T00:00:02Z,,1,100,-0,-100)
 (1970-01-01T00:00:03Z,,2,200,-1,-200)
 (1970-01-01T00:00:04Z,,3,200,-2,-200)
 (1970-01-01T00:00:05Z,,4,200,-3,-200)
(6 rows)

-- select ceil(*) (stub agg function and group by tag only) (explain)
--Testcase 785:
EXPLAIN VERBOSE
SELECT ceil_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (ceil_all()), tag1
   InfluxDB query: SELECT ceil(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select ceil(*) (stub agg function and group by tag only) (result)
--Testcase 786:
SELECT ceil_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
               ceil_all                
---------------------------------------
 (1970-01-01T00:00:00Z,,1,100,-0,-100)
 (1970-01-01T00:00:01Z,,1,100,-0,-100)
 (1970-01-01T00:00:02Z,,1,100,-0,-100)
 (1970-01-01T00:00:03Z,,2,200,-1,-200)
 (1970-01-01T00:00:04Z,,3,200,-2,-200)
(5 rows)

-- select ceil(*) (stub agg function, expose data, explain)
--Testcase 787:
EXPLAIN VERBOSE
SELECT (ceil_all()::s3).* from s3;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((ceil_all()))::s3)."time", (((ceil_all()))::s3).tag1, (((ceil_all()))::s3).value1, (((ceil_all()))::s3).value2, (((ceil_all()))::s3).value3, (((ceil_all()))::s3).value4
   InfluxDB query: SELECT ceil(*) FROM "s3"
(3 rows)

-- select ceil(*) (stub agg function, expose data, result)
--Testcase 788:
SELECT (ceil_all()::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |      1 |    100 |     -0 |   -100
 1970-01-01 09:00:01+09 |      |      1 |    100 |     -0 |   -100
 1970-01-01 09:00:02+09 |      |      1 |    100 |     -0 |   -100
 1970-01-01 09:00:03+09 |      |      2 |    200 |     -1 |   -200
 1970-01-01 09:00:04+09 |      |      3 |    200 |     -2 |   -200
 1970-01-01 09:00:05+09 |      |      4 |    200 |     -3 |   -200
(6 rows)

-- select cos (builtin function, explain)
--Testcase 296:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
   InfluxDB query: SELECT cos("value1"), cos("value2"), cos("value3"), cos("value4") FROM "s3"
(3 rows)

-- select cos (builtin function, result)
--Testcase 297:
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3;
        cos         |        cos        |        cos         |        cos        
--------------------+-------------------+--------------------+-------------------
  0.995004165278026 | 0.862318872287684 |  0.995004165278026 | 0.862318872287684
  0.980066577841242 | 0.862318872287684 |  0.980066577841242 | 0.862318872287684
  0.955336489125606 | 0.862318872287684 |  0.955336489125606 | 0.862318872287684
  0.453596121425577 | 0.487187675007006 |  0.453596121425577 | 0.487187675007006
 -0.588501117255346 | 0.487187675007006 | -0.588501117255346 | 0.487187675007006
 -0.987479769908865 | 0.487187675007006 | -0.987479769908865 | 0.487187675007006
(6 rows)

-- select cos (builtin function, not pushdown constraints, explain)
--Testcase 298:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 WHERE to_hex(value2) != '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT cos("value1"), cos("value2"), cos("value3"), cos("value4"), "value2" FROM "s3"
(4 rows)

-- select cos (builtin function, not pushdown constraints, result)
--Testcase 299:
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 WHERE to_hex(value2) != '64';
        cos         |        cos        |        cos         |        cos        
--------------------+-------------------+--------------------+-------------------
  0.453596121425577 | 0.487187675007006 |  0.453596121425577 | 0.487187675007006
 -0.588501117255346 | 0.487187675007006 | -0.588501117255346 | 0.487187675007006
 -0.987479769908865 | 0.487187675007006 | -0.987479769908865 | 0.487187675007006
(3 rows)

-- select cos (builtin function, pushdown constraints, explain)
--Testcase 300:
EXPLAIN VERBOSE
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 WHERE value2 != 200;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (cos(value1)), (cos((value2)::double precision)), (cos(value3)), (cos((value4)::double precision))
   InfluxDB query: SELECT cos("value1"), cos("value2"), cos("value3"), cos("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select cos (builtin function, pushdown constraints, result)
--Testcase 301:
SELECT cos(value1), cos(value2), cos(value3), cos(value4) FROM s3 WHERE value2 != 200;
        cos        |        cos        |        cos        |        cos        
-------------------+-------------------+-------------------+-------------------
 0.995004165278026 | 0.862318872287684 | 0.995004165278026 | 0.862318872287684
 0.980066577841242 | 0.862318872287684 | 0.980066577841242 | 0.862318872287684
 0.955336489125606 | 0.862318872287684 | 0.955336489125606 | 0.862318872287684
(3 rows)

-- select cos as nest function with agg (pushdown, explain)
--Testcase 302:
EXPLAIN VERBOSE
SELECT sum(value3),cos(sum(value3)) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (cos(sum(value3)))
   InfluxDB query: SELECT sum("value3"), cos(sum("value3")) FROM "s3"
(3 rows)

-- select cos as nest function with agg (pushdown, result)
--Testcase 303:
SELECT sum(value3),cos(sum(value3)) FROM s3;
 sum  |        cos        
------+-------------------
 -7.2 | 0.608351314532255
(1 row)

-- select cos as nest with log2 (pushdown, explain)
--Testcase 304:
EXPLAIN VERBOSE
SELECT cos(log2(value1)),cos(log2(1/value1)) FROM s3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (cos(log2(value1))), (cos(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT cos(log2("value1")), cos(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select cos as nest with log2 (pushdown, result)
--Testcase 305:
SELECT cos(log2(value1)),cos(log2(1/value1)) FROM s3;
        cos         |        cos         
--------------------+--------------------
 -0.983783583525364 | -0.983783583525364
  -0.68246642540679 |  -0.68246642540679
 -0.165405605243286 | -0.165405605243286
  0.990561276215998 |  0.990561276215998
  0.419861582239189 |  0.419861582239189
 -0.151088872169093 | -0.151088872169093
(6 rows)

-- select cos with non pushdown func and explicit constant (explain)
--Testcase 306:
EXPLAIN VERBOSE
SELECT cos(value3), pi(), 4.1 FROM s3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (cos(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT cos("value3") FROM "s3"
(3 rows)

-- select cos with non pushdown func and explicit constant (result)
--Testcase 307:
SELECT cos(value3), pi(), 4.1 FROM s3;
        cos         |        pi        | ?column? 
--------------------+------------------+----------
  0.995004165278026 | 3.14159265358979 |      4.1
  0.980066577841242 | 3.14159265358979 |      4.1
  0.955336489125606 | 3.14159265358979 |      4.1
  0.453596121425577 | 3.14159265358979 |      4.1
 -0.588501117255346 | 3.14159265358979 |      4.1
 -0.987479769908865 | 3.14159265358979 |      4.1
(6 rows)

-- select cos with order by (explain)
--Testcase 308:
EXPLAIN VERBOSE
SELECT value1, cos(1-value1) FROM s3 order by cos(1-value1);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (cos(('1'::double precision - value1)))
   Sort Key: (cos(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (cos(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", cos((1 - "value1")) FROM "s3"
(6 rows)

-- select cos with order by (result)
--Testcase 309:
SELECT value1, cos(1-value1) FROM s3 order by cos(1-value1);
 value1 |        cos         
--------+--------------------
    3.3 | -0.666276021279824
    2.2 |  0.362357754476673
    0.1 |  0.621609968270665
    0.2 |  0.696706709347165
    0.3 |  0.764842187284488
    1.1 |  0.995004165278026
(6 rows)

-- select cos with order by index (result)
--Testcase 310:
SELECT value1, cos(1-value1) FROM s3 order by 2,1;
 value1 |        cos         
--------+--------------------
    3.3 | -0.666276021279824
    2.2 |  0.362357754476673
    0.1 |  0.621609968270665
    0.2 |  0.696706709347165
    0.3 |  0.764842187284488
    1.1 |  0.995004165278026
(6 rows)

-- select cos with order by index (result)
--Testcase 311:
SELECT value1, cos(1-value1) FROM s3 order by 1,2;
 value1 |        cos         
--------+--------------------
    0.1 |  0.621609968270665
    0.2 |  0.696706709347165
    0.3 |  0.764842187284488
    1.1 |  0.995004165278026
    2.2 |  0.362357754476673
    3.3 | -0.666276021279824
(6 rows)

-- select cos and as
--Testcase 312:
SELECT cos(value3) as cos1 FROM s3;
        cos1        
--------------------
  0.995004165278026
  0.980066577841242
  0.955336489125606
  0.453596121425577
 -0.588501117255346
 -0.987479769908865
(6 rows)

-- select cos(*) (stub agg function, explain)
--Testcase 789:
EXPLAIN VERBOSE
SELECT cos_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (cos_all())
   InfluxDB query: SELECT cos(*) FROM "s3"
(3 rows)

-- select cos(*) (stub agg function, result)
--Testcase 790:
SELECT cos_all() from s3;
                                                 cos_all                                                 
---------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.9950041652780257,0.8623188722876839,0.9950041652780257,0.8623188722876839)
 (1970-01-01T00:00:01Z,,0.9800665778412416,0.8623188722876839,0.9800665778412416,0.8623188722876839)
 (1970-01-01T00:00:02Z,,0.955336489125606,0.8623188722876839,0.955336489125606,0.8623188722876839)
 (1970-01-01T00:00:03Z,,0.4535961214255773,0.48718767500700594,0.4535961214255773,0.48718767500700594)
 (1970-01-01T00:00:04Z,,-0.5885011172553458,0.48718767500700594,-0.5885011172553458,0.48718767500700594)
 (1970-01-01T00:00:05Z,,-0.987479769908865,0.48718767500700594,-0.987479769908865,0.48718767500700594)
(6 rows)

-- select cos(*) (stub agg function and group by tag only) (explain)
--Testcase 791:
EXPLAIN VERBOSE
SELECT cos_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (cos_all()), tag1
   InfluxDB query: SELECT cos(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select cos(*) (stub agg function and group by tag only) (result)
--Testcase 792:
SELECT cos_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                 cos_all                                                 
---------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.9950041652780257,0.8623188722876839,0.9950041652780257,0.8623188722876839)
 (1970-01-01T00:00:01Z,,0.9800665778412416,0.8623188722876839,0.9800665778412416,0.8623188722876839)
 (1970-01-01T00:00:02Z,,0.955336489125606,0.8623188722876839,0.955336489125606,0.8623188722876839)
 (1970-01-01T00:00:03Z,,0.4535961214255773,0.48718767500700594,0.4535961214255773,0.48718767500700594)
 (1970-01-01T00:00:04Z,,-0.5885011172553458,0.48718767500700594,-0.5885011172553458,0.48718767500700594)
(5 rows)

-- select exp (builtin function, explain)
--Testcase 313:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
   InfluxDB query: SELECT exp("value1"), exp("value2"), exp("value3"), exp("value4") FROM "s3"
(3 rows)

-- select exp (builtin function, result)
--Testcase 314:
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3;
       exp        |         exp          |        exp        |         exp          
------------------+----------------------+-------------------+----------------------
 1.10517091807565 | 2.68811714181614e+43 |  0.90483741803596 | 3.72007597602084e-44
 1.22140275816017 | 2.68811714181614e+43 | 0.818730753077982 | 3.72007597602084e-44
   1.349858807576 | 2.68811714181614e+43 | 0.740818220681718 | 3.72007597602084e-44
 3.00416602394643 | 7.22597376812575e+86 | 0.332871083698079 | 1.38389652673674e-87
 9.02501349943412 | 7.22597376812575e+86 | 0.110803158362334 | 1.38389652673674e-87
 27.1126389206579 | 7.22597376812575e+86 |  0.03688316740124 | 1.38389652673674e-87
(6 rows)

-- select exp (builtin function, not pushdown constraints, explain)
--Testcase 315:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 WHERE to_hex(value2) != '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT exp("value1"), exp("value2"), exp("value3"), exp("value4"), "value2" FROM "s3"
(4 rows)

-- select exp (builtin function, not pushdown constraints, result)
--Testcase 316:
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 WHERE to_hex(value2) != '64';
       exp        |         exp          |        exp        |         exp          
------------------+----------------------+-------------------+----------------------
 3.00416602394643 | 7.22597376812575e+86 | 0.332871083698079 | 1.38389652673674e-87
 9.02501349943412 | 7.22597376812575e+86 | 0.110803158362334 | 1.38389652673674e-87
 27.1126389206579 | 7.22597376812575e+86 |  0.03688316740124 | 1.38389652673674e-87
(3 rows)

-- select exp (builtin function, pushdown constraints, explain)
--Testcase 317:
EXPLAIN VERBOSE
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 WHERE value2 != 200;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (exp(value1)), (exp((value2)::double precision)), (exp(value3)), (exp((value4)::double precision))
   InfluxDB query: SELECT exp("value1"), exp("value2"), exp("value3"), exp("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select exp (builtin function, pushdown constraints, result)
--Testcase 318:
SELECT exp(value1), exp(value2), exp(value3), exp(value4) FROM s3 WHERE value2 != 200;
       exp        |         exp          |        exp        |         exp          
------------------+----------------------+-------------------+----------------------
 1.10517091807565 | 2.68811714181614e+43 |  0.90483741803596 | 3.72007597602084e-44
 1.22140275816017 | 2.68811714181614e+43 | 0.818730753077982 | 3.72007597602084e-44
   1.349858807576 | 2.68811714181614e+43 | 0.740818220681718 | 3.72007597602084e-44
(3 rows)

-- select exp as nest function with agg (pushdown, explain)
--Testcase 319:
EXPLAIN VERBOSE
SELECT sum(value3),exp(sum(value3)) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (exp(sum(value3)))
   InfluxDB query: SELECT sum("value3"), exp(sum("value3")) FROM "s3"
(3 rows)

-- select exp as nest function with agg (pushdown, result)
--Testcase 320:
SELECT sum(value3),exp(sum(value3)) FROM s3;
 sum  |         exp         
------+---------------------
 -7.2 | 0.00074658580837668
(1 row)

-- select exp as nest with log2 (pushdown, explain)
--Testcase 321:
EXPLAIN VERBOSE
SELECT exp(log2(value1)),exp(log2(1/value1)) FROM s3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (exp(log2(value1))), (exp(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT exp(log2("value1")), exp(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select exp as nest with log2 (pushdown, result)
--Testcase 322:
SELECT exp(log2(value1)),exp(log2(1/value1)) FROM s3;
        exp         |        exp        
--------------------+-------------------
 0.0360831928207872 |  27.7137337864378
 0.0980842873575298 |  10.1953128981289
  0.176053809624996 |  5.68008157352602
   1.14740574913588 |  0.87153127893346
   3.11897219774551 | 0.320618439857474
    5.5983170426266 | 0.178625110436908
(6 rows)

-- select exp with non pushdown func and explicit constant (explain)
--Testcase 323:
EXPLAIN VERBOSE
SELECT exp(value3), pi(), 4.1 FROM s3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (exp(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT exp("value3") FROM "s3"
(3 rows)

-- select exp with non pushdown func and explicit constant (result)
--Testcase 324:
SELECT exp(value3), pi(), 4.1 FROM s3;
        exp        |        pi        | ?column? 
-------------------+------------------+----------
  0.90483741803596 | 3.14159265358979 |      4.1
 0.818730753077982 | 3.14159265358979 |      4.1
 0.740818220681718 | 3.14159265358979 |      4.1
 0.332871083698079 | 3.14159265358979 |      4.1
 0.110803158362334 | 3.14159265358979 |      4.1
  0.03688316740124 | 3.14159265358979 |      4.1
(6 rows)

-- select exp with order by (explain)
--Testcase 325:
EXPLAIN VERBOSE
SELECT value1, exp(1-value1) FROM s3 order by exp(1-value1);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (exp(('1'::double precision - value1)))
   Sort Key: (exp(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (exp(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", exp((1 - "value1")) FROM "s3"
(6 rows)

-- select exp with order by (result)
--Testcase 326:
SELECT value1, exp(1-value1) FROM s3 order by exp(1-value1);
 value1 |        exp        
--------+-------------------
    3.3 | 0.100258843722804
    2.2 | 0.301194211912202
    1.1 |  0.90483741803596
    0.3 |  2.01375270747048
    0.2 |  2.22554092849247
    0.1 |  2.45960311115695
(6 rows)

-- select exp with order by index (result)
--Testcase 327:
SELECT value1, exp(1-value1) FROM s3 order by 2,1;
 value1 |        exp        
--------+-------------------
    3.3 | 0.100258843722804
    2.2 | 0.301194211912202
    1.1 |  0.90483741803596
    0.3 |  2.01375270747048
    0.2 |  2.22554092849247
    0.1 |  2.45960311115695
(6 rows)

-- select exp with order by index (result)
--Testcase 328:
SELECT value1, exp(1-value1) FROM s3 order by 1,2;
 value1 |        exp        
--------+-------------------
    0.1 |  2.45960311115695
    0.2 |  2.22554092849247
    0.3 |  2.01375270747048
    1.1 |  0.90483741803596
    2.2 | 0.301194211912202
    3.3 | 0.100258843722804
(6 rows)

-- select exp and as
--Testcase 329:
SELECT exp(value3) as exp1 FROM s3;
       exp1        
-------------------
  0.90483741803596
 0.818730753077982
 0.740818220681718
 0.332871083698079
 0.110803158362334
  0.03688316740124
(6 rows)

-- select exp(*) (stub agg function, explain)
--Testcase 793:
EXPLAIN VERBOSE
SELECT exp_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (exp_all())
   InfluxDB query: SELECT exp(*) FROM "s3"
(3 rows)

-- select exp(*) (stub agg function, result)
--Testcase 794:
SELECT exp_all() from s3;
                                                   exp_all                                                   
-------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.1051709180756477,2.6881171418161356e+43,0.9048374180359595,3.720075976020836e-44)
 (1970-01-01T00:00:01Z,,1.2214027581601699,2.6881171418161356e+43,0.8187307530779819,3.720075976020836e-44)
 (1970-01-01T00:00:02Z,,1.3498588075760032,2.6881171418161356e+43,0.7408182206817179,3.720075976020836e-44)
 (1970-01-01T00:00:03Z,,3.0041660239464334,7.22597376812575e+86,0.3328710836980795,1.3838965267367376e-87)
 (1970-01-01T00:00:04Z,,9.025013499434122,7.22597376812575e+86,0.11080315836233386,1.3838965267367376e-87)
 (1970-01-01T00:00:05Z,,27.112638920657883,7.22597376812575e+86,0.036883167401240015,1.3838965267367376e-87)
(6 rows)

-- select exp(*) (stub agg function and group by tag only) (explain)
--Testcase 795:
EXPLAIN VERBOSE
SELECT exp_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (exp_all()), tag1
   InfluxDB query: SELECT exp(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select exp(*) (stub agg function and group by tag only) (result)
--Testcase 796:
SELECT exp_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                  exp_all                                                   
------------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,1.1051709180756477,2.6881171418161356e+43,0.9048374180359595,3.720075976020836e-44)
 (1970-01-01T00:00:01Z,,1.2214027581601699,2.6881171418161356e+43,0.8187307530779819,3.720075976020836e-44)
 (1970-01-01T00:00:02Z,,1.3498588075760032,2.6881171418161356e+43,0.7408182206817179,3.720075976020836e-44)
 (1970-01-01T00:00:03Z,,3.0041660239464334,7.22597376812575e+86,0.3328710836980795,1.3838965267367376e-87)
 (1970-01-01T00:00:04Z,,9.025013499434122,7.22597376812575e+86,0.11080315836233386,1.3838965267367376e-87)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 797:
SELECT ceil_all(), cos_all(), exp_all() FROM s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub ceil_all() is called
CONTEXT:  PL/pgSQL function ceil_all() line 3 at RAISE
-- select floor (builtin function, explain)
--Testcase 330:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
   InfluxDB query: SELECT floor("value1"), floor("value2"), floor("value3"), floor("value4") FROM "s3"
(3 rows)

-- select floor (builtin function, result)
--Testcase 331:
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3;
 floor | floor | floor | floor 
-------+-------+-------+-------
     0 |   100 |    -1 |  -100
     0 |   100 |    -1 |  -100
     0 |   100 |    -1 |  -100
     1 |   200 |    -2 |  -200
     2 |   200 |    -3 |  -200
     3 |   200 |    -4 |  -200
(6 rows)

-- select floor (builtin function, not pushdown constraints, explain)
--Testcase 332:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 WHERE to_hex(value2) != '64';
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT floor("value1"), floor("value2"), floor("value3"), floor("value4"), "value2" FROM "s3"
(4 rows)

-- select floor (builtin function, not pushdown constraints, result)
--Testcase 333:
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 WHERE to_hex(value2) != '64';
 floor | floor | floor | floor 
-------+-------+-------+-------
     1 |   200 |    -2 |  -200
     2 |   200 |    -3 |  -200
     3 |   200 |    -4 |  -200
(3 rows)

-- select floor (builtin function, pushdown constraints, explain)
--Testcase 334:
EXPLAIN VERBOSE
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 WHERE value2 != 200;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (floor(value1)), (floor((value2)::double precision)), (floor(value3)), (floor((value4)::double precision))
   InfluxDB query: SELECT floor("value1"), floor("value2"), floor("value3"), floor("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select floor (builtin function, pushdown constraints, result)
--Testcase 335:
SELECT floor(value1), floor(value2), floor(value3), floor(value4) FROM s3 WHERE value2 != 200;
 floor | floor | floor | floor 
-------+-------+-------+-------
     0 |   100 |    -1 |  -100
     0 |   100 |    -1 |  -100
     0 |   100 |    -1 |  -100
(3 rows)

-- select floor as nest function with agg (pushdown, explain)
--Testcase 336:
EXPLAIN VERBOSE
SELECT sum(value3),floor(sum(value3)) FROM s3;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (floor(sum(value3)))
   InfluxDB query: SELECT sum("value3"), floor(sum("value3")) FROM "s3"
(3 rows)

-- select floor as nest function with agg (pushdown, result)
--Testcase 337:
SELECT sum(value3),floor(sum(value3)) FROM s3;
 sum  | floor 
------+-------
 -7.2 |    -8
(1 row)

-- select floor as nest with log2 (pushdown, explain)
--Testcase 338:
EXPLAIN VERBOSE
SELECT floor(log2(value1)),floor(log2(1/value1)) FROM s3;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (floor(log2(value1))), (floor(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT floor(log2("value1")), floor(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select floor as nest with log2 (pushdown, result)
--Testcase 339:
SELECT floor(log2(value1)),floor(log2(1/value1)) FROM s3;
 floor | floor 
-------+-------
    -4 |     3
    -3 |     2
    -2 |     1
     0 |    -1
     1 |    -2
     1 |    -2
(6 rows)

-- select floor with non pushdown func and explicit constant (explain)
--Testcase 340:
EXPLAIN VERBOSE
SELECT floor(value3), pi(), 4.1 FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (floor(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT floor("value3") FROM "s3"
(3 rows)

-- select floor with non pushdown func and explicit constant (result)
--Testcase 341:
SELECT floor(value3), pi(), 4.1 FROM s3;
 floor |        pi        | ?column? 
-------+------------------+----------
    -1 | 3.14159265358979 |      4.1
    -1 | 3.14159265358979 |      4.1
    -1 | 3.14159265358979 |      4.1
    -2 | 3.14159265358979 |      4.1
    -3 | 3.14159265358979 |      4.1
    -4 | 3.14159265358979 |      4.1
(6 rows)

-- select floor with order by (explain)
--Testcase 342:
EXPLAIN VERBOSE
SELECT value1, floor(1-value1) FROM s3 order by floor(1-value1);
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (floor(('1'::double precision - value1)))
   Sort Key: (floor(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (floor(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", floor((1 - "value1")) FROM "s3"
(6 rows)

-- select floor with order by (result)
--Testcase 343:
SELECT value1, floor(1-value1) FROM s3 order by floor(1-value1);
 value1 | floor 
--------+-------
    3.3 |    -3
    2.2 |    -2
    1.1 |    -1
    0.1 |     0
    0.2 |     0
    0.3 |     0
(6 rows)

-- select floor with order by index (result)
--Testcase 344:
SELECT value1, floor(1-value1) FROM s3 order by 2,1;
 value1 | floor 
--------+-------
    3.3 |    -3
    2.2 |    -2
    1.1 |    -1
    0.1 |     0
    0.2 |     0
    0.3 |     0
(6 rows)

-- select floor with order by index (result)
--Testcase 345:
SELECT value1, floor(1-value1) FROM s3 order by 1,2;
 value1 | floor 
--------+-------
    0.1 |     0
    0.2 |     0
    0.3 |     0
    1.1 |    -1
    2.2 |    -2
    3.3 |    -3
(6 rows)

-- select floor and as
--Testcase 346:
SELECT floor(value3) as floor1 FROM s3;
 floor1 
--------
     -1
     -1
     -1
     -2
     -3
     -4
(6 rows)

-- select floor(*) (stub agg function, explain)
--Testcase 798:
EXPLAIN VERBOSE
SELECT floor_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (floor_all())
   InfluxDB query: SELECT floor(*) FROM "s3"
(3 rows)

-- select floor(*) (stub agg function, result)
--Testcase 799:
SELECT floor_all() from s3;
               floor_all               
---------------------------------------
 (1970-01-01T00:00:00Z,,0,100,-1,-100)
 (1970-01-01T00:00:01Z,,0,100,-1,-100)
 (1970-01-01T00:00:02Z,,0,100,-1,-100)
 (1970-01-01T00:00:03Z,,1,200,-2,-200)
 (1970-01-01T00:00:04Z,,2,200,-3,-200)
 (1970-01-01T00:00:05Z,,3,200,-4,-200)
(6 rows)

-- select floor(*) (stub agg function and group by tag only) (explain)
--Testcase 800:
EXPLAIN VERBOSE
SELECT floor_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (floor_all()), tag1
   InfluxDB query: SELECT floor(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select floor(*) (stub agg function and group by tag only) (result)
--Testcase 801:
SELECT floor_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
               floor_all               
---------------------------------------
 (1970-01-01T00:00:00Z,,0,100,-1,-100)
 (1970-01-01T00:00:01Z,,0,100,-1,-100)
 (1970-01-01T00:00:02Z,,0,100,-1,-100)
 (1970-01-01T00:00:03Z,,1,200,-2,-200)
 (1970-01-01T00:00:04Z,,2,200,-3,-200)
(5 rows)

-- select floor(*) (stub agg function, expose data, explain)
--Testcase 802:
EXPLAIN VERBOSE
SELECT (floor_all()::s3).* from s3;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((floor_all()))::s3)."time", (((floor_all()))::s3).tag1, (((floor_all()))::s3).value1, (((floor_all()))::s3).value2, (((floor_all()))::s3).value3, (((floor_all()))::s3).value4
   InfluxDB query: SELECT floor(*) FROM "s3"
(3 rows)

-- select floor(*) (stub agg function, expose data, result)
--Testcase 803:
SELECT (floor_all()::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |      0 |    100 |     -1 |   -100
 1970-01-01 09:00:01+09 |      |      0 |    100 |     -1 |   -100
 1970-01-01 09:00:02+09 |      |      0 |    100 |     -1 |   -100
 1970-01-01 09:00:03+09 |      |      1 |    200 |     -2 |   -200
 1970-01-01 09:00:04+09 |      |      2 |    200 |     -3 |   -200
 1970-01-01 09:00:05+09 |      |      3 |    200 |     -4 |   -200
(6 rows)

-- select ln (builtin function, explain)
--Testcase 347:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2) FROM s3;
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan  (cost=10.00..2063.36 rows=2048 width=16)
   Output: (ln(value1)), (ln((value2)::double precision))
   InfluxDB query: SELECT ln("value1"), ln("value2") FROM "s3"
(3 rows)

-- select ln (builtin function, result)
--Testcase 348:
SELECT ln(value1), ln(value2) FROM s3;
         ln         |        ln        
--------------------+------------------
  -2.30258509299405 | 4.60517018598809
   -1.6094379124341 | 4.60517018598809
  -1.20397280432594 | 4.60517018598809
 0.0953101798043249 | 5.29831736654804
   0.78845736036427 | 5.29831736654804
   1.19392246847243 | 5.29831736654804
(6 rows)

-- select ln (builtin function, not pushdown constraints, explain)
--Testcase 349:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2) FROM s3 WHERE to_hex(value2) != '64';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2053.28 rows=2038 width=16)
   Output: (ln(value1)), (ln((value2)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT ln("value1"), ln("value2"), "value2" FROM "s3"
(4 rows)

-- select ln (builtin function, not pushdown constraints, result)
--Testcase 350:
SELECT ln(value1), ln(value2) FROM s3 WHERE to_hex(value2) != '64';
         ln         |        ln        
--------------------+------------------
 0.0953101798043249 | 5.29831736654804
   0.78845736036427 | 5.29831736654804
   1.19392246847243 | 5.29831736654804
(3 rows)

-- select ln (builtin function, pushdown constraints, explain)
--Testcase 351:
EXPLAIN VERBOSE
SELECT ln(value1), ln(value2) FROM s3 WHERE value2 != 200;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2053.28 rows=2038 width=16)
   Output: (ln(value1)), (ln((value2)::double precision))
   InfluxDB query: SELECT ln("value1"), ln("value2") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select ln (builtin function, pushdown constraints, result)
--Testcase 352:
SELECT ln(value1), ln(value2) FROM s3 WHERE value2 != 200;
        ln         |        ln        
-------------------+------------------
 -2.30258509299405 | 4.60517018598809
  -1.6094379124341 | 4.60517018598809
 -1.20397280432594 | 4.60517018598809
(3 rows)

-- select ln as nest function with agg (pushdown, explain)
--Testcase 353:
EXPLAIN VERBOSE
SELECT sum(value3),ln(sum(value3)) FROM s3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (ln(sum(value3)))
   InfluxDB query: SELECT sum("value3"), ln(sum("value3")) FROM "s3"
(3 rows)

-- select ln as nest function with agg (pushdown, result)
--Testcase 354:
SELECT sum(value3),ln(sum(value3)) FROM s3;
 sum  | ln 
------+----
 -7.2 |   
(1 row)

-- select ln as nest with log2 (pushdown, explain)
--Testcase 355:
EXPLAIN VERBOSE
SELECT ln(log2(value1)),ln(log2(1/value1)) FROM s3;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (ln(log2(value1))), (ln(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT ln(log2("value1")), ln(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select ln as nest with log2 (pushdown, result)
--Testcase 356:
SELECT ln(log2(value1)),ln(log2(1/value1)) FROM s3;
        ln         |        ln         
-------------------+-------------------
                   |  1.20054536582962
                   | 0.842397915908775
                   |  0.55213967944403
 -1.98410573493163 |                  
 0.128835969640311 |                  
  0.54375699916606 |                  
(6 rows)

-- select ln with non pushdown func and explicit constant (explain)
--Testcase 357:
EXPLAIN VERBOSE
SELECT ln(value3), pi(), 4.1 FROM s3;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (ln(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT ln("value3") FROM "s3"
(3 rows)

-- select ln with non pushdown func and explicit constant (result)
--Testcase 358:
SELECT ln(value3), pi(), 4.1 FROM s3;
 ln |        pi        | ?column? 
----+------------------+----------
    | 3.14159265358979 |      4.1
    | 3.14159265358979 |      4.1
    | 3.14159265358979 |      4.1
    | 3.14159265358979 |      4.1
    | 3.14159265358979 |      4.1
    | 3.14159265358979 |      4.1
(6 rows)

-- select ln with order by (explain)
--Testcase 359:
EXPLAIN VERBOSE
SELECT value1, ln(1-value1) FROM s3 order by ln(1-value1);
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (ln(('1'::double precision - value1)))
   Sort Key: (ln(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (ln(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", ln((1 - "value1")) FROM "s3"
(6 rows)

-- select ln with order by (result)
--Testcase 360:
SELECT value1, ln(1-value1) FROM s3 order by ln(1-value1);
 value1 |         ln         
--------+--------------------
    0.3 | -0.356674943938732
    0.2 |  -0.22314355131421
    0.1 | -0.105360515657826
    1.1 |                   
    2.2 |                   
    3.3 |                   
(6 rows)

-- select ln with order by index (result)
--Testcase 361:
SELECT value1, ln(1-value1) FROM s3 order by 2,1;
 value1 |         ln         
--------+--------------------
    0.3 | -0.356674943938732
    0.2 |  -0.22314355131421
    0.1 | -0.105360515657826
    1.1 |                   
    2.2 |                   
    3.3 |                   
(6 rows)

-- select ln with order by index (result)
--Testcase 362:
SELECT value1, ln(1-value1) FROM s3 order by 1,2;
 value1 |         ln         
--------+--------------------
    0.1 | -0.105360515657826
    0.2 |  -0.22314355131421
    0.3 | -0.356674943938732
    1.1 |                   
    2.2 |                   
    3.3 |                   
(6 rows)

-- select ln and as
--Testcase 363:
SELECT ln(value1) as ln1 FROM s3;
        ln1         
--------------------
  -2.30258509299405
   -1.6094379124341
  -1.20397280432594
 0.0953101798043249
   0.78845736036427
   1.19392246847243
(6 rows)

-- select ln(*) (stub agg function, explain)
--Testcase 804:
EXPLAIN VERBOSE
SELECT ln_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (ln_all())
   InfluxDB query: SELECT ln(*) FROM "s3"
(3 rows)

-- select ln(*) (stub agg function, result)
--Testcase 805:
SELECT ln_all() from s3;
                             ln_all                              
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-2.3025850929940455,4.605170185988092,,)
 (1970-01-01T00:00:01Z,,-1.6094379124341003,4.605170185988092,,)
 (1970-01-01T00:00:02Z,,-1.2039728043259361,4.605170185988092,,)
 (1970-01-01T00:00:03Z,,0.09531017980432493,5.298317366548036,,)
 (1970-01-01T00:00:04Z,,0.7884573603642703,5.298317366548036,,)
 (1970-01-01T00:00:05Z,,1.1939224684724346,5.298317366548036,,)
(6 rows)

-- select ln(*) (stub agg function and group by tag only) (explain)
--Testcase 806:
EXPLAIN VERBOSE
SELECT ln_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (ln_all()), tag1
   InfluxDB query: SELECT ln(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select ln(*) (stub agg function and group by tag only) (result)
--Testcase 807:
SELECT ln_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                             ln_all                              
-----------------------------------------------------------------
 (1970-01-01T00:00:00Z,,-2.3025850929940455,4.605170185988092,,)
 (1970-01-01T00:00:01Z,,-1.6094379124341003,4.605170185988092,,)
 (1970-01-01T00:00:02Z,,-1.2039728043259361,4.605170185988092,,)
 (1970-01-01T00:00:03Z,,0.09531017980432493,5.298317366548036,,)
 (1970-01-01T00:00:04Z,,0.7884573603642703,5.298317366548036,,)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 808:
SELECT ln_all(), floor_all() FROM s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub ln_all() is called
CONTEXT:  PL/pgSQL function ln_all() line 3 at RAISE
-- select pow (builtin function, explain)
--Testcase 364:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3;
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   InfluxDB query: SELECT pow("value1", 2), pow("value2", 2), pow("value3", 2), pow("value4", 2) FROM "s3"
(3 rows)

-- select pow (builtin function, result)
--Testcase 365:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3;
  pow  |  pow  |  pow  |  pow  
-------+-------+-------+-------
  0.01 | 10000 |  0.01 | 10000
  0.04 | 10000 |  0.04 | 10000
  0.09 | 10000 |  0.09 | 10000
  1.21 | 40000 |  1.21 | 40000
  4.84 | 40000 |  4.84 | 40000
 10.89 | 40000 | 10.89 | 40000
(6 rows)

-- select pow (builtin function, not pushdown constraints, explain)
--Testcase 366:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE to_hex(value2) != '64';
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT pow("value1", 2), pow("value2", 2), pow("value3", 2), pow("value4", 2), "value2" FROM "s3"
(4 rows)

-- select pow (builtin function, not pushdown constraints, result)
--Testcase 367:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE to_hex(value2) != '64';
  pow  |  pow  |  pow  |  pow  
-------+-------+-------+-------
  1.21 | 40000 |  1.21 | 40000
  4.84 | 40000 |  4.84 | 40000
 10.89 | 40000 | 10.89 | 40000
(3 rows)

-- select pow (builtin function, pushdown constraints, explain)
--Testcase 368:
EXPLAIN VERBOSE
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE value2 != 200;
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (pow(value1, '2'::double precision)), (pow((value2)::double precision, '2'::double precision)), (pow(value3, '2'::double precision)), (pow((value4)::double precision, '2'::double precision))
   InfluxDB query: SELECT pow("value1", 2), pow("value2", 2), pow("value3", 2), pow("value4", 2) FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select pow (builtin function, pushdown constraints, result)
--Testcase 369:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM s3 WHERE value2 != 200;
 pow  |  pow  | pow  |  pow  
------+-------+------+-------
 0.01 | 10000 | 0.01 | 10000
 0.04 | 10000 | 0.04 | 10000
 0.09 | 10000 | 0.09 | 10000
(3 rows)

-- select pow as nest function with agg (pushdown, explain)
--Testcase 370:
EXPLAIN VERBOSE
SELECT sum(value3),pow(sum(value3), 2) FROM s3;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (pow(sum(value3), '2'::double precision))
   InfluxDB query: SELECT sum("value3"), pow(sum("value3"), 2) FROM "s3"
(3 rows)

-- select pow as nest function with agg (pushdown, result)
--Testcase 371:
SELECT sum(value3),pow(sum(value3), 2) FROM s3;
 sum  |  pow  
------+-------
 -7.2 | 51.84
(1 row)

-- select pow as nest with log2 (pushdown, explain)
--Testcase 372:
EXPLAIN VERBOSE
SELECT pow(log2(value1), 2),pow(log2(1/value1), 2) FROM s3;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (pow(log2(value1), '2'::double precision)), (pow(log2(('1'::double precision / value1)), '2'::double precision))
   InfluxDB query: SELECT pow(log2("value1"), 2), pow(log2((1 / "value1")), 2) FROM "s3"
(3 rows)

-- select pow as nest with log2 (pushdown, result)
--Testcase 373:
SELECT pow(log2(value1), 2),pow(log2(1/value1), 2) FROM s3;
        pow         |        pow         
--------------------+--------------------
    11.035206267602 |    11.035206267602
   5.39135007782725 |   5.39135007782725
   3.01704947531716 |   3.01704947531716
 0.0189072190436489 | 0.0189072190436489
   1.29391426654352 |   1.29391426654352
   2.96688920545725 |   2.96688920545725
(6 rows)

-- select pow with non pushdown func and explicit constant (explain)
--Testcase 374:
EXPLAIN VERBOSE
SELECT pow(value3, 2), pi(), 4.1 FROM s3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (pow(value3, '2'::double precision)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT pow("value3", 2) FROM "s3"
(3 rows)

-- select pow with non pushdown func and explicit constant (result)
--Testcase 375:
SELECT pow(value3, 2), pi(), 4.1 FROM s3;
  pow  |        pi        | ?column? 
-------+------------------+----------
  0.01 | 3.14159265358979 |      4.1
  0.04 | 3.14159265358979 |      4.1
  0.09 | 3.14159265358979 |      4.1
  1.21 | 3.14159265358979 |      4.1
  4.84 | 3.14159265358979 |      4.1
 10.89 | 3.14159265358979 |      4.1
(6 rows)

-- select pow with order by (explain)
--Testcase 376:
EXPLAIN VERBOSE
SELECT value1, pow(1-value1, 2) FROM s3 order by pow(1-value1, 2);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (pow(('1'::double precision - value1), '2'::double precision))
   Sort Key: (pow(('1'::double precision - s3.value1), '2'::double precision))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (pow(('1'::double precision - value1), '2'::double precision))
         InfluxDB query: SELECT "value1", pow((1 - "value1"), 2) FROM "s3"
(6 rows)

-- select pow with order by (result)
--Testcase 377:
SELECT value1, pow(1-value1, 2) FROM s3 order by pow(1-value1, 2);
 value1 | pow  
--------+------
    1.1 | 0.01
    0.3 | 0.49
    0.2 | 0.64
    0.1 | 0.81
    2.2 | 1.44
    3.3 | 5.29
(6 rows)

-- select pow with order by index (result)
--Testcase 378:
SELECT value1, pow(1-value1, 2) FROM s3 order by 2,1;
 value1 | pow  
--------+------
    1.1 | 0.01
    0.3 | 0.49
    0.2 | 0.64
    0.1 | 0.81
    2.2 | 1.44
    3.3 | 5.29
(6 rows)

-- select pow with order by index (result)
--Testcase 379:
SELECT value1, pow(1-value1, 2) FROM s3 order by 1,2;
 value1 | pow  
--------+------
    0.1 | 0.81
    0.2 | 0.64
    0.3 | 0.49
    1.1 | 0.01
    2.2 | 1.44
    3.3 | 5.29
(6 rows)

-- select pow and as
--Testcase 380:
SELECT pow(value3, 2) as pow1 FROM s3;
 pow1  
-------
  0.01
  0.04
  0.09
  1.21
  4.84
 10.89
(6 rows)

-- select pow_all(2) (stub agg function, explain)
--Testcase 809:
EXPLAIN VERBOSE
SELECT pow_all(2) from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (pow_all(2))
   InfluxDB query: SELECT pow(*, 2) FROM "s3"
(3 rows)

-- select pow_all(2) (stub agg function, result)
--Testcase 810:
SELECT pow_all(2) from s3;
                                    pow_all                                    
-------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.010000000000000002,10000,0.010000000000000002,10000)
 (1970-01-01T00:00:01Z,,0.04000000000000001,10000,0.04000000000000001,10000)
 (1970-01-01T00:00:02Z,,0.09,10000,0.09,10000)
 (1970-01-01T00:00:03Z,,1.2100000000000002,40000,1.2100000000000002,40000)
 (1970-01-01T00:00:04Z,,4.840000000000001,40000,4.840000000000001,40000)
 (1970-01-01T00:00:05Z,,10.889999999999999,40000,10.889999999999999,40000)
(6 rows)

-- select pow_all(2) (stub agg function and group by tag only) (explain)
--Testcase 811:
EXPLAIN VERBOSE
SELECT pow_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (pow_all(2)), tag1
   InfluxDB query: SELECT pow(*, 2) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select pow_all(2) (stub agg function and group by tag only) (result)
--Testcase 812:
SELECT pow_all(2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                    pow_all                                    
-------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.010000000000000002,10000,0.010000000000000002,10000)
 (1970-01-01T00:00:01Z,,0.04000000000000001,10000,0.04000000000000001,10000)
 (1970-01-01T00:00:02Z,,0.09,10000,0.09,10000)
 (1970-01-01T00:00:03Z,,1.2100000000000002,40000,1.2100000000000002,40000)
 (1970-01-01T00:00:04Z,,4.840000000000001,40000,4.840000000000001,40000)
(5 rows)

-- select pow_all(2) (stub agg function, expose data, explain)
--Testcase 813:
EXPLAIN VERBOSE
SELECT (pow_all(2)::s3).* from s3;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((pow_all(2)))::s3)."time", (((pow_all(2)))::s3).tag1, (((pow_all(2)))::s3).value1, (((pow_all(2)))::s3).value2, (((pow_all(2)))::s3).value3, (((pow_all(2)))::s3).value4
   InfluxDB query: SELECT pow(*, 2) FROM "s3"
(3 rows)

-- select pow_all(2) (stub agg function, expose data, result)
--Testcase 814:
SELECT (pow_all(2)::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |   0.01 |  10000 |   0.01 |  10000
 1970-01-01 09:00:01+09 |      |   0.04 |  10000 |   0.04 |  10000
 1970-01-01 09:00:02+09 |      |   0.09 |  10000 |   0.09 |  10000
 1970-01-01 09:00:03+09 |      |   1.21 |  40000 |   1.21 |  40000
 1970-01-01 09:00:04+09 |      |   4.84 |  40000 |   4.84 |  40000
 1970-01-01 09:00:05+09 |      |  10.89 |  40000 |  10.89 |  40000
(6 rows)

-- select round (builtin function, explain)
--Testcase 381:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
   InfluxDB query: SELECT round("value1"), round("value2"), round("value3"), round("value4") FROM "s3"
(3 rows)

-- select round (builtin function, result)
--Testcase 382:
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3;
 round | round | round | round 
-------+-------+-------+-------
     0 |   100 |    -0 |  -100
     0 |   100 |    -0 |  -100
     0 |   100 |    -0 |  -100
     1 |   200 |    -1 |  -200
     2 |   200 |    -2 |  -200
     3 |   200 |    -3 |  -200
(6 rows)

-- select round (builtin function, not pushdown constraints, explain)
--Testcase 383:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 WHERE to_hex(value2) != '64';
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT round("value1"), round("value2"), round("value3"), round("value4"), "value2" FROM "s3"
(4 rows)

-- select round (builtin function, not pushdown constraints, result)
--Testcase 384:
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 WHERE to_hex(value2) != '64';
 round | round | round | round 
-------+-------+-------+-------
     1 |   200 |    -1 |  -200
     2 |   200 |    -2 |  -200
     3 |   200 |    -3 |  -200
(3 rows)

-- select round (builtin function, pushdown constraints, explain)
--Testcase 385:
EXPLAIN VERBOSE
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 WHERE value2 != 200;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (round(value1)), (round((value2)::double precision)), (round(value3)), (round((value4)::double precision))
   InfluxDB query: SELECT round("value1"), round("value2"), round("value3"), round("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select round (builtin function, pushdown constraints, result)
--Testcase 386:
SELECT round(value1), round(value2), round(value3), round(value4) FROM s3 WHERE value2 != 200;
 round | round | round | round 
-------+-------+-------+-------
     0 |   100 |    -0 |  -100
     0 |   100 |    -0 |  -100
     0 |   100 |    -0 |  -100
(3 rows)

-- select round as nest function with agg (pushdown, explain)
--Testcase 387:
EXPLAIN VERBOSE
SELECT sum(value3),round(sum(value3)) FROM s3;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (round(sum(value3)))
   InfluxDB query: SELECT sum("value3"), round(sum("value3")) FROM "s3"
(3 rows)

-- select round as nest function with agg (pushdown, result)
--Testcase 388:
SELECT sum(value3),round(sum(value3)) FROM s3;
 sum  | round 
------+-------
 -7.2 |    -7
(1 row)

-- select round as nest with log2 (pushdown, explain)
--Testcase 389:
EXPLAIN VERBOSE
SELECT round(log2(value1)),round(log2(1/value1)) FROM s3;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (round(log2(value1))), (round(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT round(log2("value1")), round(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select round as nest with log2 (pushdown, result)
--Testcase 390:
SELECT round(log2(value1)),round(log2(1/value1)) FROM s3;
 round | round 
-------+-------
    -3 |     3
    -2 |     2
    -2 |     2
     0 |    -0
     1 |    -1
     2 |    -2
(6 rows)

-- select round with non pushdown func and roundlicit constant (explain)
--Testcase 391:
EXPLAIN VERBOSE
SELECT round(value3), pi(), 4.1 FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (round(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT round("value3") FROM "s3"
(3 rows)

-- select round with non pushdown func and roundlicit constant (result)
--Testcase 392:
SELECT round(value3), pi(), 4.1 FROM s3;
 round |        pi        | ?column? 
-------+------------------+----------
    -0 | 3.14159265358979 |      4.1
    -0 | 3.14159265358979 |      4.1
    -0 | 3.14159265358979 |      4.1
    -1 | 3.14159265358979 |      4.1
    -2 | 3.14159265358979 |      4.1
    -3 | 3.14159265358979 |      4.1
(6 rows)

-- select round with order by (explain)
--Testcase 393:
EXPLAIN VERBOSE
SELECT value1, round(1-value1) FROM s3 order by round(1-value1);
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (round(('1'::double precision - value1)))
   Sort Key: (round(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (round(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", round((1 - "value1")) FROM "s3"
(6 rows)

-- select round with order by (result)
--Testcase 394:
SELECT value1, round(1-value1) FROM s3 order by round(1-value1);
 value1 | round 
--------+-------
    3.3 |    -2
    2.2 |    -1
    1.1 |    -0
    0.1 |     1
    0.2 |     1
    0.3 |     1
(6 rows)

-- select round with order by index (result)
--Testcase 395:
SELECT value1, round(1-value1) FROM s3 order by 2,1;
 value1 | round 
--------+-------
    3.3 |    -2
    2.2 |    -1
    1.1 |    -0
    0.1 |     1
    0.2 |     1
    0.3 |     1
(6 rows)

-- select round with order by index (result)
--Testcase 396:
SELECT value1, round(1-value1) FROM s3 order by 1,2;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |    -0
    2.2 |    -1
    3.3 |    -2
(6 rows)

-- select round and as
--Testcase 397:
SELECT round(value3) as round1 FROM s3;
 round1 
--------
     -0
     -0
     -0
     -1
     -2
     -3
(6 rows)

-- select round(*) (stub agg function, explain)
--Testcase 815:
EXPLAIN VERBOSE
SELECT round_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (round_all())
   InfluxDB query: SELECT round(*) FROM "s3"
(3 rows)

-- select round(*) (stub agg function, result)
--Testcase 816:
SELECT round_all() from s3;
               round_all               
---------------------------------------
 (1970-01-01T00:00:00Z,,0,100,-0,-100)
 (1970-01-01T00:00:01Z,,0,100,-0,-100)
 (1970-01-01T00:00:02Z,,0,100,-0,-100)
 (1970-01-01T00:00:03Z,,1,200,-1,-200)
 (1970-01-01T00:00:04Z,,2,200,-2,-200)
 (1970-01-01T00:00:05Z,,3,200,-3,-200)
(6 rows)

-- select round(*) (stub agg function and group by tag only) (explain)
--Testcase 817:
EXPLAIN VERBOSE
SELECT round_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (round_all()), tag1
   InfluxDB query: SELECT round(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select round(*) (stub agg function and group by tag only) (result)
--Testcase 818:
SELECT round_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
               round_all               
---------------------------------------
 (1970-01-01T00:00:00Z,,0,100,-0,-100)
 (1970-01-01T00:00:01Z,,0,100,-0,-100)
 (1970-01-01T00:00:02Z,,0,100,-0,-100)
 (1970-01-01T00:00:03Z,,1,200,-1,-200)
 (1970-01-01T00:00:04Z,,2,200,-2,-200)
(5 rows)

-- select round(*) (stub agg function, expose data, explain)
--Testcase 819:
EXPLAIN VERBOSE
SELECT (round_all()::s3).* from s3;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..8634.89 rows=3413 width=72)
   Output: (((round_all()))::s3)."time", (((round_all()))::s3).tag1, (((round_all()))::s3).value1, (((round_all()))::s3).value2, (((round_all()))::s3).value3, (((round_all()))::s3).value4
   InfluxDB query: SELECT round(*) FROM "s3"
(3 rows)

-- select round(*) (stub agg function, expose data, result)
--Testcase 820:
SELECT (round_all()::s3).* from s3;
          time          | tag1 | value1 | value2 | value3 | value4 
------------------------+------+--------+--------+--------+--------
 1970-01-01 09:00:00+09 |      |      0 |    100 |     -0 |   -100
 1970-01-01 09:00:01+09 |      |      0 |    100 |     -0 |   -100
 1970-01-01 09:00:02+09 |      |      0 |    100 |     -0 |   -100
 1970-01-01 09:00:03+09 |      |      1 |    200 |     -1 |   -200
 1970-01-01 09:00:04+09 |      |      2 |    200 |     -2 |   -200
 1970-01-01 09:00:05+09 |      |      3 |    200 |     -3 |   -200
(6 rows)

-- select sin (builtin function, explain)
--Testcase 398:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
   InfluxDB query: SELECT sin("value1"), sin("value2"), sin("value3"), sin("value4") FROM "s3"
(3 rows)

-- select sin (builtin function, result)
--Testcase 399:
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3;
        sin         |        sin         |         sin         |        sin        
--------------------+--------------------+---------------------+-------------------
 0.0998334166468282 | -0.506365641109759 | -0.0998334166468282 | 0.506365641109759
  0.198669330795061 | -0.506365641109759 |  -0.198669330795061 | 0.506365641109759
   0.29552020666134 | -0.506365641109759 |   -0.29552020666134 | 0.506365641109759
  0.891207360061435 | -0.873297297213995 |  -0.891207360061435 | 0.873297297213995
   0.80849640381959 | -0.873297297213995 |   -0.80849640381959 | 0.873297297213995
 -0.157745694143248 | -0.873297297213995 |   0.157745694143248 | 0.873297297213995
(6 rows)

-- select sin (builtin function, not pushdown constraints, explain)
--Testcase 400:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 WHERE to_hex(value2) != '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT sin("value1"), sin("value2"), sin("value3"), sin("value4"), "value2" FROM "s3"
(4 rows)

-- select sin (builtin function, not pushdown constraints, result)
--Testcase 401:
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 WHERE to_hex(value2) != '64';
        sin         |        sin         |        sin         |        sin        
--------------------+--------------------+--------------------+-------------------
  0.891207360061435 | -0.873297297213995 | -0.891207360061435 | 0.873297297213995
   0.80849640381959 | -0.873297297213995 |  -0.80849640381959 | 0.873297297213995
 -0.157745694143248 | -0.873297297213995 |  0.157745694143248 | 0.873297297213995
(3 rows)

-- select sin (builtin function, pushdown constraints, explain)
--Testcase 402:
EXPLAIN VERBOSE
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 WHERE value2 != 200;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (sin(value1)), (sin((value2)::double precision)), (sin(value3)), (sin((value4)::double precision))
   InfluxDB query: SELECT sin("value1"), sin("value2"), sin("value3"), sin("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select sin (builtin function, pushdown constraints, result)
--Testcase 403:
SELECT sin(value1), sin(value2), sin(value3), sin(value4) FROM s3 WHERE value2 != 200;
        sin         |        sin         |         sin         |        sin        
--------------------+--------------------+---------------------+-------------------
 0.0998334166468282 | -0.506365641109759 | -0.0998334166468282 | 0.506365641109759
  0.198669330795061 | -0.506365641109759 |  -0.198669330795061 | 0.506365641109759
   0.29552020666134 | -0.506365641109759 |   -0.29552020666134 | 0.506365641109759
(3 rows)

-- select sin as nest function with agg (pushdown, explain)
--Testcase 404:
EXPLAIN VERBOSE
SELECT sum(value3),sin(sum(value3)) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (sin(sum(value3)))
   InfluxDB query: SELECT sum("value3"), sin(sum("value3")) FROM "s3"
(3 rows)

-- select sin as nest function with agg (pushdown, result)
--Testcase 405:
SELECT sum(value3),sin(sum(value3)) FROM s3;
 sum  |        sin         
------+--------------------
 -7.2 | -0.793667863849153
(1 row)

-- select sin as nest with log2 (pushdown, explain)
--Testcase 406:
EXPLAIN VERBOSE
SELECT sin(log2(value1)),sin(log2(1/value1)) FROM s3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (sin(log2(value1))), (sin(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT sin(log2("value1")), sin(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select sin as nest with log2 (pushdown, result)
--Testcase 407:
SELECT sin(log2(value1)),sin(log2(1/value1)) FROM s3;
        sin         |        sin         
--------------------+--------------------
  0.179359585152268 | -0.179359585152268
 -0.730916943429606 |  0.730916943429606
 -0.986225626190124 |  0.986225626190124
  0.137070631651469 | -0.137070631651469
  0.907588150958134 | -0.907588150958134
  0.988520183257111 | -0.988520183257111
(6 rows)

-- select sin with non pushdown func and explicit constant (explain)
--Testcase 408:
EXPLAIN VERBOSE
SELECT sin(value3), pi(), 4.1 FROM s3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (sin(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT sin("value3") FROM "s3"
(3 rows)

-- select sin with non pushdown func and explicit constant (result)
--Testcase 409:
SELECT sin(value3), pi(), 4.1 FROM s3;
         sin         |        pi        | ?column? 
---------------------+------------------+----------
 -0.0998334166468282 | 3.14159265358979 |      4.1
  -0.198669330795061 | 3.14159265358979 |      4.1
   -0.29552020666134 | 3.14159265358979 |      4.1
  -0.891207360061435 | 3.14159265358979 |      4.1
   -0.80849640381959 | 3.14159265358979 |      4.1
   0.157745694143248 | 3.14159265358979 |      4.1
(6 rows)

-- select sin with order by (explain)
--Testcase 410:
EXPLAIN VERBOSE
SELECT value1, sin(1-value1) FROM s3 order by sin(1-value1);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (sin(('1'::double precision - value1)))
   Sort Key: (sin(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (sin(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", sin((1 - "value1")) FROM "s3"
(6 rows)

-- select sin with order by (result)
--Testcase 411:
SELECT value1, sin(1-value1) FROM s3 order by sin(1-value1);
 value1 |         sin         
--------+---------------------
    2.2 |  -0.932039085967226
    3.3 |   -0.74570521217672
    1.1 | -0.0998334166468282
    0.3 |   0.644217687237691
    0.2 |   0.717356090899523
    0.1 |   0.783326909627483
(6 rows)

-- select sin with order by index (result)
--Testcase 412:
SELECT value1, sin(1-value1) FROM s3 order by 2,1;
 value1 |         sin         
--------+---------------------
    2.2 |  -0.932039085967226
    3.3 |   -0.74570521217672
    1.1 | -0.0998334166468282
    0.3 |   0.644217687237691
    0.2 |   0.717356090899523
    0.1 |   0.783326909627483
(6 rows)

-- select sin with order by index (result)
--Testcase 413:
SELECT value1, sin(1-value1) FROM s3 order by 1,2;
 value1 |         sin         
--------+---------------------
    0.1 |   0.783326909627483
    0.2 |   0.717356090899523
    0.3 |   0.644217687237691
    1.1 | -0.0998334166468282
    2.2 |  -0.932039085967226
    3.3 |   -0.74570521217672
(6 rows)

-- select sin and as
--Testcase 414:
SELECT sin(value3) as sin1 FROM s3;
        sin1         
---------------------
 -0.0998334166468282
  -0.198669330795061
   -0.29552020666134
  -0.891207360061435
   -0.80849640381959
   0.157745694143248
(6 rows)

-- select sin(*) (stub agg function, explain)
--Testcase 821:
EXPLAIN VERBOSE
SELECT sin_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (sin_all())
   InfluxDB query: SELECT sin(*) FROM "s3"
(3 rows)

-- select sin(*) (stub agg function, result)
--Testcase 822:
SELECT sin_all() from s3;
                                                 sin_all                                                 
---------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09983341664682815,-0.5063656411097588,-0.09983341664682815,0.5063656411097588)
 (1970-01-01T00:00:01Z,,0.19866933079506122,-0.5063656411097588,-0.19866933079506122,0.5063656411097588)
 (1970-01-01T00:00:02Z,,0.29552020666133955,-0.5063656411097588,-0.29552020666133955,0.5063656411097588)
 (1970-01-01T00:00:03Z,,0.8912073600614354,-0.8732972972139945,-0.8912073600614354,0.8732972972139945)
 (1970-01-01T00:00:04Z,,0.8084964038195901,-0.8732972972139945,-0.8084964038195901,0.8732972972139945)
 (1970-01-01T00:00:05Z,,-0.1577456941432482,-0.8732972972139945,0.1577456941432482,0.8732972972139945)
(6 rows)

-- select sin(*) (stub agg function and group by tag only) (explain)
--Testcase 823:
EXPLAIN VERBOSE
SELECT sin_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (sin_all()), tag1
   InfluxDB query: SELECT sin(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select sin(*) (stub agg function and group by tag only) (result)
--Testcase 824:
SELECT sin_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                 sin_all                                                 
---------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.09983341664682815,-0.5063656411097588,-0.09983341664682815,0.5063656411097588)
 (1970-01-01T00:00:01Z,,0.19866933079506122,-0.5063656411097588,-0.19866933079506122,0.5063656411097588)
 (1970-01-01T00:00:02Z,,0.29552020666133955,-0.5063656411097588,-0.29552020666133955,0.5063656411097588)
 (1970-01-01T00:00:03Z,,0.8912073600614354,-0.8732972972139945,-0.8912073600614354,0.8732972972139945)
 (1970-01-01T00:00:04Z,,0.8084964038195901,-0.8732972972139945,-0.8084964038195901,0.8732972972139945)
(5 rows)

-- select tan (builtin function, explain)
--Testcase 825:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1483.93 rows=1462 width=32)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
   InfluxDB query: SELECT tan("value1"), tan("value2"), tan("value3"), tan("value4") FROM "s3"
(3 rows)

-- select tan (builtin function, result)
--Testcase 826:
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3;
        tan        |        tan         |        tan         |        tan        
-------------------+--------------------+--------------------+-------------------
 0.100334672085451 | -0.587213915156929 | -0.100334672085451 | 0.587213915156929
 0.202710035508673 | -0.587213915156929 | -0.202710035508673 | 0.587213915156929
 0.309336249609623 | -0.587213915156929 | -0.309336249609623 | 0.587213915156929
  1.96475965724865 |  -1.79252748379038 |  -1.96475965724865 |  1.79252748379038
 -1.37382305676879 |  -1.79252748379038 |   1.37382305676879 |  1.79252748379038
 0.159745747660032 |  -1.79252748379038 | -0.159745747660032 |  1.79252748379038
(6 rows)

-- select tan (builtin function, not pushdown constraints, explain)
--Testcase 827:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 WHERE to_hex(value2) != '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
   Filter: (to_hex(s3.value2) <> '64'::text)
   InfluxDB query: SELECT tan("value1"), tan("value2"), tan("value3"), tan("value4"), "value2" FROM "s3"
(4 rows)

-- select tan (builtin function, not pushdown constraints, result)
--Testcase 828:
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 WHERE to_hex(value2) != '64';
        tan        |        tan        |        tan         |       tan        
-------------------+-------------------+--------------------+------------------
  1.96475965724865 | -1.79252748379038 |  -1.96475965724865 | 1.79252748379038
 -1.37382305676879 | -1.79252748379038 |   1.37382305676879 | 1.79252748379038
 0.159745747660032 | -1.79252748379038 | -0.159745747660032 | 1.79252748379038
(3 rows)

-- select tan (builtin function, pushdown constraints, explain)
--Testcase 829:
EXPLAIN VERBOSE
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 WHERE value2 != 200;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..1476.83 rows=1455 width=32)
   Output: (tan(value1)), (tan((value2)::double precision)), (tan(value3)), (tan((value4)::double precision))
   InfluxDB query: SELECT tan("value1"), tan("value2"), tan("value3"), tan("value4") FROM "s3" WHERE (("value2" <> 200))
(3 rows)

-- select tan (builtin function, pushdown constraints, result)
--Testcase 830:
SELECT tan(value1), tan(value2), tan(value3), tan(value4) FROM s3 WHERE value2 != 200;
        tan        |        tan         |        tan         |        tan        
-------------------+--------------------+--------------------+-------------------
 0.100334672085451 | -0.587213915156929 | -0.100334672085451 | 0.587213915156929
 0.202710035508673 | -0.587213915156929 | -0.202710035508673 | 0.587213915156929
 0.309336249609623 | -0.587213915156929 | -0.309336249609623 | 0.587213915156929
(3 rows)

-- select tan as nest function with agg (pushdown, explain)
--Testcase 831:
EXPLAIN VERBOSE
SELECT sum(value3),tan(sum(value3)) FROM s3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(value3)), (tan(sum(value3)))
   InfluxDB query: SELECT sum("value3"), tan(sum("value3")) FROM "s3"
(3 rows)

-- select tan as nest function with agg (pushdown, result)
--Testcase 832:
SELECT sum(value3),tan(sum(value3)) FROM s3;
 sum  |        tan        
------+-------------------
 -7.2 | -1.30462094005564
(1 row)

-- select tan as nest with log2 (pushdown, explain)
--Testcase 833:
EXPLAIN VERBOSE
SELECT tan(log2(value1)),tan(log2(1/value1)) FROM s3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan  (cost=10.00..3859.20 rows=2560 width=16)
   Output: (tan(log2(value1))), (tan(log2(('1'::double precision / value1))))
   InfluxDB query: SELECT tan(log2("value1")), tan(log2((1 / "value1"))) FROM "s3"
(3 rows)

-- select tan as nest with log2 (pushdown, result)
--Testcase 834:
SELECT tan(log2(value1)),tan(log2(1/value1)) FROM s3;
        tan         |        tan         
--------------------+--------------------
 -0.182316098942755 |  0.182316098942755
   1.07099326240692 |  -1.07099326240692
   5.96246798734261 |  -5.96246798734261
  0.138376731397261 | -0.138376731397261
   2.16163657107617 |  -2.16163657107617
  -6.54264056025779 |   6.54264056025779
(6 rows)

-- select tan with non pushdown func and tanlicit constant (explain)
--Testcase 835:
EXPLAIN VERBOSE
SELECT tan(value3), pi(), 4.1 FROM s3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=10.00..2566.40 rows=2560 width=48)
   Output: (tan(value3)), '3.14159265358979'::double precision, 4.1
   InfluxDB query: SELECT tan("value3") FROM "s3"
(3 rows)

-- select tan with non pushdown func and tanlicit constant (result)
--Testcase 836:
SELECT tan(value3), pi(), 4.1 FROM s3;
        tan         |        pi        | ?column? 
--------------------+------------------+----------
 -0.100334672085451 | 3.14159265358979 |      4.1
 -0.202710035508673 | 3.14159265358979 |      4.1
 -0.309336249609623 | 3.14159265358979 |      4.1
  -1.96475965724865 | 3.14159265358979 |      4.1
   1.37382305676879 | 3.14159265358979 |      4.1
 -0.159745747660032 | 3.14159265358979 |      4.1
(6 rows)

-- select tan with order by (explain)
--Testcase 837:
EXPLAIN VERBOSE
SELECT value1, tan(1-value1) FROM s3 order by tan(1-value1);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=2717.72..2724.12 rows=2560 width=16)
   Output: value1, (tan(('1'::double precision - value1)))
   Sort Key: (tan(('1'::double precision - s3.value1)))
   ->  Foreign Scan  (cost=10.00..2572.80 rows=2560 width=16)
         Output: value1, (tan(('1'::double precision - value1)))
         InfluxDB query: SELECT "value1", tan((1 - "value1")) FROM "s3"
(6 rows)

-- select tan with order by (result)
--Testcase 838:
SELECT value1, tan(1-value1) FROM s3 order by tan(1-value1);
 value1 |        tan         
--------+--------------------
    2.2 |  -2.57215162212632
    1.1 | -0.100334672085451
    0.3 |  0.842288380463079
    0.2 |   1.02963855705036
    3.3 |   1.11921364173413
    0.1 |   1.26015821755034
(6 rows)

-- select tan with order by index (result)
--Testcase 839:
SELECT value1, tan(1-value1) FROM s3 order by 2,1;
 value1 |        tan         
--------+--------------------
    2.2 |  -2.57215162212632
    1.1 | -0.100334672085451
    0.3 |  0.842288380463079
    0.2 |   1.02963855705036
    3.3 |   1.11921364173413
    0.1 |   1.26015821755034
(6 rows)

-- select tan with order by index (result)
--Testcase 840:
SELECT value1, tan(1-value1) FROM s3 order by 1,2;
 value1 |        tan         
--------+--------------------
    0.1 |   1.26015821755034
    0.2 |   1.02963855705036
    0.3 |  0.842288380463079
    1.1 | -0.100334672085451
    2.2 |  -2.57215162212632
    3.3 |   1.11921364173413
(6 rows)

-- select tan and as
--Testcase 841:
SELECT tan(value3) as tan1 FROM s3;
        tan1        
--------------------
 -0.100334672085451
 -0.202710035508673
 -0.309336249609623
  -1.96475965724865
   1.37382305676879
 -0.159745747660032
(6 rows)

-- select tan(*) (stub agg function, explain)
--Testcase 842:
EXPLAIN VERBOSE
SELECT tan_all() from s3;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=10.00..4266.25 rows=3413 width=32)
   Output: (tan_all())
   InfluxDB query: SELECT tan(*) FROM "s3"
(3 rows)

-- select tan(*) (stub agg function, result)
--Testcase 843:
SELECT tan_all() from s3;
                                                 tan_all                                                 
---------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.10033467208545055,-0.587213915156929,-0.10033467208545055,0.587213915156929)
 (1970-01-01T00:00:01Z,,0.2027100355086725,-0.587213915156929,-0.2027100355086725,0.587213915156929)
 (1970-01-01T00:00:02Z,,0.30933624960962325,-0.587213915156929,-0.30933624960962325,0.587213915156929)
 (1970-01-01T00:00:03Z,,1.9647596572486523,-1.7925274837903817,-1.9647596572486523,1.7925274837903817)
 (1970-01-01T00:00:04Z,,-1.3738230567687948,-1.7925274837903817,1.3738230567687948,1.7925274837903817)
 (1970-01-01T00:00:05Z,,0.15974574766003222,-1.7925274837903817,-0.15974574766003222,1.7925274837903817)
(6 rows)

-- select tan(*) (stub agg function and group by tag only) (explain)
--Testcase 844:
EXPLAIN VERBOSE
SELECT tan_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (tan_all()), tag1
   InfluxDB query: SELECT tan(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select tan(*) (stub agg function and group by tag only) (result)
--Testcase 845:
SELECT tan_all() FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                tan_all                                                
-------------------------------------------------------------------------------------------------------
 (1970-01-01T00:00:00Z,,0.10033467208545055,-0.587213915156929,-0.10033467208545055,0.587213915156929)
 (1970-01-01T00:00:01Z,,0.2027100355086725,-0.587213915156929,-0.2027100355086725,0.587213915156929)
 (1970-01-01T00:00:02Z,,0.30933624960962325,-0.587213915156929,-0.30933624960962325,0.587213915156929)
 (1970-01-01T00:00:03Z,,1.9647596572486523,-1.7925274837903817,-1.9647596572486523,1.7925274837903817)
 (1970-01-01T00:00:04Z,,-1.3738230567687948,-1.7925274837903817,1.3738230567687948,1.7925274837903817)
(5 rows)

-- select multiple star functions (do not push down, raise warning and stub error) (result)
--Testcase 846:
SELECT sin_all(), round_all(), tan_all() FROM s3;
WARNING:  Selecting multiple functions with regular expression or star. The query are not pushed down.
ERROR:  stub sin_all() is called
CONTEXT:  PL/pgSQL function sin_all() line 3 at RAISE
-- select predictors function holt_winters() (explain)
--Testcase 415:
EXPLAIN VERBOSE
SELECT holt_winters(min(value1), 5, 1) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s');
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (holt_winters(min(value1), 5, 1)), (influx_time("time", '@ 1 sec'::interval))
   InfluxDB query: SELECT holt_winters(min("value1"), 5, 1) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u))
(3 rows)

-- select predictors function holt_winters() (result)
--Testcase 416:
SELECT holt_winters(min(value1), 5, 1) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s');
   holt_winters   
------------------
 5.18746006560853
 13.2933307845701
 37.5847742625017
 116.557520596579
 392.431171307496
(5 rows)

-- select predictors function holt_winters_with_fit() (explain)
--Testcase 417:
EXPLAIN VERBOSE
SELECT holt_winters_with_fit(min(value1), 5, 1) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s');
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (holt_winters_with_fit(min(value1), 5, 1)), (influx_time("time", '@ 1 sec'::interval))
   InfluxDB query: SELECT holt_winters_with_fit(min("value1"), 5, 1) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u))
(3 rows)

-- select predictors function holt_winters_with_fit() (result)
--Testcase 418:
SELECT holt_winters_with_fit(min(value1), 5, 1) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s');
 holt_winters_with_fit 
-----------------------
                   0.1
     0.146569361982582
     0.449297189927864
      1.00876071385362
      2.21894136309638
      5.18746006560853
      13.2933307845701
      37.5847742625017
      116.557520596579
      392.431171307496
(10 rows)

-- select count(*) function of InfluxDB (stub agg function, explain)
--Testcase 847:
EXPLAIN VERBOSE
SELECT influx_count_all(*) FROM s3;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (influx_count_all(*))
   InfluxDB query: SELECT count(*) FROM "s3"
(3 rows)

-- select count(*) function of InfluxDB (stub agg function, result)
--Testcase 848:
SELECT influx_count_all(*) FROM s3;
        influx_count_all         
---------------------------------
 (1970-01-01T00:00:00Z,,6,6,6,6)
(1 row)

-- select count(*) function of InfluxDB (stub agg function and group by influx_time() and tag) (explain)
--Testcase 849:
EXPLAIN VERBOSE
SELECT influx_count_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (influx_count_all(*)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT count(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select count(*) function of InfluxDB (stub agg function and group by influx_time() and tag) (result)
--Testcase 850:
SELECT influx_count_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
        influx_count_all         
---------------------------------
 (1970-01-01T00:00:00Z,,1,1,1,1)
 (1970-01-01T00:00:01Z,,1,1,1,1)
 (1970-01-01T00:00:02Z,,1,1,1,1)
 (1970-01-01T00:00:03Z,,0,0,0,0)
 (1970-01-01T00:00:04Z,,0,0,0,0)
 (1970-01-01T00:00:00Z,,0,0,0,0)
 (1970-01-01T00:00:01Z,,0,0,0,0)
 (1970-01-01T00:00:02Z,,0,0,0,0)
 (1970-01-01T00:00:03Z,,1,1,1,1)
 (1970-01-01T00:00:04Z,,1,1,1,1)
(10 rows)

-- select count(*) function of InfluxDB (stub agg function and group by tag only) (explain)
--Testcase 851:
EXPLAIN VERBOSE
SELECT influx_count_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=64)
   Output: (influx_count_all(*)), tag1
   InfluxDB query: SELECT count(*) FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select count(*) function of InfluxDB (stub agg function and group by tag only) (result)
--Testcase 852:
SELECT influx_count_all(*) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
        influx_count_all         
---------------------------------
 (1970-01-01T00:00:00Z,,3,3,3,3)
 (1970-01-01T00:00:00Z,,2,2,2,2)
(2 rows)

-- select count(*) function of InfluxDB over join query (explain)
--Testcase 854:
EXPLAIN VERBOSE
SELECT influx_count_all(*) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=70.39..70.41 rows=1 width=32)
   Output: influx_count_all(*)
   ->  Nested Loop  (cost=20.00..28.14 rows=169 width=0)
         ->  Foreign Scan on public.s3 t1  (cost=10.00..13.00 rows=13 width=8)
               Output: t1."time", t1.tag1, t1.value1, t1.value2, t1.value3, t1.value4
               InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
         ->  Materialize  (cost=10.00..13.06 rows=13 width=8)
               Output: t2.value1
               ->  Foreign Scan on public.s3 t2  (cost=10.00..13.00 rows=13 width=8)
                     Output: t2.value1
                     InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
(11 rows)

-- select count(*) function of InfluxDB over join query (result, stub call error)
--Testcase 855:
SELECT influx_count_all(*) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
ERROR:  stub influx_count_all_sfunc(text) is called
CONTEXT:  PL/pgSQL function influx_count_all_sfunc(text) line 3 at RAISE
-- select distinct (stub agg function, explain)
--Testcase 858:
EXPLAIN VERBOSE
SELECT influx_distinct(value1) FROM s3;
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (influx_distinct(value1))
   InfluxDB query: SELECT distinct("value1") FROM "s3"
(3 rows)

-- select distinct (stub agg function, result)
--Testcase 859:
SELECT influx_distinct(value1) FROM s3;
 influx_distinct 
-----------------
             0.1
             0.2
             0.3
             1.1
             2.2
             3.3
(6 rows)

-- select distinct (stub agg function and group by influx_time() and tag) (explain)
--Testcase 860:
EXPLAIN VERBOSE
SELECT influx_distinct(value1), influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=48)
   Output: (influx_distinct(value1)), (influx_time("time", '@ 1 sec'::interval)), tag1
   InfluxDB query: SELECT distinct("value1") FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY (time(0d0h0m1s0u)), "tag1"
(3 rows)

-- select distinct (stub agg function and group by influx_time() and tag) (result)
--Testcase 861:
SELECT influx_distinct(value1), influx_time(time, interval '1s'),tag1 FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY influx_time(time, interval '1s'), tag1;
 influx_distinct |      influx_time       | tag1 
-----------------+------------------------+------
             0.1 | 1970-01-01 09:00:00+09 | a
             0.2 | 1970-01-01 09:00:01+09 | a
             0.3 | 1970-01-01 09:00:02+09 | a
             1.1 | 1970-01-01 09:00:03+09 | b
             2.2 | 1970-01-01 09:00:04+09 | b
(5 rows)

-- select distinct (stub agg function and group by tag only) (explain)
--Testcase 862:
EXPLAIN VERBOSE
SELECT influx_distinct(value2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=40)
   Output: (influx_distinct(value2)), tag1
   InfluxDB query: SELECT distinct("value2") FROM "s3" WHERE ((time >= '1970-01-01 00:00:00')) AND ((time <= '1970-01-01 00:00:04')) GROUP BY "tag1"
(3 rows)

-- select distinct (stub agg function and group by tag only) (result)
--Testcase 863:
SELECT influx_distinct(value2) FROM s3 WHERE time >= to_timestamp(0) and time <= to_timestamp(4) GROUP BY tag1;
 influx_distinct 
-----------------
             100
             200
(2 rows)

-- select distinct over join query (explain)
--Testcase 865:
EXPLAIN VERBOSE
SELECT influx_distinct(t1.value2) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=57.15..57.16 rows=1 width=8)
   Output: influx_distinct(t1.value2)
   ->  Nested Loop  (cost=20.00..24.65 rows=130 width=8)
         Output: t1.value2
         ->  Foreign Scan on public.s3 t2  (cost=10.00..13.00 rows=13 width=8)
               Output: t2."time", t2.tag1, t2.value1, t2.value2, t2.value3, t2.value4
               InfluxDB query: SELECT "value1" FROM "s3" WHERE (("value1" = 0.100000000000000006))
         ->  Materialize  (cost=10.00..10.05 rows=10 width=16)
               Output: t1.value2, t1.value1
               ->  Foreign Scan on public.s3 t1  (cost=10.00..10.00 rows=10 width=16)
                     Output: t1.value2, t1.value1
                     InfluxDB query: SELECT "value1", "value2" FROM "s3" WHERE (("value1" = 0.100000000000000006))
(12 rows)

-- select distinct over join query (result, stub call error)
--Testcase 866:
SELECT influx_distinct(t1.value2) FROM s3 t1 INNER JOIN s3 t2 ON (t1.value1 = t2.value1) where t1.value1 = 0.1;
ERROR:  stub influx_distinct_sfunc(anyelement, anyelement) is called
CONTEXT:  PL/pgSQL function influx_distinct_sfunc(anyelement,anyelement) line 3 at RAISE
-- select distinct with having (explain)
--Testcase 867:
EXPLAIN VERBOSE
SELECT influx_distinct(value2) FROM s3 HAVING influx_distinct(value2) > 100;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=3840.00..3840.01 rows=1 width=8)
   Output: influx_distinct(value2)
   Filter: (influx_distinct(s3.value2) > 100)
   ->  Foreign Scan on public.s3  (cost=10.00..2560.00 rows=2560 width=8)
         Output: "time", tag1, value1, value2, value3, value4
         InfluxDB query: SELECT "value2" FROM "s3"
(6 rows)

-- select distinct with having (result, not pushdown, stub call error)
--Testcase 868:
SELECT influx_distinct(value2) FROM s3 HAVING influx_distinct(value2) > 100;
ERROR:  stub influx_distinct_sfunc(anyelement, anyelement) is called
CONTEXT:  PL/pgSQL function influx_distinct_sfunc(anyelement,anyelement) line 3 at RAISE
--Testcase 62:
DROP FOREIGN TABLE s3;
--Testcase 68:
CREATE FOREIGN TABLE b3(time timestamp with time zone, tag1 text, value1 float8, value2 bigint, value3 bool) SERVER server1 OPTIONS(table 'b3', tags 'tag1');
-- bool type var in where clause (result)
--Testcase 69:
EXPLAIN VERBOSE
SELECT sqrt(abs(value1)) FROM b3 WHERE value3 != true ORDER BY 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=1352.46..1355.66 rows=1280 width=8)
   Output: (sqrt(abs(value1)))
   Sort Key: (sqrt(abs(b3.value1)))
   ->  Foreign Scan  (cost=10.00..1286.40 rows=1280 width=8)
         Output: (sqrt(abs(value1)))
         Filter: (NOT b3.value3)
         InfluxDB query: SELECT sqrt(abs("value1")), "value3" FROM "b3"
(7 rows)

-- bool type var in where clause (result)
--Testcase 70:
SELECT sqrt(abs(value1)) FROM b3 WHERE value3 != true ORDER BY 1;
       sqrt        
-------------------
 0.447213595499958
  1.04880884817015
  1.81659021245849
(3 rows)

--Testcase 71:
DROP FOREIGN TABLE b3;
--Testcase 63:
DROP USER MAPPING FOR CURRENT_USER SERVER server1;
--Testcase 64:
DROP SERVER server1;
--Testcase 65:
DROP EXTENSION influxdb_fdw CASCADE;
