--SET log_min_messages=debug1;
--SET client_min_messages=debug1;
--Testcase 1:
SET datestyle=ISO;
-- timestamp with time zone differs based on this
--Testcase 2:
SET timezone='Japan';
\set ECHO none
--Testcase 3:
CREATE EXTENSION influxdb_fdw;
--Testcase 4:
CREATE SERVER server1 FOREIGN DATA WRAPPER influxdb_fdw OPTIONS
(dbname 'mydb', :SERVER);
--Testcase 5:
CREATE USER MAPPING FOR CURRENT_USER SERVER server1 OPTIONS (:AUTHENTICATION);
-- import time column as timestamp and text type
IMPORT FOREIGN SCHEMA public FROM SERVER server1 INTO public OPTIONS(import_time_text 'true', schemaless 'true');
--Testcase 6:
SELECT * FROM cpu;
          time          |      time_text       |                 tags                 |                                fields                                 
------------------------+----------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | 2015-08-18T00:48:08Z | {"tag1": null, "tag2": "tag2_A"}     | {"value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

--Testcase 7:
SELECT tags->>'tag1' tag1, (fields->>'value1')::bigint value1 FROM cpu;
  tag1  | value1 
--------+--------
 tag1_A |    100
 tag1_B |    100
(2 rows)

--Testcase 8:
SELECT (fields->>'value1')::bigint value1, time, (fields->>'value2')::double precision value2 FROM cpu;
 value1 |          time          | value2 
--------+------------------------+--------
    100 | 2015-08-18 09:00:00+09 |    0.5
    100 | 2015-08-18 09:00:00+09 |      2
        | 2015-08-18 09:48:08+09 |      2
(3 rows)

--Testcase 9:
SELECT (fields->>'value1')::bigint value1, time_text, (fields->>'value2')::double precision value2 FROM cpu;
 value1 |      time_text       | value2 
--------+----------------------+--------
    100 | 2015-08-18T00:00:00Z |    0.5
    100 | 2015-08-18T00:00:00Z |      2
        | 2015-08-18T00:48:08Z |      2
(3 rows)

--Testcase 10:
DROP FOREIGN TABLE cpu;
--Testcase 11:
DROP FOREIGN TABLE t3;
--Testcase 12:
DROP FOREIGN TABLE t4;
--Testcase 13:
DROP FOREIGN TABLE tx;
--Testcase 14:
DROP FOREIGN TABLE numbers;
-- test EXECPT
IMPORT FOREIGN SCHEMA public EXCEPT (cpu, t3, t4, tx, numbers) FROM SERVER server1 INTO public OPTIONS(schemaless 'true');
--Testcase 15:
SELECT ftoptions FROM pg_foreign_table;
 ftoptions 
-----------
(0 rows)

-- test LIMIT TO
IMPORT FOREIGN SCHEMA public LIMIT TO (cpu) FROM SERVER server1 INTO public OPTIONS(schemaless 'true');
--Testcase 16:
SELECT ftoptions FROM pg_foreign_table;
                  ftoptions                   
----------------------------------------------
 {table=cpu,schemaless=true,"tags=tag1,tag2"}
(1 row)

--Testcase 17:
DROP FOREIGN TABLE cpu;
IMPORT FOREIGN SCHEMA public FROM SERVER server1 INTO public OPTIONS(import_time_text 'false', schemaless 'true');
--Testcase 18:
SELECT * FROM cpu;
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | {"tag1": null, "tag2": "tag2_A"}     | {"value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

--Testcase 19:
SELECT tags->>'tag1' tag1, (fields->>'value1')::int value1 FROM cpu;
  tag1  | value1 
--------+--------
 tag1_A |    100
 tag1_B |    100
(2 rows)

--Testcase 20:
SELECT (fields->>'value1')::int value1, time, (fields->>'value2')::double precision value2 FROM cpu;
 value1 |          time          | value2 
--------+------------------------+--------
    100 | 2015-08-18 09:00:00+09 |    0.5
    100 | 2015-08-18 09:00:00+09 |      2
        | 2015-08-18 09:48:08+09 |      2
(3 rows)

--Testcase 21:
SELECT tags->>'tag1' tag1 FROM cpu;
  tag1  
--------
 tag1_A
 tag1_B
 
(3 rows)

--Testcase 22:
SELECT * FROM numbers;
          time          |     tags      |         fields         
------------------------+---------------+------------------------
 1970-01-01 09:00:00+09 | {"tag1": "a"} | {"a": "1", "b": "One"}
 1970-01-01 09:00:01+09 | {"tag1": "a"} | {"a": "2", "b": "Two"}
(2 rows)

--Testcase 23:
\d cpu;
                              Foreign table "public.cpu"
 Column |           Type           | Collation | Nullable | Default |   FDW options   
--------+--------------------------+-----------+----------+---------+-----------------
 time   | timestamp with time zone |           |          |         | 
 tags   | jsonb                    |           |          |         | (tags 'true')
 fields | jsonb                    |           |          |         | (fields 'true')
Server: server1
FDW options: ("table" 'cpu', schemaless 'true', tags 'tag1,tag2')

--Testcase 24:
SELECT * FROM cpu WHERE (fields->>'value1')::int=100;
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 25:
SELECT * FROM cpu WHERE (fields->>'value2')::double precision=0.5;
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 26:
SELECT * FROM cpu WHERE fields->>'value3'='str';
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 27:
SELECT * FROM cpu WHERE (fields->>'value4')::boolean=true;
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 28:
SELECT * FROM cpu WHERE NOT ((fields->>'value4')::boolean AND (fields->>'value1')::int=100);
          time          |               tags               |                               fields                                
------------------------+----------------------------------+---------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null} | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(1 row)

--Testcase 29:
SELECT * FROM cpu WHERE tags->>'tag1'='tag1_A';
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 30:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM cpu WHERE fields->>'value3' IS NULL;
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.cpu
   Output: "time", tags, fields
   Filter: ((cpu.fields ->> 'value3'::text) IS NULL)
   InfluxDB query: SELECT * FROM "cpu"
(4 rows)

--Testcase 31:
SELECT * FROM cpu WHERE fields->>'value3' IS NULL;
          time          |               tags               |                               fields                                
------------------------+----------------------------------+---------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null} | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | {"tag1": null, "tag2": "tag2_A"} | {"value1": null, "value2": "2", "value3": null, "value4": null}
(2 rows)

--Testcase 32:
SELECT * FROM cpu WHERE tags->>'tag2' IS NULL;
          time          |               tags               |                               fields                                
------------------------+----------------------------------+---------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null} | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(1 row)

--Testcase 33:
SELECT * FROM cpu WHERE fields->>'value3' IS NOT NULL;
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 34:
SELECT * FROM cpu WHERE tags->>'tag2' IS NOT NULL;
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:48:08+09 | {"tag1": null, "tag2": "tag2_A"}     | {"value1": null, "value2": "2", "value3": null, "value4": null}
(2 rows)

-- InfluxDB not support compare timestamp with OR condition
--Testcase 35:
SELECT * FROM cpu WHERE time = '2015-08-18 09:48:08+09' OR (fields->>'value2')::double precision = 0.5;
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:48:08+09 | {"tag1": null, "tag2": "tag2_A"}     | {"value1": null, "value2": "2", "value3": null, "value4": null}
(2 rows)

-- InfluxDB not support compare timestamp with != or <>
--Testcase 36:
SELECT * FROM cpu WHERE time != '2015-08-18 09:48:08+09';
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 37:
SELECT * FROM cpu WHERE time <> '2015-08-18 09:48:08+09';
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 38:
SELECT * FROM cpu WHERE time = '2015-08-18 09:48:08+09' OR (fields->>'value2')::double precision = 0.5;
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:48:08+09 | {"tag1": null, "tag2": "tag2_A"}     | {"value1": null, "value2": "2", "value3": null, "value4": null}
(2 rows)

-- There is inconsitency for search of missing values between tag and field
--Testcase 39:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM cpu WHERE fields->>'value3' = '';
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan on public.cpu
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE (("value3" = ''))
(3 rows)

--Testcase 40:
SELECT * FROM cpu WHERE fields->>'value3' = '';
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 41:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM cpu WHERE tags->>'tag2' = '';
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan on public.cpu
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE (("tag2" = ''))
(3 rows)

--Testcase 42:
SELECT * FROM cpu WHERE tags->>'tag2' = '';
          time          |               tags               |                               fields                                
------------------------+----------------------------------+---------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null} | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(1 row)

--Testcase 43:
SELECT * FROM cpu WHERE tags->>'tag1' IN ('tag1_A', 'tag1_B');
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 44:
EXPLAIN VERBOSE
SELECT * FROM cpu WHERE tags->>'tag1' IN ('tag1_A', 'tag1_B');
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.cpu  (cost=10.00..9.00 rows=9 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE ("tag1" = 'tag1_A' OR "tag1" = 'tag1_B')
(3 rows)

-- Rows which have no tag are considered to have empty string
--Testcase 45:
SELECT * FROM cpu WHERE tags->>'tag1' NOT IN ('tag1_A', 'tag1_B');
          time          |               tags               |                             fields                              
------------------------+----------------------------------+-----------------------------------------------------------------
 2015-08-18 09:48:08+09 | {"tag1": null, "tag2": "tag2_A"} | {"value1": null, "value2": "2", "value3": null, "value4": null}
(1 row)

--Testcase 46:
EXPLAIN VERBOSE
SELECT * FROM cpu WHERE tags->>'tag1' NOT IN ('tag1_A', 'tag1_B');
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.cpu  (cost=10.00..844.00 rows=844 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE ("tag1" <> 'tag1_A' AND "tag1" <> 'tag1_B')
(3 rows)

-- test IN/NOT IN
--Testcase 47:
SELECT * FROM cpu WHERE time IN ('2015-08-18 09:48:08+09','2016-08-28 07:44:00+07');
          time          |               tags               |                             fields                              
------------------------+----------------------------------+-----------------------------------------------------------------
 2015-08-18 09:48:08+09 | {"tag1": null, "tag2": "tag2_A"} | {"value1": null, "value2": "2", "value3": null, "value4": null}
(1 row)

--Testcase 48:
SELECT * FROM cpu WHERE time NOT IN ('2015-08-18 09:48:08+09','2016-08-28 07:44:00+07');
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 49:
SELECT * FROM cpu WHERE (fields->>'value1')::int NOT IN (100, 97);
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 50:
SELECT * FROM cpu WHERE (fields->>'value1')::int IN (100, 97);
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 51:
SELECT * FROM cpu WHERE (fields->>'value2')::double precision IN (0.5, 10.9);
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 52:
SELECT * FROM cpu WHERE (fields->>'value2')::double precision NOT IN (2, 9.7);
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 53:
SELECT * FROM cpu WHERE (fields->>'value4')::boolean NOT IN ('true', 'true');
          time          |               tags               |                               fields                                
------------------------+----------------------------------+---------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null} | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(1 row)

--Testcase 54:
SELECT * FROM cpu WHERE time IN ('2015-08-18 09:48:08+09','2016-08-28 07:44:00+07');
          time          |               tags               |                             fields                              
------------------------+----------------------------------+-----------------------------------------------------------------
 2015-08-18 09:48:08+09 | {"tag1": null, "tag2": "tag2_A"} | {"value1": null, "value2": "2", "value3": null, "value4": null}
(1 row)

--Testcase 55:
SELECT * FROM cpu WHERE time NOT IN ('2015-08-18 09:48:08+09','2016-08-28 07:44:00+07');
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 56:
SELECT * FROM cpu WHERE (fields->>'value1')::int NOT IN (100, 97);
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 57:
SELECT * FROM cpu WHERE (fields->>'value1')::int IN (100, 97);
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 58:
SELECT * FROM cpu WHERE (fields->>'value2')::double precision IN (0.5, 10.9);
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 59:
SELECT * FROM cpu WHERE (fields->>'value2')::double precision NOT IN (2, 9.7);
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 60:
SELECT * FROM cpu WHERE (fields->>'value4')::boolean NOT IN ('true', 'true');
          time          |               tags               |                               fields                                
------------------------+----------------------------------+---------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null} | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(1 row)

--Testcase 61:
SELECT * FROM cpu WHERE (fields->>'value4')::boolean IN ('f', 't');
          time          |                 tags                 |                                fields                                 
------------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 62:
CREATE FOREIGN TABLE t1(time timestamp with time zone ,tags jsonb OPTIONS(tags 'true'),  fields jsonb OPTIONS (fields 'true')) SERVER server1 OPTIONS (table 'cpu', schemaless 'true', tags 'tag1');
--Testcase 63:
CREATE FOREIGN TABLE t2(time timestamp ,tags jsonb OPTIONS(tags 'true'),  fields jsonb OPTIONS (fields 'true')) SERVER server1 OPTIONS (table 'cpu', schemaless 'true', tags 'tag1');
--Testcase 64:
SELECT * FROM t1;
          time          |        tags        |                                         fields                                          
------------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | {"tag1": null}     | {"tag2": "tag2_A", "value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

--Testcase 65:
SELECT * FROM t2;
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 00:48:08 | {"tag1": null}     | {"tag2": "tag2_A", "value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

-- In following four queries, timestamp condition is added to InfluxQL as "time = '2015-08-18 00:00:00'"
--Testcase 66:
SELECT * FROM t1 WHERE time = TIMESTAMP WITH TIME ZONE '2015-08-18 09:00:00+09';
          time          |        tags        |                                         fields                                          
------------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 67:
SELECT * FROM t1 WHERE time = TIMESTAMP '2015-08-18 00:00:00';
          time          |        tags        |                                         fields                                          
------------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 68:
SELECT * FROM t2 WHERE time = TIMESTAMP WITH TIME ZONE '2015-08-18 09:00:00+09';
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 69:
SELECT * FROM t2 WHERE time = TIMESTAMP '2015-08-18 00:00:00';
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

-- pushdown now()
--Testcase 70:
SELECT * FROM t2 WHERE now() > time;
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 00:48:08 | {"tag1": null}     | {"tag2": "tag2_A", "value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

--Testcase 71:
EXPLAIN VERBOSE
SELECT * FROM t2 WHERE now() > time;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE ((now() > time))
(3 rows)

--Testcase 401:
EXPLAIN VERBOSE
SELECT * FROM t2 WHERE time < now() + interval '1d';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE ((time < (now() + 1d0h0m0s0u)))
(3 rows)

--Testcase 402:
SELECT * FROM t2 WHERE time < now() + interval '1d';
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 00:48:08 | {"tag1": null}     | {"tag2": "tag2_A", "value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

--Testcase 403:
EXPLAIN VERBOSE
SELECT * FROM t2 WHERE time < now() - interval '1d';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE ((time < (now() - 1d0h0m0s0u)))
(3 rows)

--Testcase 404:
SELECT * FROM t2 WHERE time < now() - interval '1d';
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 00:48:08 | {"tag1": null}     | {"tag2": "tag2_A", "value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

--Testcase 72:
SELECT * FROM t2 WHERE time = TIMESTAMP WITH TIME ZONE '2015-08-26 05:43:21.1+00' - interval '1 week 1 day 5 hour 43 minute 21 second 100 millisecond';
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 73:
EXPLAIN VERBOSE
SELECT * FROM t2 WHERE time = TIMESTAMP WITH TIME ZONE '2015-08-26 05:43:21.1+00' - interval '1 week 1 day 5 hour 43 minute 21 second 100 millisecond';
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE ((time = ('2015-08-26 05:43:21.1' - 8d5h43m21s100000u)))
(3 rows)

-- InfluxDB does not seem to support time column + interval, so below query returns empty result
-- SELECT * FROM t2 WHERE time + interval '1 week 1 day 5 hour 43 minute 21 second 100 millisecond' = TIMESTAMP WITH TIME ZONE '2015-08-26 05:43:21.1+00';
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM t2 WHERE time + interval '1 week 1 day 5 hour 43 minute 21 second 100 millisecond' = TIMESTAMP WITH TIME ZONE '2015-08-26 05:43:21.1+00';
-- InfluxDB does not support month or year interval, so not push down
--Testcase 74:
SELECT * FROM t2 WHERE time = TIMESTAMP '2015-09-18 00:00:00' - interval '1 months';
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

--Testcase 75:
EXPLAIN VERBOSE
SELECT * FROM t2 WHERE time = TIMESTAMP '2015-09-18 00:00:00' - interval '1 months';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" WHERE ((time = '2015-08-18 00:00:00'))
(3 rows)

--Testcase 76:
SELECT * FROM t2 WHERE (fields->>'value1')::int = ANY (ARRAY(SELECT (fields->>'value1')::int FROM t1 WHERE (fields->>'value1')::int < 1000));
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
(2 rows)

-- ANY with ARRAY expression
--Testcase 77:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ANY(ARRAY[1, (fields->>'a')::int + 1]);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..15.15 rows=15 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" = 1) OR ("a" = ("a" + 1)))
(3 rows)

--Testcase 78:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ANY(ARRAY[1, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 79:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ANY(ARRAY[1, (fields->>'a')::int + 1]);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1476.62 rows=1462 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" <> 1) OR ("a" <> ("a" + 1)))
(3 rows)

--Testcase 80:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ANY(ARRAY[1, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 81:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int >= ANY(ARRAY[1, (fields->>'a')::int + 1]);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" >= 1) OR ("a" >= ("a" + 1)))
(3 rows)

--Testcase 82:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int >= ANY(ARRAY[1, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 83:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <= ANY(ARRAY[1, (fields->>'a')::int + 1]);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" <= 1) OR ("a" <= ("a" + 1)))
(3 rows)

--Testcase 84:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <= ANY(ARRAY[1, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 85:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int > ANY(ARRAY[1, (fields->>'a')::int + 1]);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" > 1) OR ("a" > ("a" + 1)))
(3 rows)

--Testcase 86:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int > ANY(ARRAY[1, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 87:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int < ANY(ARRAY[1, (fields->>'a')::int + 1]);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" < 1) OR ("a" < ("a" + 1)))
(3 rows)

--Testcase 88:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int < ANY(ARRAY[1, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

-- ANY with ARRAY const
--Testcase 89:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ANY(ARRAY[1, 2]);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..15.15 rows=15 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" = 1 OR "a" = 2)
(3 rows)

--Testcase 90:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 91:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ANY(ARRAY[1, 2]);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1476.62 rows=1462 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" <> 1 OR "a" <> 2)
(3 rows)

--Testcase 92:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 93:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int >= ANY(ARRAY[1, 2]);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" >= 1 OR "a" >= 2)
(3 rows)

--Testcase 94:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int >= ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 95:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <= ANY(ARRAY[1, 2]);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" <= 1 OR "a" <= 2)
(3 rows)

--Testcase 96:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <= ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 97:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int > ANY(ARRAY[1, 2]);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" > 1 OR "a" > 2)
(3 rows)

--Testcase 98:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int > ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 99:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int < ANY(ARRAY[1, 2]);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" < 1 OR "a" < 2)
(3 rows)

--Testcase 100:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int < ANY(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 101:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ANY('{1, 2, 3}');
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..22.22 rows=22 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" = 1 OR "a" = 2 OR "a" = 3)
(3 rows)

--Testcase 102:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ANY('{1, 2, 3}');
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 103:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ANY('{1, 2, 3}');
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1476.62 rows=1462 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" <> 1 OR "a" <> 2 OR "a" <> 3)
(3 rows)

--Testcase 104:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ANY('{1, 2, 3}');
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

-- ALL with ARRAY expression
--Testcase 105:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ALL(ARRAY[1, (fields->>'a')::int * 1]);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1.01 rows=1 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" = 1) AND ("a" = ("a" * 1)))
(3 rows)

--Testcase 106:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ALL(ARRAY[1, (fields->>'a')::int * 1]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 107:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ALL(ARRAY[1, (fields->>'a')::int + 1]);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1461.47 rows=1447 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" <> 1) AND ("a" <> ("a" + 1)))
(3 rows)

--Testcase 108:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ALL(ARRAY[1, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 109:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int >= ALL(ARRAY[1, (fields->>'a')::int / 1]);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..163.62 rows=162 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" >= 1) AND ("a" >= ("a" / 1)))
(3 rows)

--Testcase 110:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int >= ALL(ARRAY[1, (fields->>'a')::int / 1]);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 111:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <= ALL(ARRAY[1, (fields->>'a')::int + 1]);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..163.62 rows=162 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" <= 1) AND ("a" <= ("a" + 1)))
(3 rows)

--Testcase 112:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <= ALL(ARRAY[1, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 113:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int > ALL(ARRAY[1, (fields->>'a')::int - 1]);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..163.62 rows=162 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" > 1) AND ("a" > ("a" - 1)))
(3 rows)

--Testcase 114:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int > ALL(ARRAY[1, (fields->>'a')::int - 1]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 115:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int < ALL(ARRAY[2, (fields->>'a')::int + 1]);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..163.62 rows=162 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE (("a" < 2) AND ("a" < ("a" + 1)))
(3 rows)

--Testcase 116:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int < ALL(ARRAY[2, (fields->>'a')::int + 1]);
 a |  b  
---+-----
 1 | One
(1 row)

-- ALL with ARRAY const
--Testcase 117:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ALL(ARRAY[1, 1]);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1.01 rows=1 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" = 1 AND "a" = 1)
(3 rows)

--Testcase 118:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int = ALL(ARRAY[1, 1]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 119:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ALL(ARRAY[1, 3]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1461.47 rows=1447 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" <> 1 AND "a" <> 3)
(3 rows)

--Testcase 120:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <> ALL(ARRAY[1, 3]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 121:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int >= ALL(ARRAY[1, 2]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..163.62 rows=162 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" >= 1 AND "a" >= 2)
(3 rows)

--Testcase 122:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int >= ALL(ARRAY[1, 2]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 123:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <= ALL(ARRAY[1, 2]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..163.62 rows=162 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" <= 1 AND "a" <= 2)
(3 rows)

--Testcase 124:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int <= ALL(ARRAY[1, 2]);
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 125:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int > ALL(ARRAY[0, 1]);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..163.62 rows=162 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" > 0 AND "a" > 1)
(3 rows)

--Testcase 126:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int > ALL(ARRAY[0, 1]);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 127:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int < ALL(ARRAY[2, 3]);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..163.62 rows=162 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("a" < 2 AND "a" < 3)
(3 rows)

--Testcase 128:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE (fields->>'a')::int < ALL(ARRAY[2, 3]);
 a |  b  
---+-----
 1 | One
(1 row)

-- ANY/ALL with TEXT ARRAY const
--Testcase 129:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE fields->>'b' = ANY(ARRAY['One', 'Two']);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..15.15 rows=15 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("b" = 'One' OR "b" = 'Two')
(3 rows)

--Testcase 130:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE fields->>'b' = ANY(ARRAY['One', 'Two']);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 131:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE fields->>'b' <> ALL(ARRAY['One', 'Four']);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..1461.47 rows=1447 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   InfluxDB query: SELECT "a", "b" FROM "numbers" WHERE ("b" <> 'One' AND "b" <> 'Four')
(3 rows)

--Testcase 132:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE fields->>'b' <> ALL(ARRAY['One', 'Four']);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 133:
EXPLAIN VERBOSE
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE fields->>'b' > ANY(ARRAY['One', 'Two']);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..820.12 rows=812 width=36)
   Output: ((fields ->> 'a'::text))::integer, (fields ->> 'b'::text)
   Filter: ((numbers.fields ->> 'b'::text) > ANY ('{One,Two}'::text[]))
   InfluxDB query: SELECT "a", "b" FROM "numbers"
(4 rows)

--Testcase 134:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE fields->>'b' > ANY(ARRAY['One', 'Two']);
 a |  b  
---+-----
 2 | Two
(1 row)

--Testcase 135:
EXPLAIN VERBOSE
SELECT * FROM numbers WHERE fields->>'b' > ALL(ARRAY['Four', 'Five']);
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.numbers  (cost=10.00..95.00 rows=95 width=72)
   Output: "time", tags, fields
   Filter: ((numbers.fields ->> 'b'::text) > ALL ('{Four,Five}'::text[]))
   InfluxDB query: SELECT * FROM "numbers"
(4 rows)

--Testcase 136:
SELECT (fields->>'a')::int a, fields->>'b' b FROM numbers WHERE fields->>'b' > ALL(ARRAY['Four', 'Five']);
 a |  b  
---+-----
 1 | One
 2 | Two
(2 rows)

--Testcase 137:
DROP FOREIGN TABLE numbers;
--Testcase 138:
ALTER SERVER server1 OPTIONS (SET dbname 'no such database');
--Testcase 139:
SELECT * FROM t1;
ERROR:  influxdb_fdw : database not found: no such database
--Testcase 140:
ALTER SERVER server1 OPTIONS (SET dbname 'mydb');
--Testcase 141:
SELECT * FROM t1;
          time          |        tags        |                                         fields                                          
------------------------+--------------------+-----------------------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | {"tag1": null}     | {"tag2": "tag2_A", "value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

-- map time column to both timestamp and text
--Testcase 142:
CREATE FOREIGN TABLE t5(t timestamp OPTIONS (column_name 'time'), tag1 text OPTIONS (column_name 'time'), fields jsonb OPTIONS (fields 'true')) SERVER server1 OPTIONS (table 'cpu', schemaless 'true');
--Testcase 143:
SELECT * FROM t5;
          t          |         tag1         |                                                  fields                                                   
---------------------+----------------------+-----------------------------------------------------------------------------------------------------------
 2015-08-18 00:00:00 | 2015-08-18T00:00:00Z | {"tag1": "tag1_A", "tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 00:00:00 | 2015-08-18T00:00:00Z | {"tag1": "tag1_B", "tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 00:48:08 | 2015-08-18T00:48:08Z | {"tag1": null, "tag2": "tag2_A", "value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

--get version
--Testcase 144:
\df influxdb_fdw*
                                List of functions
 Schema |          Name          | Result data type | Argument data types | Type 
--------+------------------------+------------------+---------------------+------
 public | influxdb_fdw_handler   | fdw_handler      |                     | func
 public | influxdb_fdw_validator | void             | text[], oid         | func
 public | influxdb_fdw_version   | integer          |                     | func
(3 rows)

--Testcase 145:
SELECT * FROM public.influxdb_fdw_version();
 influxdb_fdw_version 
----------------------
                20100
(1 row)

--Testcase 146:
SELECT influxdb_fdw_version();
 influxdb_fdw_version 
----------------------
                20100
(1 row)

--Test pushdown LIMIT...OFFSET
--Testcase 147:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM t1 LIMIT 1 OFFSET 0;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.t1
   Output: (tableoid)::regclass, "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" LIMIT 1 OFFSET 0
(3 rows)

--Testcase 148:
SELECT tableoid::regclass, * FROM t1 LIMIT 1 OFFSET 0;
 tableoid |          time          |        tags        |                                         fields                                          
----------+------------------------+--------------------+-----------------------------------------------------------------------------------------
 t1       | 2015-08-18 09:00:00+09 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 149:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM t1 LIMIT 1 OFFSET 1;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.t1
   Output: (tableoid)::regclass, "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" LIMIT 1 OFFSET 1
(3 rows)

--Testcase 150:
SELECT tableoid::regclass, * FROM t1 LIMIT 1 OFFSET 1;
 tableoid |          time          |        tags        |                                      fields                                       
----------+------------------------+--------------------+-----------------------------------------------------------------------------------
 t1       | 2015-08-18 09:00:00+09 | {"tag1": "tag1_B"} | {"tag2": null, "value1": "100", "value2": "2", "value3": null, "value4": "false"}
(1 row)

--Testcase 151:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM t1 LIMIT 1 OFFSET 0;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.t1
   Output: ctid, "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" LIMIT 1 OFFSET 0
(3 rows)

--Testcase 152:
SELECT ctid, * FROM t1 LIMIT 1 OFFSET 0;
      ctid      |          time          |        tags        |                                         fields                                          
----------------+------------------------+--------------------+-----------------------------------------------------------------------------------------
 (4294967295,0) | 2015-08-18 09:00:00+09 | {"tag1": "tag1_A"} | {"tag2": "tag2_A", "value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
(1 row)

--Testcase 153:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM t2 LIMIT 10 OFFSET 20;
                        QUERY PLAN                        
----------------------------------------------------------
 Foreign Scan on public.t2
   Output: ctid, "time", tags, fields
   InfluxDB query: SELECT * FROM "cpu" LIMIT 10 OFFSET 20
(3 rows)

--Testcase 154:
SELECT ctid, * FROM t2 LIMIT 10 OFFSET 20;
 ctid | time | tags | fields 
------+------+------+--------
(0 rows)

--Testcase 155:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM
  t1
  LEFT JOIN t2
  ON (t2.fields->>'value1')::int = 123,
  LATERAL (SELECT (t2.fields->>'value1')::int value1, t1.tags->>'tag1' tag1 FROM t1 LIMIT 1 OFFSET 0) AS ss
WHERE (t1.fields->>'value1')::int = ss.value1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: t1."time", t1.tags, t1.fields, t2."time", t2.tags, t2.fields, (((t2.fields ->> 'value1'::text))::integer), ((t1_1.tags ->> 'tag1'::text))
   Join Filter: (((t1.fields ->> 'value1'::text))::integer = (((t2.fields ->> 'value1'::text))::integer))
   ->  Nested Loop Left Join
         Output: t1."time", t1.tags, t1.fields, t2."time", t2.tags, t2.fields
         ->  Foreign Scan on public.t1
               Output: t1."time", t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "cpu"
         ->  Materialize
               Output: t2."time", t2.tags, t2.fields
               ->  Foreign Scan on public.t2
                     Output: t2."time", t2.tags, t2.fields
                     InfluxDB query: SELECT * FROM "cpu" WHERE (("value1" = 123))
   ->  Foreign Scan on public.t1 t1_1
         Output: ((t2.fields ->> 'value1'::text))::integer, (t1_1.tags ->> 'tag1'::text)
         InfluxDB query: SELECT * FROM "cpu" LIMIT 1 OFFSET 0
(16 rows)

--Testcase 156:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM
  t1
  LEFT JOIN t2
  ON (t2.fields->>'value1')::int = 123,
  LATERAL (SELECT (t2.fields->>'value1')::int value1, t1.tags->>'tag1' tag1 FROM t1 LIMIT 1 OFFSET 0) AS ss1,
  LATERAL (SELECT ss1.* from t3 LIMIT 1 OFFSET 20) AS ss2
WHERE (t1.fields->>'value1')::int = ss2.value1;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: t1."time", t1.tags, t1.fields, t2."time", t2.tags, t2.fields, (((t2.fields ->> 'value1'::text))::integer), ((t1_1.tags ->> 'tag1'::text)), ((((t2.fields ->> 'value1'::text))::integer)), (((t1_1.tags ->> 'tag1'::text)))
   Join Filter: (((t1.fields ->> 'value1'::text))::integer = ((((t2.fields ->> 'value1'::text))::integer)))
   ->  Nested Loop
         Output: t1."time", t1.tags, t1.fields, t2."time", t2.tags, t2.fields, (((t2.fields ->> 'value1'::text))::integer), ((t1_1.tags ->> 'tag1'::text))
         ->  Nested Loop Left Join
               Output: t1."time", t1.tags, t1.fields, t2."time", t2.tags, t2.fields
               ->  Foreign Scan on public.t1
                     Output: t1."time", t1.tags, t1.fields
                     InfluxDB query: SELECT * FROM "cpu"
               ->  Materialize
                     Output: t2."time", t2.tags, t2.fields
                     ->  Foreign Scan on public.t2
                           Output: t2."time", t2.tags, t2.fields
                           InfluxDB query: SELECT * FROM "cpu" WHERE (("value1" = 123))
         ->  Foreign Scan on public.t1 t1_1
               Output: ((t2.fields ->> 'value1'::text))::integer, (t1_1.tags ->> 'tag1'::text)
               InfluxDB query: SELECT * FROM "cpu" LIMIT 1 OFFSET 0
   ->  Foreign Scan on public.t3
         Output: (((t2.fields ->> 'value1'::text))::integer), ((t1_1.tags ->> 'tag1'::text))
         InfluxDB query: SELECT * FROM "t3" LIMIT 1 OFFSET 20
(21 rows)

--Testcase 157:
DROP FOREIGN TABLE cpu;
--Testcase 158:
DROP FOREIGN TABLE t1;
--Testcase 159:
DROP FOREIGN TABLE t2;
--Testcase 160:
DROP FOREIGN TABLE t3;
--Testcase 161:
DROP FOREIGN TABLE t4;
--Testcase 162:
DROP FOREIGN TABLE t5;
--Testcase 163:
DROP FOREIGN TABLE tx;
-- test INSERT, DELETE
IMPORT FOREIGN SCHEMA public FROM SERVER server1 INTO public OPTIONS(import_time_text 'true', schemaless 'true');
--Testcase 204:
CREATE FOREIGN TABLE cpu_nsc (time timestamp with time zone, time_text text, tag1 text, tag2 text, value1 int, value2 float, value3 text, value4 boolean) SERVER server1 OPTIONS (table 'cpu', tags 'tag1, tag2');
--Testcase 164:
SELECT * FROM cpu;
          time          |      time_text       |                 tags                 |                                fields                                 
------------------------+----------------------+--------------------------------------+-----------------------------------------------------------------------
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | 2015-08-18T00:48:08Z | {"tag1": null, "tag2": "tag2_A"}     | {"value1": null, "value2": "2", "value3": null, "value4": null}
(3 rows)

--Testcase 165:
EXPLAIN VERBOSE
INSERT INTO cpu_nsc(time, tag1, tag2, value1, value2, value3, value4) VALUES('2021-01-01 00:00:01+09', 'tag1_K', 'tag2_H', 200, 5.5, 'test1', true);
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.cpu_nsc  (cost=0.00..0.01 rows=0 width=0)
   Batch Size: 1
   ->  Result  (cost=0.00..0.01 rows=1 width=149)
         Output: '2021-01-01 00:00:01+09'::timestamp with time zone, NULL::text, 'tag1_K'::text, 'tag2_H'::text, 200, '5.5'::double precision, 'test1'::text, true
(4 rows)

--Testcase 166:
INSERT INTO cpu_nsc(time, tag1, tag2, value1, value2, value3, value4) VALUES('2021-01-01 00:00:01+09', 'tag1_K', 'tag2_H', 200, 5.5, 'test', true);
--Testcase 167:
SELECT * FROM cpu;
          time          |      time_text       |                 tags                 |                                 fields                                 
------------------------+----------------------+--------------------------------------+------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_A", "tag2": "tag2_A"} | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | 2015-08-18T00:48:08Z | {"tag1": null, "tag2": "tag2_A"}     | {"value1": null, "value2": "2", "value3": null, "value4": null}
 2021-01-01 00:00:01+09 | 2020-12-31T15:00:01Z | {"tag1": "tag1_K", "tag2": "tag2_H"} | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
(4 rows)

--Testcase 168:
EXPLAIN VERBOSE
INSERT INTO cpu_nsc(time, tag1, tag2, value1, value2, value3, value4) VALUES('2021-01-02 00:00:02+05', 'tag1_I', 'tag2_E', 300, 15.5, 'test2', false),
  ('2029-02-02 00:02:02+04', 'tag1_U', 'tag2_DZ', (SELECT 350), (SELECT i FROM (VALUES(6.9)) AS foo (i)), 'funny', true);
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.cpu_nsc  (cost=0.02..0.04 rows=0 width=0)
   Batch Size: 1
   InitPlan 1 (returns $0)
     ->  Result  (cost=0.00..0.01 rows=1 width=4)
           Output: 350
   InitPlan 2 (returns $1)
     ->  Result  (cost=0.00..0.01 rows=1 width=32)
           Output: 6.9
   ->  Values Scan on "*VALUES*"  (cost=0.00..0.03 rows=2 width=149)
         Output: "*VALUES*".column1, NULL::text, "*VALUES*".column2, "*VALUES*".column3, "*VALUES*".column4, "*VALUES*".column5, "*VALUES*".column6, "*VALUES*".column7
(10 rows)

--Testcase 169:
INSERT INTO cpu_nsc(time, tag1, tag2, value1, value2, value3, value4) VALUES('2021-01-02 00:00:02+05', 'tag1_I', 'tag2_E', 300, 15.5, 'test2', false),
  ('2029-02-02 00:02:02+04', 'tag1_U', 'tag2_DZ', (SELECT 350), (SELECT i FROM (VALUES(6.9)) AS foo (i)), 'funny', true);
--Testcase 170:
SELECT * FROM cpu;
          time          |      time_text       |                 tags                  |                                  fields                                   
------------------------+----------------------+---------------------------------------+---------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_A", "tag2": "tag2_A"}  | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | 2015-08-18T00:48:08Z | {"tag1": null, "tag2": "tag2_A"}      | {"value1": null, "value2": "2", "value3": null, "value4": null}
 2021-01-01 00:00:01+09 | 2020-12-31T15:00:01Z | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-01-02 04:00:02+09 | 2021-01-01T19:00:02Z | {"tag1": "tag1_I", "tag2": "tag2_E"}  | {"value1": "300", "value2": "15.5", "value3": "test2", "value4": "false"}
 2029-02-02 05:02:02+09 | 2029-02-01T20:02:02Z | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(6 rows)

--Testcase 171:
INSERT INTO cpu_nsc(tag2, value1) VALUES('tag2_KH', 400);
--Testcase 172:
SELECT tags->>'tag1' tag1, tags->>'tag2' tag2, (fields->>'value1')::bigint value1, (fields->>'value2')::double precision value2, fields->>'value3' value3, (fields->>'value4')::boolean value4 FROM cpu;
  tag1  |  tag2   | value1 | value2 | value3 | value4 
--------+---------+--------+--------+--------+--------
 tag1_A | tag2_A  |    100 |    0.5 | str    | t
 tag1_B |         |    100 |      2 |        | f
        | tag2_A  |        |      2 |        | 
 tag1_K | tag2_H  |    200 |    5.5 | test   | t
 tag1_I | tag2_E  |    300 |   15.5 | test2  | f
        | tag2_KH |    400 |        |        | 
 tag1_U | tag2_DZ |    350 |    6.9 | funny  | t
(7 rows)

--Testcase 173:
EXPLAIN VERBOSE
DELETE FROM cpu_nsc WHERE tag2 = 'tag2_KH';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Delete on public.cpu_nsc  (cost=10.00..3.00 rows=0 width=0)
   ->  Foreign Delete on public.cpu_nsc  (cost=10.00..3.00 rows=3 width=104)
         InfluxDB query: DELETE FROM "cpu" WHERE (("tag2" = 'tag2_KH'))
(3 rows)

--Testcase 174:
DELETE FROM cpu_nsc WHERE tag2 = 'tag2_KH';
--Testcase 175:
SELECT tags->>'tag1' tag1, tags->>'tag2' tag2, (fields->>'value1')::bigint value1, (fields->>'value2')::double precision value2, fields->>'value3' value3, (fields->>'value4')::boolean value4 FROM cpu;
  tag1  |  tag2   | value1 | value2 | value3 | value4 
--------+---------+--------+--------+--------+--------
 tag1_A | tag2_A  |    100 |    0.5 | str    | t
 tag1_B |         |    100 |      2 |        | f
        | tag2_A  |        |      2 |        | 
 tag1_K | tag2_H  |    200 |    5.5 | test   | t
 tag1_I | tag2_E  |    300 |   15.5 | test2  | f
 tag1_U | tag2_DZ |    350 |    6.9 | funny  | t
(6 rows)

--Testcase 176:
EXPLAIN VERBOSE
DELETE FROM cpu WHERE time = '2021-01-02 04:00:02+09';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Delete on public.cpu  (cost=10.00..6.00 rows=0 width=0)
   ->  Foreign Delete on public.cpu  (cost=10.00..6.00 rows=6 width=40)
         InfluxDB query: DELETE FROM "cpu" WHERE ((time = '2021-01-01 19:00:02'))
(3 rows)

--Testcase 177:
DELETE FROM cpu WHERE time = '2021-01-02 04:00:02+09';
--Testcase 178:
SELECT * FROM cpu;
          time          |      time_text       |                 tags                  |                                 fields                                  
------------------------+----------------------+---------------------------------------+-------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_A", "tag2": "tag2_A"}  | {"value1": "100", "value2": "0.5", "value3": "str", "value4": "true"}
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2015-08-18 09:48:08+09 | 2015-08-18T00:48:08Z | {"tag1": null, "tag2": "tag2_A"}      | {"value1": null, "value2": "2", "value3": null, "value4": null}
 2021-01-01 00:00:01+09 | 2020-12-31T15:00:01Z | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2029-02-02 05:02:02+09 | 2029-02-01T20:02:02Z | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(5 rows)

--Testcase 179:
EXPLAIN VERBOSE
DELETE FROM cpu_nsc WHERE time < '2018-07-07' AND tag1 != 'tag1_B';
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Delete on public.cpu_nsc  (cost=10.00..212.00 rows=0 width=0)
   ->  Foreign Delete on public.cpu_nsc  (cost=10.00..212.00 rows=212 width=104)
         InfluxDB query: DELETE FROM "cpu" WHERE ((time < '2018-07-06 15:00:00')) AND (("tag1" <> 'tag1_B'))
(3 rows)

--Testcase 180:
DELETE FROM cpu_nsc WHERE time < '2018-07-07' AND tag1 != 'tag1_B';
--Testcase 181:
SELECT * FROM cpu;
          time          |      time_text       |                 tags                  |                                 fields                                  
------------------------+----------------------+---------------------------------------+-------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09 | 2020-12-31T15:00:01Z | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2029-02-02 05:02:02+09 | 2029-02-01T20:02:02Z | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(3 rows)

-- Test INSERT, DELETE with time_text column
--Testcase 182:
INSERT INTO cpu_nsc(time_text, tag1, tag2, value1, value2, value3, value4) VALUES('2021-02-02T00:00:00Z', 'tag1_D', 'tag2_E', 600, 20.2, 'test3', true);
--Testcase 183:
SELECT * FROM cpu;
          time          |      time_text       |                 tags                  |                                  fields                                  
------------------------+----------------------+---------------------------------------+--------------------------------------------------------------------------
 2015-08-18 09:00:00+09 | 2015-08-18T00:00:00Z | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09 | 2020-12-31T15:00:01Z | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-02 09:00:00+09 | 2021-02-02T00:00:00Z | {"tag1": "tag1_D", "tag2": "tag2_E"}  | {"value1": "600", "value2": "20.2", "value3": "test3", "value4": "true"}
 2029-02-02 05:02:02+09 | 2029-02-01T20:02:02Z | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(4 rows)

--Testcase 184:
INSERT INTO cpu_nsc(time_text, tag1, value2) VALUES('2021-02-02T00:00:00.123456789Z', 'tag1_P', 25.8);
--Testcase 185:
SELECT * FROM cpu;
             time              |           time_text            |                 tags                  |                                  fields                                  
-------------------------------+--------------------------------+---------------------------------------+--------------------------------------------------------------------------
 2015-08-18 09:00:00+09        | 2015-08-18T00:00:00Z           | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09        | 2020-12-31T15:00:01Z           | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-02 09:00:00+09        | 2021-02-02T00:00:00Z           | {"tag1": "tag1_D", "tag2": "tag2_E"}  | {"value1": "600", "value2": "20.2", "value3": "test3", "value4": "true"}
 2021-02-02 09:00:00.123457+09 | 2021-02-02T00:00:00.123456789Z | {"tag1": "tag1_P", "tag2": null}      | {"value1": null, "value2": "25.8", "value3": null, "value4": null}
 2029-02-02 05:02:02+09        | 2029-02-01T20:02:02Z           | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(5 rows)

--Testcase 186:
INSERT INTO cpu_nsc(time_text, tag1, value2) VALUES('2021-02-02 00:00:01', 'tag1_J', 37.1);
--Testcase 187:
SELECT * FROM cpu;
             time              |           time_text            |                 tags                  |                                  fields                                  
-------------------------------+--------------------------------+---------------------------------------+--------------------------------------------------------------------------
 2015-08-18 09:00:00+09        | 2015-08-18T00:00:00Z           | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09        | 2020-12-31T15:00:01Z           | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-02 09:00:00+09        | 2021-02-02T00:00:00Z           | {"tag1": "tag1_D", "tag2": "tag2_E"}  | {"value1": "600", "value2": "20.2", "value3": "test3", "value4": "true"}
 2021-02-02 09:00:00.123457+09 | 2021-02-02T00:00:00.123456789Z | {"tag1": "tag1_P", "tag2": null}      | {"value1": null, "value2": "25.8", "value3": null, "value4": null}
 2021-02-02 09:00:01+09        | 2021-02-02T00:00:01Z           | {"tag1": "tag1_J", "tag2": null}      | {"value1": null, "value2": "37.1", "value3": null, "value4": null}
 2029-02-02 05:02:02+09        | 2029-02-01T20:02:02Z           | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(6 rows)

--Testcase 188:
INSERT INTO cpu_nsc(time, time_text, tag1, tag2, value1, value2, value3, value4) VALUES('2021-02-02 00:00:01+05', '2021-02-02T00:00:02.123456789Z', 'tag1_A', 'tag2_B', 200, 5.5, 'test', true);
WARNING:  Inserting value has both 'time_text' and 'time' columns specified. The 'time' will be ignored.
--Testcase 189:
SELECT * FROM cpu;
             time              |           time_text            |                 tags                  |                                  fields                                  
-------------------------------+--------------------------------+---------------------------------------+--------------------------------------------------------------------------
 2015-08-18 09:00:00+09        | 2015-08-18T00:00:00Z           | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09        | 2020-12-31T15:00:01Z           | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-02 09:00:00+09        | 2021-02-02T00:00:00Z           | {"tag1": "tag1_D", "tag2": "tag2_E"}  | {"value1": "600", "value2": "20.2", "value3": "test3", "value4": "true"}
 2021-02-02 09:00:00.123457+09 | 2021-02-02T00:00:00.123456789Z | {"tag1": "tag1_P", "tag2": null}      | {"value1": null, "value2": "25.8", "value3": null, "value4": null}
 2021-02-02 09:00:01+09        | 2021-02-02T00:00:01Z           | {"tag1": "tag1_J", "tag2": null}      | {"value1": null, "value2": "37.1", "value3": null, "value4": null}
 2021-02-02 09:00:02.123457+09 | 2021-02-02T00:00:02.123456789Z | {"tag1": "tag1_A", "tag2": "tag2_B"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2029-02-02 05:02:02+09        | 2029-02-01T20:02:02Z           | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(7 rows)

--Testcase 190:
INSERT INTO cpu_nsc(time_text, time, tag1, tag2, value1, value2, value3, value4) VALUES('2021-02-03T00:00:03.123456789Z', '2021-03-03 00:00:01+07', 'tag1_C', 'tag2_D', 200, 5.5, 'test', true);
WARNING:  Inserting value has both 'time_text' and 'time' columns specified. The 'time' will be ignored.
--Testcase 191:
SELECT * FROM cpu;
             time              |           time_text            |                 tags                  |                                  fields                                  
-------------------------------+--------------------------------+---------------------------------------+--------------------------------------------------------------------------
 2015-08-18 09:00:00+09        | 2015-08-18T00:00:00Z           | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09        | 2020-12-31T15:00:01Z           | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-02 09:00:00+09        | 2021-02-02T00:00:00Z           | {"tag1": "tag1_D", "tag2": "tag2_E"}  | {"value1": "600", "value2": "20.2", "value3": "test3", "value4": "true"}
 2021-02-02 09:00:00.123457+09 | 2021-02-02T00:00:00.123456789Z | {"tag1": "tag1_P", "tag2": null}      | {"value1": null, "value2": "25.8", "value3": null, "value4": null}
 2021-02-02 09:00:01+09        | 2021-02-02T00:00:01Z           | {"tag1": "tag1_J", "tag2": null}      | {"value1": null, "value2": "37.1", "value3": null, "value4": null}
 2021-02-02 09:00:02.123457+09 | 2021-02-02T00:00:02.123456789Z | {"tag1": "tag1_A", "tag2": "tag2_B"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-03 09:00:03.123457+09 | 2021-02-03T00:00:03.123456789Z | {"tag1": "tag1_C", "tag2": "tag2_D"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2029-02-02 05:02:02+09        | 2029-02-01T20:02:02Z           | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(8 rows)

--Testcase 192:
EXPLAIN VERBOSE
DELETE FROM cpu_nsc WHERE time_text = '2021-02-02T00:00:00.123456789Z';
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Delete on public.cpu_nsc  (cost=10.00..3.00 rows=0 width=0)
   ->  Foreign Delete on public.cpu_nsc  (cost=10.00..3.00 rows=3 width=104)
         InfluxDB query: DELETE FROM "cpu" WHERE ((time = '2021-02-02T00:00:00.123456789Z'))
(3 rows)

--Testcase 193:
DELETE FROM cpu_nsc WHERE time_text = '2021-02-02T00:00:00.123456789Z';
--Testcase 194:
SELECT * FROM cpu;
             time              |           time_text            |                 tags                  |                                  fields                                  
-------------------------------+--------------------------------+---------------------------------------+--------------------------------------------------------------------------
 2015-08-18 09:00:00+09        | 2015-08-18T00:00:00Z           | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09        | 2020-12-31T15:00:01Z           | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-02 09:00:00+09        | 2021-02-02T00:00:00Z           | {"tag1": "tag1_D", "tag2": "tag2_E"}  | {"value1": "600", "value2": "20.2", "value3": "test3", "value4": "true"}
 2021-02-02 09:00:01+09        | 2021-02-02T00:00:01Z           | {"tag1": "tag1_J", "tag2": null}      | {"value1": null, "value2": "37.1", "value3": null, "value4": null}
 2021-02-02 09:00:02.123457+09 | 2021-02-02T00:00:02.123456789Z | {"tag1": "tag1_A", "tag2": "tag2_B"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-03 09:00:03.123457+09 | 2021-02-03T00:00:03.123456789Z | {"tag1": "tag1_C", "tag2": "tag2_D"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2029-02-02 05:02:02+09        | 2029-02-01T20:02:02Z           | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(7 rows)

--Testcase 195:
EXPLAIN VERBOSE
DELETE FROM cpu_nsc WHERE time_text = '2021-02-02T00:00:01Z' AND tag1 = 'tag1_J';
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Delete on public.cpu_nsc  (cost=10.00..1.00 rows=0 width=0)
   ->  Foreign Delete on public.cpu_nsc  (cost=10.00..1.00 rows=1 width=104)
         InfluxDB query: DELETE FROM "cpu" WHERE ((time = '2021-02-02T00:00:01Z')) AND (("tag1" = 'tag1_J'))
(3 rows)

--Testcase 196:
DELETE FROM cpu_nsc WHERE time_text = '2021-02-02T00:00:01Z' AND tag1 = 'tag1_J';
--Testcase 197:
SELECT * FROM cpu;
             time              |           time_text            |                 tags                  |                                  fields                                  
-------------------------------+--------------------------------+---------------------------------------+--------------------------------------------------------------------------
 2015-08-18 09:00:00+09        | 2015-08-18T00:00:00Z           | {"tag1": "tag1_B", "tag2": null}      | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09        | 2020-12-31T15:00:01Z           | {"tag1": "tag1_K", "tag2": "tag2_H"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-02 09:00:00+09        | 2021-02-02T00:00:00Z           | {"tag1": "tag1_D", "tag2": "tag2_E"}  | {"value1": "600", "value2": "20.2", "value3": "test3", "value4": "true"}
 2021-02-02 09:00:02.123457+09 | 2021-02-02T00:00:02.123456789Z | {"tag1": "tag1_A", "tag2": "tag2_B"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-03 09:00:03.123457+09 | 2021-02-03T00:00:03.123456789Z | {"tag1": "tag1_C", "tag2": "tag2_D"}  | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2029-02-02 05:02:02+09        | 2029-02-01T20:02:02Z           | {"tag1": "tag1_U", "tag2": "tag2_DZ"} | {"value1": "350", "value2": "6.9", "value3": "funny", "value4": "true"}
(6 rows)

--Testcase 198:
EXPLAIN VERBOSE
DELETE FROM cpu_nsc WHERE time_text = '2021-02-02 00:00:00' OR time ='2029-02-02 05:02:02+09';
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.cpu_nsc  (cost=10.00..6.00 rows=0 width=0)
   ->  Foreign Scan on public.cpu_nsc  (cost=10.00..6.00 rows=6 width=104)
         Output: "time", time_text, tag1, tag2
         Filter: ((cpu_nsc.time_text = '2021-02-02 00:00:00'::text) OR (cpu_nsc."time" = '2029-02-02 05:02:02+09'::timestamp with time zone))
         InfluxDB query: SELECT "tag1", "tag2", "value1" FROM "cpu"
(5 rows)

--Testcase 199:
DELETE FROM cpu_nsc WHERE time_text = '2021-02-02 00:00:00' OR time ='2029-02-02 05:02:02+09';
--Testcase 200:
SELECT * FROM cpu;
             time              |           time_text            |                 tags                 |                                  fields                                  
-------------------------------+--------------------------------+--------------------------------------+--------------------------------------------------------------------------
 2015-08-18 09:00:00+09        | 2015-08-18T00:00:00Z           | {"tag1": "tag1_B", "tag2": null}     | {"value1": "100", "value2": "2", "value3": null, "value4": "false"}
 2021-01-01 00:00:01+09        | 2020-12-31T15:00:01Z           | {"tag1": "tag1_K", "tag2": "tag2_H"} | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-02 09:00:00+09        | 2021-02-02T00:00:00Z           | {"tag1": "tag1_D", "tag2": "tag2_E"} | {"value1": "600", "value2": "20.2", "value3": "test3", "value4": "true"}
 2021-02-02 09:00:02.123457+09 | 2021-02-02T00:00:02.123456789Z | {"tag1": "tag1_A", "tag2": "tag2_B"} | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
 2021-02-03 09:00:03.123457+09 | 2021-02-03T00:00:03.123456789Z | {"tag1": "tag1_C", "tag2": "tag2_D"} | {"value1": "200", "value2": "5.5", "value3": "test", "value4": "true"}
(5 rows)

-- InfluxDB_FDW will store time data for Field values as a strings
--Testcase 209:
CREATE FOREIGN TABLE tmp_time (
time timestamp,
tags jsonb OPTIONS (tags 'true'),
fields jsonb OPTIONS (fields 'true')
) SERVER server1 OPTIONS (table 'tmp_time', schemaless 'true', tags 'c1');
-- Use this foreign table to insert data to the table tmp_time in non-schemaless mode.
--Testcase 210:
CREATE FOREIGN TABLE tmp_time_nsc (
time timestamp,
c1 time,
c2 timestamp,
c3 timestamp with time zone,
c4 timestamp,
c5 timestamp with time zone,
agvState character varying NULL COLLATE pg_catalog."default",
value numeric NULL
) SERVER server1 OPTIONS (table 'tmp_time');
--Testcase 211:
SELECT * FROM tmp_time_nsc;
 time | c1 | c2 | c3 | c4 | c5 | agvstate | value 
------+----+----+----+----+----+----------+-------
(0 rows)

--Testcase 212:
INSERT INTO tmp_time_nsc (time, c1, agvState, value) VALUES ('1900-01-01 01:01:01', '01:02:03', 'state 1', 0.1);
--Testcase 213:
INSERT INTO tmp_time_nsc (time, c1, agvState, value) VALUES ('2100-01-01 01:01:01', '04:05:06', 'state 2', 0.2);
--Testcase 214:
INSERT INTO tmp_time_nsc (time, c1, agvState, value) VALUES ('1990-01-01 01:01:01', '07:08:09', 'state 3', 0.3);
--Testcase 215:
INSERT INTO tmp_time_nsc (time, c2) VALUES ('2020-12-27 03:02:56.634467', '1950-02-02 02:02:02');
--Testcase 216:
INSERT INTO tmp_time_nsc (time, c3, agvState, value) VALUES ('2021-12-27 03:02:56.668301', '1800-02-02 02:02:02+9', 'state 5', 0.5);
--Testcase 217:
INSERT INTO tmp_time_nsc (time, c1, c2, c3, agvState, value) VALUES ('2022-05-06 07:08:09', '07:08:09', '2022-05-06 07:08:09', '2022-05-06 07:08:09+9', 'state 6', 0.6);
--Testcase 261:
INSERT INTO tmp_time_nsc (time, c1, c2, c3, agvState, value) VALUES ('2023-05-06 07:08:09', '07:08:10', '2023-05-06 07:08:09', '2023-05-06 07:08:09+9', 'state 7', 0.7);
--Testcase 482:
INSERT INTO tmp_time_nsc (time, c1, c2, c3, c4, c5, agvState, value) VALUES ('2023-05-06 07:08:09', '07:08:10', '2023-05-06 07:08:09', '2023-05-06 07:08:09+9', '2023-05-06 08:08:09', '2023-05-06 08:08:09+9', 'state 8', 0.8);
--Testcase 483:
INSERT INTO tmp_time_nsc (time, c1, c2, c3, c4, c5, agvState, value) VALUES ('2025-05-06 07:08:09', '07:08:10', '2025-05-06 07:08:09', '2025-05-06 07:08:09+9', '2025-05-06 08:08:09', '2025-05-06 08:08:09+9', 'state 9', 0.9);
--Testcase 218:
-- 1800-02-02 02:02:02+9 is Daylight Saving Time (DST) changes in Japan.
-- Timezone setting Japan so it will plus 18s:59
-- https://www.timeanddate.com/time/zone/japan/tokyo?syear=1850
--Testcase 362:
SELECT * FROM tmp_time;
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(8 rows)

/* For time key column, InfluxDB does not support the operators !=, <> */
--Testcase 363:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time != '2022-05-06 07:08:09';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" <> '2022-05-06 07:08:09'::timestamp without time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 364:
SELECT * FROM tmp_time WHERE time != '2022-05-06 07:08:09';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(7 rows)

--Testcase 365:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time <> '2022-05-06 07:08:09';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" <> '2022-05-06 07:08:09'::timestamp without time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 366:
SELECT * FROM tmp_time WHERE time <> '2022-05-06 07:08:09';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(7 rows)

--Testcase 416:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time != (fields->>'c2')::timestamp;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" <> ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 417:
SELECT * FROM tmp_time WHERE time != (fields->>'c2')::timestamp;
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 418:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time != (fields->>'c2')::timestamp + interval '1d';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" <> (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone + '@ 1 day'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 419:
SELECT * FROM tmp_time WHERE time != (fields->>'c2')::timestamp + interval '1d'; 
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 420:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time != (select max(fields->>'c2')::timestamp from tmp_time);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.33..2318.32 rows=849 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: (tmp_time."time" <> $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.33 rows=1 width=8)
           Output: (max((tmp_time_1.fields ->> 'c2'::text)))::timestamp without time zone
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(10 rows)

--Testcase 421:
SELECT * FROM tmp_time WHERE time != (select max(fields->>'c2')::timestamp from tmp_time);
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(7 rows)

--Testcase 422:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time != now();
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" <> now())
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 423:
SELECT * FROM tmp_time WHERE time != now();
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(8 rows)

--Testcase 424:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time != now() + interval '1d';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" <> (now() + '@ 1 day'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 425:
SELECT * FROM tmp_time WHERE time != now() + interval '1d';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(8 rows)

-- For comparison between tags/fields and time constant, tags/fields column, param , InfluxDB support the operator !=, <>
--Testcase 367:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c3' != '2022-05-06 07:08:09+9';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c3" <> '2022-05-06 07:08:09+9'))
(3 rows)

--Testcase 368:
SELECT * FROM tmp_time WHERE fields->>'c3' != '2022-05-06 07:08:09+9';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 369:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c3' <> '2022-05-06 07:08:09+9';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c3" <> '2022-05-06 07:08:09+9'))
(3 rows)

--Testcase 370:
SELECT * FROM tmp_time WHERE fields->>'c3' <> '2022-05-06 07:08:09+9';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 370:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' != '2022-05-06 07:08:09';
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" <> '2022-05-06 07:08:09'))
(3 rows)

--Testcase 371:
SELECT * FROM tmp_time WHERE fields->>'c2' != '2022-05-06 07:08:09';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 372:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' <> '2022-05-06 07:08:09';
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" <> '2022-05-06 07:08:09'))
(3 rows)

--Testcase 373:
SELECT * FROM tmp_time WHERE fields->>'c2' <> '2022-05-06 07:08:09';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 374:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' != '07:08:09';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" <> '07:08:09'))
(3 rows)

--Testcase 375:
SELECT * FROM tmp_time WHERE tags->>'c1' != '07:08:09';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(4 rows)

--Testcase 376:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' <> '07:08:09';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" <> '07:08:09'))
(3 rows)

--Testcase 377:
SELECT * FROM tmp_time WHERE tags->>'c1' <> '07:08:09';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(4 rows)

--Testcase 426:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' <> fields->>'c4';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" <> "c4"))
(3 rows)

--Testcase 427:
SELECT * FROM tmp_time WHERE fields->>'c2' <> fields->>'c4';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(2 rows)

--Testcase 428:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' != (select max(fields->>'c2') from tmp_time) ;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.32..2318.32 rows=849 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" <> $1))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.32 rows=1 width=32)
           Output: max((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(9 rows)

--Testcase 429:
SELECT * FROM tmp_time WHERE fields->>'c2' != (select max(fields->>'c2') from tmp_time) ;
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
(3 rows)

--Testcase 430:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (fields->>'c2')::timestamp != time;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone <> tmp_time."time")
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 431:
SELECT * FROM tmp_time WHERE (fields->>'c2')::timestamp != time;
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 432:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (fields->>'c2')::timestamp != now();
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone <> now())
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 433:
SELECT * FROM tmp_time WHERE (fields->>'c2')::timestamp != now();
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 434:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (fields->>'c2')::timestamp != now() + interval '1d';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone <> (now() + '@ 1 day'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 435:
SELECT * FROM tmp_time WHERE (fields->>'c2')::timestamp != now() + interval '1d';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

/* InfluxDB does not pushdown comparison between interval and interval */
--Testcase 263:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone <= interval '1d';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time."time" - ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone) <= '@ 1 day'::interval)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 264:
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone <= interval '1d';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 265:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone >= interval '1d';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time."time" - ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone) >= '@ 1 day'::interval)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 266:
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone >= interval '1d';
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 267:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone = interval '25896 days 01:00:54.634467';
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time."time" - ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone) = '@ 25896 days 1 hour 54.634467 secs'::interval)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 268:
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone = interval '25896 days 01:00:54.634467';
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 269:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone > interval '1d';
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time."time" - ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone) > '@ 1 day'::interval)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 270:
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone > interval '1d';
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 271:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone < interval '1d';
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time."time" - ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone) < '@ 1 day'::interval)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 272:
SELECT * FROM tmp_time WHERE time - (fields->>'c2')::timestamp without time zone < interval '1d';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 273:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (time - (fields->>'c2')::timestamp without time zone) - ((tags->>'c1')::time - (tags->>'c1')::time) > interval '-1d';
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: (((tmp_time."time" - ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone) - (((tmp_time.tags ->> 'c1'::text))::time without time zone - ((tmp_time.tags ->> 'c1'::text))::time without time zone)) > '@ 1 day ago'::interval)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 274:
SELECT * FROM tmp_time WHERE (time - (fields->>'c2')::timestamp without time zone) - ((tags->>'c1')::time - (tags->>'c1')::time) > interval '-1d';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 275:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (time - (fields->>'c2')::timestamp without time zone) > ((tags->>'c1')::time - (tags->>'c1')::time) + interval '-1d';
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time."time" - ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone) > ((((tmp_time.tags ->> 'c1'::text))::time without time zone - ((tmp_time.tags ->> 'c1'::text))::time without time zone) + '@ 1 day ago'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 276:
SELECT * FROM tmp_time WHERE (time - (fields->>'c2')::timestamp without time zone) > ((tags->>'c1')::time - (tags->>'c1')::time) + interval '-1d';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 383:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (time + interval '1d') - (((fields->>'c2')::timestamp without time zone) + interval '1d') > interval '-1d';
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: (((tmp_time."time" + '@ 1 day'::interval) - (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone + '@ 1 day'::interval)) > '@ 1 day ago'::interval)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 384:
SELECT * FROM tmp_time WHERE (time + interval '1d') - (((fields->>'c2')::timestamp without time zone) + interval '1d') > interval '-1d';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

/* InfluxDB does not pushdown comparison time expression with time except now() with time key */
--Testcase 385:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (time + interval '1d') > now() + interval '-1d';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time."time" + '@ 1 day'::interval) > (now() + '@ 1 day ago'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 386:
SELECT * FROM tmp_time WHERE (time + interval '1d') > now() + interval '-1d';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(2 rows)

--Testcase 387:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (time - interval '1d') > now() - interval '-1d';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time."time" - '@ 1 day'::interval) > (now() - '@ 1 day ago'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 388:
SELECT * FROM tmp_time WHERE (time - interval '1d') > now() - interval '-1d';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(2 rows)

--Testcase 389:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (((fields->>'c2')::timestamp without time zone) + interval '1d') < now() + interval '-1d';
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((((tmp_time.fields ->> 'c2'::text))::timestamp without time zone + '@ 1 day'::interval) < (now() + '@ 1 day ago'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 390:
SELECT * FROM tmp_time WHERE (((fields->>'c2')::timestamp without time zone) + interval '1d') < now() + interval '-1d';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
(3 rows)

--Testcase 391:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (((fields->>'c2')::timestamp without time zone) - interval '1d') < now() - interval '-1d';
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((((tmp_time.fields ->> 'c2'::text))::timestamp without time zone - '@ 1 day'::interval) < (now() - '@ 1 day ago'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 392:
SELECT * FROM tmp_time WHERE (((fields->>'c2')::timestamp without time zone) - interval '1d') < now() - interval '-1d';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
(3 rows)

/* Result is empty, the purpose is to check pushdown or not */
--Testcase 397:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (fields->>'c2')::timestamp = now() + interval '-1d';
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   Filter: (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone = (now() + '@ 1 day ago'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 398:
SELECT * FROM tmp_time WHERE (fields->>'c2')::timestamp = now() + interval '-1d';  -- empty
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 399:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time = (fields->>'c2')::timestamp + interval '25896 days 01:00:54.634467';
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" = (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone + '@ 25896 days 1 hour 54.634467 secs'::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 400:
SELECT * FROM tmp_time WHERE time = (fields->>'c2')::timestamp + interval '25896 days 01:00:54.634467';
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 277:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time - (select max(fields->>'c3') from tmp_time)::timestamp without time zone  < interval '109541 days 00:58:59';
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.32..1753.32 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time."time" - ($0)::timestamp without time zone) < '@ 109541 days 58 mins 59 secs'::interval)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.32 rows=1 width=32)
           Output: max((tmp_time_1.fields ->> 'c3'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(10 rows)

--Testcase 278:
SELECT * FROM tmp_time WHERE time - (select max(fields->>'c3') from tmp_time)::timestamp without time zone  < interval '109541 days 00:58:59';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(8 rows)

-- InfluxDB support pushdown now() +/- interval in comparison with time key column
--Testcase 393:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time < now() - interval '-1d';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time < (now() - -1d0h0m0s0u)))
(3 rows)

--Testcase 394:
SELECT * FROM tmp_time WHERE time < now() - interval '-1d';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
(6 rows)

--Testcase 395:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time < now() - interval '-1d' AND  time > '1990-01-01 01:01:01';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > '1990-01-01 01:01:01')) AND ((time < (now() - -1d0h0m0s0u)))
(3 rows)

--Testcase 396:
SELECT * FROM tmp_time WHERE time < now() - interval '-1d' AND  time > '1990-01-01 01:01:01';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
(4 rows)

-- InfluxDB FDW does not support pushdown function (not now()) in condition
--Testcase 410:
ALTER FOREIGN TABLE tmp_time ALTER COLUMN time TYPE timestamp with time zone;
--Testcase 411:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') - interval '3m' < time;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((influx_time(tmp_time."time", '@ 3 mins'::interval) - '@ 3 mins'::interval) < tmp_time."time")
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 412:
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') - interval '3m' < time;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
--Testcase 413:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') - interval '3m' > '2022-05-06 07:08:09+9';
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((influx_time(tmp_time."time", '@ 3 mins'::interval) - '@ 3 mins'::interval) > '2022-05-06 07:08:09+09'::timestamp with time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 414:
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') - interval '3m' > '2022-05-06 07:08:09+9';
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
--Testcase 436:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') < (fields->>'c3')::timestamptz;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: (influx_time(tmp_time."time", '@ 3 mins'::interval) < ((tmp_time.fields ->> 'c3'::text))::timestamp with time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 437:
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') < (fields->>'c3')::timestamptz;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
--Testcase 438:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') = (fields->>'c3')::timestamptz;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   Filter: (influx_time(tmp_time."time", '@ 3 mins'::interval) = ((tmp_time.fields ->> 'c3'::text))::timestamp with time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 439:
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') = (fields->>'c3')::timestamptz;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
--Testcase 440:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') != (fields->>'c3')::timestamptz;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..849.00 rows=849 width=72)
   Output: "time", tags, fields
   Filter: (influx_time(tmp_time."time", '@ 3 mins'::interval) <> ((tmp_time.fields ->> 'c3'::text))::timestamp with time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 441:
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') != (fields->>'c3')::timestamptz;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
--Testcase 442:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') - interval '3m' > (fields->>'c3')::timestamptz;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((influx_time(tmp_time."time", '@ 3 mins'::interval) - '@ 3 mins'::interval) > ((tmp_time.fields ->> 'c3'::text))::timestamp with time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 443:
SELECT * FROM tmp_time WHERE influx_time(time, interval '3m') - interval '3m' > (fields->>'c3')::timestamptz;
ERROR:  stub influx_time(timestamp with time zone, interval) is called
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
--Testcase 415:
ALTER FOREIGN TABLE tmp_time ALTER COLUMN time TYPE timestamp;
/* InfluxDB does not pushdown pseudocontant expression (there is no Var node) */
--Testcase 378:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (select min(fields->>'c3') from tmp_time) <= '2024-05-06 07:08:09+09';
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Result  (cost=1479.32..2322.32 rows=853 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   One-Time Filter: ($0 <= '2024-05-06 07:08:09+09'::text)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.32 rows=1 width=32)
           Output: min((tmp_time_1.fields ->> 'c3'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
   ->  Foreign Scan on public.tmp_time  (cost=1479.32..2322.32 rows=853 width=72)
         Output: tmp_time."time", tmp_time.tags, tmp_time.fields
         InfluxDB query: SELECT * FROM "tmp_time"
(12 rows)

--Testcase 379:
SELECT * FROM tmp_time WHERE (select min(fields->>'c3') from tmp_time) <= '2024-05-06 07:08:09+09';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(8 rows)

--Testcase 380:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (select min(fields->>'c3') from tmp_time) <= (select max(fields->>'c2') from tmp_time);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Result  (cost=2948.64..3791.64 rows=853 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   One-Time Filter: ($0 <= $1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.32 rows=1 width=32)
           Output: min((tmp_time_1.fields ->> 'c3'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 2 (returns $1)
     ->  Aggregate  (cost=1469.31..1469.32 rows=1 width=32)
           Output: max((tmp_time_2.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_2  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_2."time", tmp_time_2.tags, tmp_time_2.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
   ->  Foreign Scan on public.tmp_time  (cost=2948.64..3791.64 rows=853 width=72)
         Output: tmp_time."time", tmp_time.tags, tmp_time.fields
         InfluxDB query: SELECT * FROM "tmp_time"
(18 rows)

--Testcase 381:
SELECT * FROM tmp_time WHERE (select min(fields->>'c3') from tmp_time) <= (select max(fields->>'c2') from tmp_time);
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(8 rows)

/* InfluxDB does not support pushdown =, <, >, >=, <= operators in comparison between time key and time colum */
--Testcase 446:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time = (fields->>'c2')::timestamp;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" = ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 447:
SELECT * FROM tmp_time WHERE time = (fields->>'c2')::timestamp;
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 448:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time >= (fields->>'c2')::timestamp;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" >= ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 449:
SELECT * FROM tmp_time WHERE time >= (fields->>'c2')::timestamp;
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 450:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time > (fields->>'c2')::timestamp;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" > ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 451:
SELECT * FROM tmp_time WHERE time > (fields->>'c2')::timestamp;
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 452:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time < (fields->>'c2')::timestamp;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" < ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 453:
SELECT * FROM tmp_time WHERE time < (fields->>'c2')::timestamp;
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 454:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time <= (fields->>'c2')::timestamp;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: (tmp_time."time" <= ((tmp_time.fields ->> 'c2'::text))::timestamp without time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 455:
SELECT * FROM tmp_time WHERE time <= (fields->>'c2')::timestamp;
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

-- InfluxDB supports pushdown =, <, >, >=, <= operators in comparison between time key with time const, time param
--Testcase 279:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time > '2022-05-06 07:08:09';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > '2022-05-06 07:08:09'))
(3 rows)

--Testcase 280:
SELECT * FROM tmp_time WHERE time > '2022-05-06 07:08:09';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(3 rows)

--Testcase 281:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time < '2022-05-06 07:08:09';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time < '2022-05-06 07:08:09'))
(3 rows)

--Testcase 282:
SELECT * FROM tmp_time WHERE time < '2022-05-06 07:08:09';
            time            |        tags        |                                          fields                                           
----------------------------+--------------------+-------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "value": "0.5", "agvstate": "state 5"}
(4 rows)

--Testcase 283:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time >= '2022-05-06 07:08:09';
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time >= '2022-05-06 07:08:09'))
(3 rows)

--Testcase 284:
SELECT * FROM tmp_time WHERE time >= '2022-05-06 07:08:09';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(4 rows)

--Testcase 285:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time <= '2022-05-06 07:08:09';
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time <= '2022-05-06 07:08:09'))
(3 rows)

--Testcase 286:
SELECT * FROM tmp_time WHERE time <= '2022-05-06 07:08:09';
            time            |        tags        |                                                fields                                                
----------------------------+--------------------+------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "value": "0.6", "agvstate": "state 6"}
(5 rows)

--Testcase 287:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time = '2022-05-06 07:08:09';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time = '2022-05-06 07:08:09'))
(3 rows)

--Testcase 288:
SELECT * FROM tmp_time WHERE time = '2022-05-06 07:08:09';
        time         |        tags        |                                                fields                                                
---------------------+--------------------+------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "value": "0.6", "agvstate": "state 6"}
(1 row)

--Testcase 405:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time > '1900-01-01 01:01:01' AND time < '2023-05-06 07:08:09';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > '1900-01-01 01:01:01')) AND ((time < '2023-05-06 07:08:09'))
(3 rows)

--Testcase 406:
SELECT * FROM tmp_time WHERE time > '1900-01-01 01:01:01' AND time < '2023-05-06 07:08:09';
            time            |        tags        |                                                            fields                                                            
----------------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(4 rows)

--Testcase 456:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time = (select max(fields->>'c2')::timestamp from tmp_time);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.33..1473.33 rows=4 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time = $1))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.33 rows=1 width=8)
           Output: (max((tmp_time_1.fields ->> 'c2'::text)))::timestamp without time zone
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(9 rows)

--Testcase 457:
SELECT * FROM tmp_time WHERE time = (select max(fields->>'c2')::timestamp from tmp_time);
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(1 row)

--Testcase 458:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time > (select max(fields->>'c2')::timestamp from tmp_time);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.33..1753.33 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > $1))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.33 rows=1 width=8)
           Output: (max((tmp_time_1.fields ->> 'c2'::text)))::timestamp without time zone
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(9 rows)

--Testcase 459:
SELECT * FROM tmp_time WHERE time > (select max(fields->>'c2')::timestamp from tmp_time);
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(1 row)

--Testcase 460:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time < (select max(fields->>'c2')::timestamp from tmp_time);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.33..1753.33 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time < $1))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.33 rows=1 width=8)
           Output: (max((tmp_time_1.fields ->> 'c2'::text)))::timestamp without time zone
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(9 rows)

--Testcase 461:
SELECT * FROM tmp_time WHERE time < (select max(fields->>'c2')::timestamp from tmp_time);
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
(6 rows)

--Testcase 462:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time >= (select max(fields->>'c2')::timestamp from tmp_time);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.33..1753.33 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time >= $1))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.33 rows=1 width=8)
           Output: (max((tmp_time_1.fields ->> 'c2'::text)))::timestamp without time zone
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(9 rows)

--Testcase 463:
SELECT * FROM tmp_time WHERE time >= (select max(fields->>'c2')::timestamp from tmp_time);
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(2 rows)

--Testcase 464:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time <= (select max(fields->>'c2')::timestamp from tmp_time);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.33..1753.33 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time <= $1))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.33 rows=1 width=8)
           Output: (max((tmp_time_1.fields ->> 'c2'::text)))::timestamp without time zone
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(9 rows)

--Testcase 465:
SELECT * FROM tmp_time WHERE time <= (select max(fields->>'c2')::timestamp from tmp_time);
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01        | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(7 rows)

-- SELECT with sub-query returning timestamp with timezone value
--Testcase 233:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c3' = (SELECT fields->>'c3' FROM tmp_time WHERE fields->>'c3' = '2022-05-06 07:08:09+09');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..11.02 rows=4 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c3" = $1))
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c3'::text)
           InfluxDB query: SELECT "c3" FROM "tmp_time" WHERE (("c3" = '2022-05-06 07:08:09+09'))
(7 rows)

--Testcase 234:
SELECT * FROM tmp_time WHERE fields->>'c3' = (SELECT fields->>'c3' FROM tmp_time WHERE fields->>'c3' = '2022-05-06 07:08:09+09');
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(1 row)

--Testcase 299:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c3' > (SELECT fields->>'c3' FROM tmp_time WHERE  fields->>'c3' = '2022-05-06 07:08:09+09');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..291.02 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c3'::text) > $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c3'::text)
           InfluxDB query: SELECT "c3" FROM "tmp_time" WHERE (("c3" = '2022-05-06 07:08:09+09'))
(8 rows)

--Testcase 300:
SELECT * FROM tmp_time WHERE fields->>'c3' > (SELECT fields->>'c3' FROM tmp_time WHERE  fields->>'c3' = '2022-05-06 07:08:09+09');
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(2 rows)

--Testcase 301:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c3' < (SELECT fields->>'c3' FROM tmp_time WHERE  fields->>'c3' = '2022-05-06 07:08:09+09');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..291.02 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c3'::text) < $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c3'::text)
           InfluxDB query: SELECT "c3" FROM "tmp_time" WHERE (("c3" = '2022-05-06 07:08:09+09'))
(8 rows)

--Testcase 302:
SELECT * FROM tmp_time WHERE fields->>'c3' < (SELECT fields->>'c3' FROM tmp_time WHERE  fields->>'c3' = '2022-05-06 07:08:09+09');
            time            |     tags     |                                                      fields                                                       
----------------------------+--------------+-------------------------------------------------------------------------------------------------------------------
 2021-12-27 03:02:56.668301 | {"c1": null} | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
(1 row)

--Testcase 303:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c3' >= (SELECT fields->>'c3' FROM tmp_time WHERE  fields->>'c3' = '2022-05-06 07:08:09+09');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..291.02 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c3'::text) >= $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c3'::text)
           InfluxDB query: SELECT "c3" FROM "tmp_time" WHERE (("c3" = '2022-05-06 07:08:09+09'))
(8 rows)

--Testcase 304:
SELECT * FROM tmp_time WHERE fields->>'c3' >= (SELECT fields->>'c3' FROM tmp_time WHERE  fields->>'c3' = '2022-05-06 07:08:09+09');
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 305:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c3' <= (SELECT fields->>'c3' FROM tmp_time WHERE  fields->>'c3' = '2022-05-06 07:08:09+09');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..291.02 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c3'::text) <= $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c3'::text)
           InfluxDB query: SELECT "c3" FROM "tmp_time" WHERE (("c3" = '2022-05-06 07:08:09+09'))
(8 rows)

--Testcase 306:
SELECT * FROM tmp_time WHERE fields->>'c3' <= (SELECT fields->>'c3' FROM tmp_time WHERE  fields->>'c3' = '2022-05-06 07:08:09+09');
            time            |        tags        |                                                            fields                                                            
----------------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(2 rows)

-- SELECT with sub-query returning timestamp value
--Testcase 235:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..11.02 rows=4 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = $1))
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(7 rows)

--Testcase 236:
SELECT * FROM tmp_time WHERE fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(1 row)

--Testcase 307:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' > (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..291.02 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c2'::text) > $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(8 rows)

--Testcase 308:
SELECT * FROM tmp_time WHERE fields->>'c2' > (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(2 rows)

--Testcase 309:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' < (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..291.02 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c2'::text) < $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(8 rows)

--Testcase 310:
SELECT * FROM tmp_time WHERE fields->>'c2' < (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 311:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' >= (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..291.02 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c2'::text) >= $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(8 rows)

--Testcase 312:
SELECT * FROM tmp_time WHERE fields->>'c2' >= (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 313:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' <= (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.02..291.02 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c2'::text) <= $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_1.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(8 rows)

--Testcase 314:
SELECT * FROM tmp_time WHERE fields->>'c2' <= (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
            time            |        tags        |                                                            fields                                                            
----------------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(2 rows)

-- SELECT with sub-query returning time value
--Testcase 237:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' = (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..11.04 rows=4 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = $1))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
(9 rows)

--Testcase 238:
SELECT * FROM tmp_time WHERE tags->>'c1' = (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01 | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(2 rows)

--Testcase 315:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' > (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.tags ->> 'c1'::text) > $1)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
(10 rows)

--Testcase 316:
SELECT * FROM tmp_time WHERE tags->>'c1' > (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(2 rows)

--Testcase 317:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' < (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.tags ->> 'c1'::text) < $1)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
(10 rows)

--Testcase 318:
SELECT * FROM tmp_time WHERE tags->>'c1' < (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(2 rows)

--Testcase 319:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' >= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.tags ->> 'c1'::text) >= $1)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
(10 rows)

--Testcase 320:
SELECT * FROM tmp_time WHERE tags->>'c1' >= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01 | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 321:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' <= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.tags ->> 'c1'::text) <= $1)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
(10 rows)

--Testcase 322:
SELECT * FROM tmp_time WHERE tags->>'c1' <= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09');
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01 | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(4 rows)

-- Mixing pushdown condition and not pushdown condition
--Testcase 407:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time > '1900-01-01 01:01:01' AND (fields->>'c2')::timestamp > '1950-02-02 02:02:02' AND (select min(fields->>'c2') from tmp_time)::timestamp <= time;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.32..1564.32 rows=95 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((($0)::timestamp without time zone <= tmp_time."time") AND (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone > '1950-02-02 02:02:02'::timestamp without time zone))
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > '1900-01-01 01:01:01'))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.32 rows=1 width=32)
           Output: min((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(10 rows)

--Testcase 408:
SELECT * FROM tmp_time WHERE time > '1900-01-01 01:01:01' AND (fields->>'c2')::timestamp > '1950-02-02 02:02:02' AND (select min(fields->>'c2') from tmp_time)::timestamp <= time;
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 408:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time > '1900-01-01 01:01:01' OR (fields->>'c2')::timestamp > '1950-02-02 02:02:02' OR (select min(fields->>'c2') from tmp_time)::timestamp <= time;
                                                                                                                               QUERY PLAN                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=1479.32..2069.32 rows=600 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time."time" > '1900-01-01 01:01:01'::timestamp without time zone) OR (((tmp_time.fields ->> 'c2'::text))::timestamp without time zone > '1950-02-02 02:02:02'::timestamp without time zone) OR (($0)::timestamp without time zone <= tmp_time."time"))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1469.31..1469.32 rows=1 width=32)
           Output: min((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..1462.00 rows=1462 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time"
(10 rows)

--Testcase 409:
SELECT * FROM tmp_time WHERE time > '1900-01-01 01:01:01' OR (fields->>'c2')::timestamp > '1950-02-02 02:02:02' OR (select min(fields->>'c2') from tmp_time)::timestamp <= time;
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(7 rows)

-- Sub-query in the expression
--Testcase 248:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time = INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..11.04 rows=4 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((((tmp_time.tags ->> 'c1'::text))::time without time zone)::interval = ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 249:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time = INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01 | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(2 rows)

--Testcase 323:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time < INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((((tmp_time.tags ->> 'c1'::text))::time without time zone)::interval < ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 324:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time < INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(2 rows)

--Testcase 325:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time > INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((((tmp_time.tags ->> 'c1'::text))::time without time zone)::interval > ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 326:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time > INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(2 rows)

--Testcase 327:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time <= INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((((tmp_time.tags ->> 'c1'::text))::time without time zone)::interval <= ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 328:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time <= INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 1990-01-01 01:01:01 | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(4 rows)

--Testcase 329:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time >= INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((((tmp_time.tags ->> 'c1'::text))::time without time zone)::interval >= ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 330:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time >= INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01 | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 250:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' = INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..11.04 rows=4 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: (((((tmp_time.tags ->> 'c1'::text))::time without time zone + '@ 3 hours 3 mins 3 secs'::interval))::interval = ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 251:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' = INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(1 row)

--Testcase 331:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' > INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: (((((tmp_time.tags ->> 'c1'::text))::time without time zone + '@ 3 hours 3 mins 3 secs'::interval))::interval > ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 332:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' > INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01 | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 333:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' < INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: (((((tmp_time.tags ->> 'c1'::text))::time without time zone + '@ 3 hours 3 mins 3 secs'::interval))::interval < ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 334:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' < INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
(1 row)

--Testcase 335:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' >= INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: (((((tmp_time.tags ->> 'c1'::text))::time without time zone + '@ 3 hours 3 mins 3 secs'::interval))::interval >= ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 336:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' >= INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01 | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(5 rows)

--Testcase 337:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' <= INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..291.05 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: (((((tmp_time.tags ->> 'c1'::text))::time without time zone + '@ 3 hours 3 mins 3 secs'::interval))::interval <= ('@ 3 hours 3 mins 3 secs'::interval + ($1)::interval))
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
(10 rows)

--Testcase 338:
SELECT * FROM tmp_time WHERE (tags->>'c1')::time + INTERVAL '03:03:03' <= INTERVAL '03:03:03' + ((SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06'))::interval;
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(2 rows)

-- Sub-query in multiple conditions (does not support OR)
--Testcase 252:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' = (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') 
AND fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09')
AND time < now() - INTERVAL '1d';
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=24.06..15.06 rows=1 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = $1)) AND (("c2" = $2)) AND ((time < (now() - 1d0h0m0s0u)))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   InitPlan 2 (returns $2)
     ->  Foreign Scan on public.tmp_time tmp_time_2  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_2.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(13 rows)

--Testcase 253:
SELECT * FROM tmp_time WHERE tags->>'c1' = (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') 
AND fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09')
AND time < now() - INTERVAL '1d';
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(1 row)

--Testcase 339:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' > (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06')
AND fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09')
AND time < now() - INTERVAL '1d';
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=24.06..15.06 rows=1 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.tags ->> 'c1'::text) > $1)
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = $1)) AND ((time < (now() - 1d0h0m0s0u)))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
   InitPlan 2 (returns $2)
     ->  Foreign Scan on public.tmp_time tmp_time_2  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_2.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(14 rows)

--Testcase 340:
SELECT * FROM tmp_time WHERE tags->>'c1' > (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06')
AND fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09')
AND time < now() - INTERVAL '1d';
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(1 row)

--Testcase 341:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' < (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09')
AND time < now() - INTERVAL '1d';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=17.05..102.05 rows=95 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.tags ->> 'c1'::text) < $1)
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time < (now() - 1d0h0m0s0u)))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
(10 rows)

--Testcase 342:
SELECT * FROM tmp_time WHERE tags->>'c1' < (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09')
AND time < now() - INTERVAL '1d';
        time         |        tags        |                                         fields                                          
---------------------+--------------------+-----------------------------------------------------------------------------------------
 1900-01-01 01:01:01 | {"c1": "01:02:03"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.1", "agvstate": "state 1"}
(1 row)

--Testcase 343:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' <= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09')
AND fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09')
AND time < now() - INTERVAL '1d';
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=24.06..15.06 rows=1 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.tags ->> 'c1'::text) <= $1)
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = $1)) AND ((time < (now() - 1d0h0m0s0u)))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   InitPlan 2 (returns $2)
     ->  Foreign Scan on public.tmp_time tmp_time_2  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_2.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(14 rows)

--Testcase 344:
SELECT * FROM tmp_time WHERE tags->>'c1' <= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09')
AND fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09')
AND time < now() - INTERVAL '1d';
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(1 row)

--Testcase 345:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE tags->>'c1' >= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09')
AND fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09')
AND time < now() - INTERVAL '1d';
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=24.06..15.06 rows=1 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.tags ->> 'c1'::text) >= $1)
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = $1)) AND ((time < (now() - 1d0h0m0s0u)))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   InitPlan 2 (returns $2)
     ->  Foreign Scan on public.tmp_time tmp_time_2  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_2.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(14 rows)

--Testcase 346:
SELECT * FROM tmp_time WHERE tags->>'c1' >= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09')
AND fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09')
AND time < now() - INTERVAL '1d';
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(1 row)

-- Aggregation with sub-query 
--Testcase 254:
EXPLAIN VERBOSE
SELECT fields->>'c2' FROM tmp_time WHERE tags->>'c1' = (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') GROUP BY fields->>'c2';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=14.08..14.17 rows=7 width=32)
   Output: ((tmp_time.fields ->> 'c2'::text))
   Group Key: (tmp_time.fields ->> 'c2'::text)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   ->  Foreign Scan on public.tmp_time  (cost=10.00..7.02 rows=7 width=32)
         Output: (tmp_time.fields ->> 'c2'::text)
         InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c1" = $1))
(12 rows)

--Testcase 255:
SELECT fields->>'c2' FROM tmp_time WHERE tags->>'c1' = (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') GROUP BY fields->>'c2';
      ?column?       
---------------------
 2022-05-06 07:08:09
(1 row)

--Testcase 347:
EXPLAIN VERBOSE
SELECT tags->>'c1' FROM tmp_time WHERE tags->>'c1' > (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06') GROUP BY tags->>'c1';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=496.48..498.85 rows=190 width=32)
   Output: ((tmp_time.tags ->> 'c1'::text))
   Group Key: (tmp_time.tags ->> 'c1'::text)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '04:05:06'))
   ->  Foreign Scan on public.tmp_time  (cost=10.00..488.22 rows=487 width=32)
         Output: (tmp_time.tags ->> 'c1'::text)
         Filter: ((tmp_time.tags ->> 'c1'::text) > $1)
         InfluxDB query: SELECT * FROM "tmp_time"
(13 rows)

--Testcase 348:
SELECT tags->>'c1' FROM tmp_time WHERE tags->>'c1' > (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '04:05:06') GROUP BY tags->>'c1';
 ?column? 
----------
 07:08:09
 07:08:10
(2 rows)

--Testcase 349:
EXPLAIN VERBOSE
SELECT tags->>'c1' FROM tmp_time WHERE tags->>'c1' < (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') GROUP BY tags->>'c1';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=496.48..498.85 rows=190 width=32)
   Output: ((tmp_time.tags ->> 'c1'::text))
   Group Key: (tmp_time.tags ->> 'c1'::text)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   ->  Foreign Scan on public.tmp_time  (cost=10.00..488.22 rows=487 width=32)
         Output: (tmp_time.tags ->> 'c1'::text)
         Filter: ((tmp_time.tags ->> 'c1'::text) < $1)
         InfluxDB query: SELECT * FROM "tmp_time"
(13 rows)

--Testcase 350:
SELECT tags->>'c1' FROM tmp_time WHERE tags->>'c1' < (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') GROUP BY tags->>'c1';
 ?column? 
----------
 01:02:03
 04:05:06
(2 rows)

--Testcase 351:
EXPLAIN VERBOSE
SELECT tags->>'c1' FROM tmp_time WHERE tags->>'c1' >= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') GROUP BY tags->>'c1';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=496.48..498.85 rows=190 width=32)
   Output: ((tmp_time.tags ->> 'c1'::text))
   Group Key: (tmp_time.tags ->> 'c1'::text)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   ->  Foreign Scan on public.tmp_time  (cost=10.00..488.22 rows=487 width=32)
         Output: (tmp_time.tags ->> 'c1'::text)
         Filter: ((tmp_time.tags ->> 'c1'::text) >= $1)
         InfluxDB query: SELECT * FROM "tmp_time"
(13 rows)

--Testcase 352:
SELECT tags->>'c1' FROM tmp_time WHERE tags->>'c1' >= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') GROUP BY tags->>'c1';
 ?column? 
----------
 07:08:09
 07:08:10
(2 rows)

--Testcase 353:
EXPLAIN VERBOSE
SELECT tags->>'c1' FROM tmp_time WHERE tags->>'c1' <= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') GROUP BY tags->>'c1';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=496.48..498.85 rows=190 width=32)
   Output: ((tmp_time.tags ->> 'c1'::text))
   Group Key: (tmp_time.tags ->> 'c1'::text)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   ->  Foreign Scan on public.tmp_time  (cost=10.00..488.22 rows=487 width=32)
         Output: (tmp_time.tags ->> 'c1'::text)
         Filter: ((tmp_time.tags ->> 'c1'::text) <= $1)
         InfluxDB query: SELECT * FROM "tmp_time"
(13 rows)

--Testcase 354:
SELECT tags->>'c1' FROM tmp_time WHERE tags->>'c1' <= (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') GROUP BY tags->>'c1';
 ?column? 
----------
 07:08:09
 01:02:03
 04:05:06
(3 rows)

-- Aggregation + Having clause with sub-query 
--Testcase 256:
EXPLAIN VERBOSE
SELECT fields->>'c3', fields->>'c2' FROM tmp_time WHERE tags->>'c1' =  (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09')
GROUP BY fields->>'c3', fields->>'c2' HAVING fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Group  (cost=15.08..15.09 rows=1 width=64)
   Output: ((tmp_time.fields ->> 'c3'::text)), ((tmp_time.fields ->> 'c2'::text))
   Group Key: ((tmp_time.fields ->> 'c3'::text)), ((tmp_time.fields ->> 'c2'::text))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   InitPlan 2 (returns $2)
     ->  Foreign Scan on public.tmp_time tmp_time_2  (cost=10.00..7.02 rows=7 width=32)
           Output: (tmp_time_2.fields ->> 'c2'::text)
           InfluxDB query: SELECT "c2" FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
   ->  Sort  (cost=1.01..1.02 rows=1 width=64)
         Output: ((tmp_time.fields ->> 'c3'::text)), ((tmp_time.fields ->> 'c2'::text))
         Sort Key: ((tmp_time.fields ->> 'c3'::text))
         ->  Foreign Scan on public.tmp_time  (cost=10.00..1.00 rows=1 width=64)
               Output: (tmp_time.fields ->> 'c3'::text), (tmp_time.fields ->> 'c2'::text)
               InfluxDB query: SELECT "c3", "c2" FROM "tmp_time" WHERE (("c1" = $1)) AND (("c2" = $2))
(19 rows)

--Testcase 257:
SELECT fields->>'c3', fields->>'c2' FROM tmp_time WHERE tags->>'c1' =  (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09')
GROUP BY fields->>'c3', fields->>'c2' HAVING fields->>'c2' = (SELECT fields->>'c2' FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
        ?column?        |      ?column?       
------------------------+---------------------
 2022-05-06 07:08:09+09 | 2022-05-06 07:08:09
(1 row)

-- JOIN with sub-query
--Testcase 258:
EXPLAIN VERBOSE
SELECT t1.* FROM tmp_time t1 JOIN tmp_time t2 ON t1.tags->>'c1' = t2.tags->>'c1'
AND t1.fields->>'c2' = (SELECT max(fields->>'c2') FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Hash Join  (cost=21.09..1482.52 rows=29 width=72)
   Output: t1."time", t1.tags, t1.fields
   Hash Cond: ((t2.tags ->> 'c1'::text) = (t1.tags ->> 'c1'::text))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time."time", tmp_time.tags, tmp_time.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
   ->  Foreign Scan on public.tmp_time t2  (cost=10.00..1462.00 rows=1462 width=32)
         Output: t2."time", t2.tags, t2.fields
         InfluxDB query: SELECT * FROM "tmp_time"
   ->  Hash  (cost=4.00..4.00 rows=4 width=72)
         Output: t1."time", t1.tags, t1.fields
         ->  Foreign Scan on public.tmp_time t1  (cost=10.00..4.00 rows=4 width=72)
               Output: t1."time", t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = $1))
(17 rows)

--Testcase 259:
SELECT t1.* FROM tmp_time t1 JOIN tmp_time t2 ON t1.tags->>'c1' = t2.tags->>'c1'
AND t1.fields->>'c2' = (SELECT max(fields->>'c2') FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(2 rows)

--Testcase 355:
EXPLAIN VERBOSE
SELECT t1.* FROM tmp_time t1 JOIN tmp_time t2 ON (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') = t2.tags->>'c1' AND t1.fields->>'c2' = (SELECT max(fields->>'c2') FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Nested Loop  (cost=34.09..35.95 rows=68 width=72)
   Output: t1."time", t1.tags, t1.fields
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time."time", tmp_time.tags, tmp_time.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   InitPlan 2 (returns $3)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
   ->  Foreign Scan on public.tmp_time t2  (cost=10.00..17.00 rows=17 width=0)
         Output: t2."time", t2.tags, t2.fields
         InfluxDB query: SELECT * FROM "tmp_time" WHERE (($1 = "c1"))
   ->  Materialize  (cost=10.00..4.02 rows=4 width=72)
         Output: t1."time", t1.tags, t1.fields
         ->  Foreign Scan on public.tmp_time t1  (cost=10.00..4.00 rows=4 width=72)
               Output: t1."time", t1.tags, t1.fields
               InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = $1))
(22 rows)

--Testcase 356:
SELECT t1.* FROM tmp_time t1 JOIN tmp_time t2 ON (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') = t2.tags->>'c1' AND t1.fields->>'c2' = (SELECT max(fields->>'c2') FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09');
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(2 rows)

-- Aggregation and JOIN with sub-query
--Testcase 357:
EXPLAIN VERBOSE
SELECT t1.tags->>'c1' FROM tmp_time t1 JOIN tmp_time t2 ON t1.tags->>'c1' = t2.tags->>'c1' AND t1.fields->>'c2' = (SELECT max(fields->>'c2') FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09') GROUP BY t1.tags->>'c1';
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Group  (cost=1487.35..1487.63 rows=7 width=32)
   Output: ((t1.tags ->> 'c1'::text))
   Group Key: ((t1.tags ->> 'c1'::text))
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time."time", tmp_time.tags, tmp_time.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
   ->  Sort  (cost=1480.31..1480.44 rows=51 width=32)
         Output: ((t1.tags ->> 'c1'::text))
         Sort Key: ((t1.tags ->> 'c1'::text))
         ->  Hash Join  (cost=17.09..1478.86 rows=51 width=32)
               Output: (t1.tags ->> 'c1'::text)
               Hash Cond: ((t2.tags ->> 'c1'::text) = (t1.tags ->> 'c1'::text))
               ->  Foreign Scan on public.tmp_time t2  (cost=10.00..1462.00 rows=1462 width=32)
                     Output: t2."time", t2.tags, t2.fields
                     InfluxDB query: SELECT * FROM "tmp_time"
               ->  Hash  (cost=7.00..7.00 rows=7 width=32)
                     Output: t1.tags
                     ->  Foreign Scan on public.tmp_time t1  (cost=10.00..7.00 rows=7 width=32)
                           Output: t1.tags
                           InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = $1))
(23 rows)

--Testcase 358:
SELECT t1.tags->>'c1' FROM tmp_time t1 JOIN tmp_time t2 ON t1.tags->>'c1' = t2.tags->>'c1' AND t1.fields->>'c2' = (SELECT max(fields->>'c2') FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09') GROUP BY t1.tags->>'c1';
 ?column? 
----------
 07:08:09
(1 row)

--Testcase 359:
EXPLAIN VERBOSE
SELECT t1.tags->>'c1' FROM tmp_time t1 JOIN tmp_time t2 ON (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') = t2.tags->>'c1' AND t1.fields->>'c2' = (SELECT max(fields->>'c2') FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09') GROUP BY t1.tags->>'c1';
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 HashAggregate  (cost=40.19..40.28 rows=7 width=32)
   Output: ((t1.tags ->> 'c1'::text))
   Group Key: (t1.tags ->> 'c1'::text)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time.tags ->> 'c1'::text))
           ->  Foreign Scan on public.tmp_time  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time."time", tmp_time.tags, tmp_time.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c1" = '07:08:09'))
   InitPlan 2 (returns $3)
     ->  Aggregate  (cost=7.04..7.04 rows=1 width=32)
           Output: max((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..7.00 rows=7 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
   ->  Nested Loop  (cost=20.00..25.80 rows=119 width=32)
         Output: (t1.tags ->> 'c1'::text)
         ->  Foreign Scan on public.tmp_time t2  (cost=10.00..17.00 rows=17 width=0)
               Output: t2."time", t2.tags, t2.fields
               InfluxDB query: SELECT * FROM "tmp_time" WHERE (($1 = "c1"))
         ->  Materialize  (cost=10.00..7.04 rows=7 width=32)
               Output: t1.tags
               ->  Foreign Scan on public.tmp_time t1  (cost=10.00..7.00 rows=7 width=32)
                     Output: t1.tags
                     InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = $1))
(25 rows)

--Testcase 360:
SELECT t1.tags->>'c1' FROM tmp_time t1 JOIN tmp_time t2 ON (SELECT max(tags->>'c1') FROM tmp_time WHERE tags->>'c1' = '07:08:09') = t2.tags->>'c1' AND t1.fields->>'c2' = (SELECT max(fields->>'c2') FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09') GROUP BY t1.tags->>'c1';
 ?column? 
----------
 07:08:09
(1 row)

-- Test case is reported in the Github Issue #40 of influxdb_fdw
--Testcase 260:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time = (SELECT max(time) FROM tmp_time WHERE time > now()-interval '1d');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=865.14..859.14 rows=4 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time = $1))
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=855.13..855.14 rows=1 width=8)
           Output: max(tmp_time_1."time")
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..853.00 rows=853 width=8)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > (now() - 1d0h0m0s0u)))
(9 rows)

--Testcase 361:
SELECT * FROM tmp_time WHERE time = (SELECT max(time) FROM tmp_time WHERE time > now()-interval '1d');
        time         |        tags        |                 fields                  
---------------------+--------------------+-----------------------------------------
 2100-01-01 01:01:01 | {"c1": "04:05:06"} | {"value": "0.2", "agvstate": "state 2"}
(1 row)

/* InfluxDB FDW does not pushdown comparision between tags/fields with tags/fields, time constant, time parameter using
 the operators <, >, <=, >= */
--Testcase 466:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' > fields->>'c4';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time.fields ->> 'c2'::text) > (tmp_time.fields ->> 'c4'::text))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 467:
SELECT * FROM tmp_time WHERE fields->>'c2' > fields->>'c4';
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 468:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' >= fields->>'c4';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time.fields ->> 'c2'::text) >= (tmp_time.fields ->> 'c4'::text))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 469:
SELECT * FROM tmp_time WHERE fields->>'c2' >= fields->>'c4';
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 470:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' < fields->>'c4';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time.fields ->> 'c2'::text) < (tmp_time.fields ->> 'c4'::text))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 471:
SELECT * FROM tmp_time WHERE fields->>'c2' < fields->>'c4';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(2 rows)

--Testcase 472:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' <= fields->>'c4';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time.fields ->> 'c2'::text) <= (tmp_time.fields ->> 'c4'::text))
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 473:
SELECT * FROM tmp_time WHERE fields->>'c2' <= fields->>'c4';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(2 rows)

--Testcase 289:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' > '1950-02-02 02:02:02';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time.fields ->> 'c2'::text) > '1950-02-02 02:02:02'::text)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 290:
SELECT * FROM tmp_time WHERE fields->>'c2' > '1950-02-02 02:02:02';
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(3 rows)

--Testcase 291:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' < '2022-05-06 07:08:09';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time.fields ->> 'c2'::text) < '2022-05-06 07:08:09'::text)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 292:
SELECT * FROM tmp_time WHERE fields->>'c2' < '2022-05-06 07:08:09';
            time            |     tags     |                                               fields                                               
----------------------------+--------------+----------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null} | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
(1 row)

--Testcase 293:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' >= '1950-02-02 02:02:02';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time.fields ->> 'c2'::text) >= '1950-02-02 02:02:02'::text)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 294:
SELECT * FROM tmp_time WHERE fields->>'c2' >= '1950-02-02 02:02:02';
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

--Testcase 295:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' <= '2022-05-06 07:08:09';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..284.00 rows=284 width=72)
   Output: "time", tags, fields
   Filter: ((tmp_time.fields ->> 'c2'::text) <= '2022-05-06 07:08:09'::text)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 296:
SELECT * FROM tmp_time WHERE fields->>'c2' <= '2022-05-06 07:08:09';
            time            |        tags        |                                                            fields                                                            
----------------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(2 rows)

--Testcase 297:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE (("c2" = '2022-05-06 07:08:09'))
(3 rows)

--Testcase 298:
SELECT * FROM tmp_time WHERE fields->>'c2' = '2022-05-06 07:08:09';
        time         |        tags        |                                                            fields                                                            
---------------------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 2022-05-06 07:08:09 | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
(1 row)

--Testcase 219:
EXPLAIN VERBOSE
SELECT fields->>'c3' FROM tmp_time WHERE fields->>'c3' = '2022-05-06 07:08:09+09';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..7.02 rows=7 width=32)
   Output: (fields ->> 'c3'::text)
   InfluxDB query: SELECT "c3" FROM "tmp_time" WHERE (("c3" = '2022-05-06 07:08:09+09'))
(3 rows)

--Testcase 220:
SELECT fields->>'c3' FROM tmp_time WHERE fields->>'c3' = '2022-05-06 07:08:09+09';
        ?column?        
------------------------
 2022-05-06 07:08:09+09
(1 row)

--Testcase 474:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' > (SELECT max(fields->>'c2') FROM tmp_time WHERE time > now()-interval '1d');
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=499.44..773.44 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c2'::text) > $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=489.44..489.44 rows=1 width=32)
           Output: max((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..487.00 rows=487 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > (now() - 1d0h0m0s0u)))
(10 rows)

--Testcase 475:
SELECT * FROM tmp_time WHERE fields->>'c2' > (SELECT max(fields->>'c2') FROM tmp_time WHERE time > now()-interval '1d');
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 476:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' >= (SELECT max(fields->>'c2') FROM tmp_time WHERE time > now()-interval '1d');
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=499.44..773.44 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c2'::text) >= $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=489.44..489.44 rows=1 width=32)
           Output: max((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..487.00 rows=487 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > (now() - 1d0h0m0s0u)))
(10 rows)

--Testcase 477:
SELECT * FROM tmp_time WHERE fields->>'c2' >= (SELECT max(fields->>'c2') FROM tmp_time WHERE time > now()-interval '1d');
        time         |        tags        |                                                                              fields                                                                               
---------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2025-05-06 07:08:09 | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(1 row)

--Testcase 478:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' < (SELECT max(fields->>'c2') FROM tmp_time WHERE time > now()-interval '1d');
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=499.44..773.44 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c2'::text) < $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=489.44..489.44 rows=1 width=32)
           Output: max((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..487.00 rows=487 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > (now() - 1d0h0m0s0u)))
(10 rows)

--Testcase 479:
SELECT * FROM tmp_time WHERE fields->>'c2' < (SELECT max(fields->>'c2') FROM tmp_time WHERE time > now()-interval '1d');
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
(3 rows)

--Testcase 480:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE fields->>'c2' <= (SELECT max(fields->>'c2') FROM tmp_time WHERE time > now()-interval '1d');
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=499.44..773.44 rows=284 width=72)
   Output: tmp_time."time", tmp_time.tags, tmp_time.fields
   Filter: ((tmp_time.fields ->> 'c2'::text) <= $0)
   InfluxDB query: SELECT * FROM "tmp_time"
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=489.44..489.44 rows=1 width=32)
           Output: max((tmp_time_1.fields ->> 'c2'::text))
           ->  Foreign Scan on public.tmp_time tmp_time_1  (cost=10.00..487.00 rows=487 width=32)
                 Output: tmp_time_1."time", tmp_time_1.tags, tmp_time_1.fields
                 InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time > (now() - 1d0h0m0s0u)))
(10 rows)

--Testcase 481:
SELECT * FROM tmp_time WHERE fields->>'c2' <= (SELECT max(fields->>'c2') FROM tmp_time WHERE time > now()-interval '1d');
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
(4 rows)

-- DELETE with sub-query returning time value.
--Testcase 227:
EXPLAIN (VERBOSE, COSTS OFF)
DELETE FROM tmp_time WHERE time = (SELECT max(time) FROM tmp_time WHERE time = '1900-01-01 01:01:01');
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Delete on public.tmp_time
   InitPlan 2 (returns $1)
     ->  Result
           Output: $0
           InitPlan 1 (returns $0)
             ->  Limit
                   Output: tmp_time_1."time"
                   ->  Foreign Scan on public.tmp_time tmp_time_1
                         Output: tmp_time_1."time"
                         Filter: (tmp_time_1."time" IS NOT NULL)
                         InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time = '1900-01-01 01:01:01'))
   ->  Foreign Delete on public.tmp_time
         InfluxDB query: DELETE FROM "tmp_time" WHERE ((time = $1))
(13 rows)

--Testcase 228:
DELETE FROM tmp_time WHERE time = (SELECT max(time) FROM tmp_time WHERE time = '1900-01-01 01:01:01');
--Testcase 229:
SELECT * FROM tmp_time;
            time            |        tags        |                                                                              fields                                                                               
----------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 01:01:01        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 03:02:56.634467 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 03:02:56.668301 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 07:08:09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 07:08:09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 01:01:01        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(7 rows)

-- Test time conversion in comparison with tags/field column
--Testcase 510:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE (fields->>'c3')::timestamptz = '1800-02-02 02:02:02+9';
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   Filter: (((tmp_time.fields ->> 'c3'::text))::timestamp with time zone = '1800-02-02 02:21:01+09:18:59'::timestamp with time zone)
   InfluxDB query: SELECT * FROM "tmp_time"
(4 rows)

--Testcase 511:
SELECT * FROM tmp_time WHERE (fields->>'c3')::timestamptz = '1800-02-02 02:02:02+9';
            time            |     tags     |                                                      fields                                                       
----------------------------+--------------+-------------------------------------------------------------------------------------------------------------------
 2021-12-27 03:02:56.668301 | {"c1": null} | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
(1 row)

-- Test time conversion in comparison with time key column
--Testcase 512:
ALTER FOREIGN TABLE tmp_time_nsc ALTER COLUMN time TYPE timestamptz;
--Testcase 519:
ALTER FOREIGN TABLE tmp_time ALTER COLUMN time TYPE timestamptz;
--Testcase 513:
INSERT INTO tmp_time_nsc (time, c1, agvState, value) VALUES ('1900-01-01 01:01:01+9', '02:02:04', 'state 10', 1);
--Testcase 514:
EXPLAIN VERBOSE
SELECT * FROM tmp_time WHERE time = '1900-01-01 01:01:01+9';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.tmp_time  (cost=10.00..4.00 rows=4 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "tmp_time" WHERE ((time = '1899-12-31 16:01:01'))
(3 rows)

--Testcase 515:
SELECT * FROM tmp_time WHERE time = '1900-01-01 01:01:01+9';
          time          |        tags        |                 fields                 
------------------------+--------------------+----------------------------------------
 1900-01-01 01:01:01+09 | {"c1": "02:02:04"} | {"value": "1", "agvstate": "state 10"}
(1 row)

--Testcase 516:
DELETE FROM tmp_time WHERE time = '1900-01-01 01:01:01+9';
--Testcase 517:
SELECT * FROM tmp_time;
             time              |        tags        |                                                                              fields                                                                               
-------------------------------+--------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1990-01-01 10:01:01+09        | {"c1": "07:08:09"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.3", "agvstate": "state 3"}
 2020-12-27 12:02:56.634467+09 | {"c1": null}       | {"c2": "1950-02-02 02:02:02", "c3": null, "c4": null, "c5": null, "value": null, "agvstate": null}
 2021-12-27 12:02:56.668301+09 | {"c1": null}       | {"c2": null, "c3": "1800-02-02 02:21:01+09:18:59", "c4": null, "c5": null, "value": "0.5", "agvstate": "state 5"}
 2022-05-06 16:08:09+09        | {"c1": "07:08:09"} | {"c2": "2022-05-06 07:08:09", "c3": "2022-05-06 07:08:09+09", "c4": null, "c5": null, "value": "0.6", "agvstate": "state 6"}
 2023-05-06 16:08:09+09        | {"c1": "07:08:10"} | {"c2": "2023-05-06 07:08:09", "c3": "2023-05-06 07:08:09+09", "c4": "2023-05-06 08:08:09", "c5": "2023-05-06 08:08:09+09", "value": "0.8", "agvstate": "state 8"}
 2025-05-06 16:08:09+09        | {"c1": "07:08:10"} | {"c2": "2025-05-06 07:08:09", "c3": "2025-05-06 07:08:09+09", "c4": "2025-05-06 08:08:09", "c5": "2025-05-06 08:08:09+09", "value": "0.9", "agvstate": "state 9"}
 2100-01-01 10:01:01+09        | {"c1": "04:05:06"} | {"c2": null, "c3": null, "c4": null, "c5": null, "value": "0.2", "agvstate": "state 2"}
(7 rows)

--Testcase 518:
ALTER FOREIGN TABLE tmp_time_nsc ALTER COLUMN time TYPE timestamp;
--Testcase 520:
ALTER FOREIGN TABLE tmp_time ALTER COLUMN time TYPE timestamp;
-- Recover data
:RECOVER_INIT_TXT_DROP_BUCKET;
:RECOVER_INIT_TXT_CREATE_BUCKET;
:RECOVER_INIT_TXT;
--Testcase 201:
DROP FOREIGN TABLE cpu_nsc;
-- Validate foreign table in schemaless mode
-- time column data type is not either timestamp or timestamp without timezone
--Testcase 206:
CREATE FOREIGN TABLE ftcpu (time time, tags jsonb options (tags 'true'), fields jsonb options(fields 'true')) SERVER server1 OPTIONS (table 'cpu', schemaless 'true');
--Testcase 207:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid data type for time column
--Testcase 208:
DROP FOREIGN TABLE ftcpu;
-- time_text column data type is not text
--Testcase 209:
CREATE FOREIGN TABLE ftcpu (time timestamp, time_text int, tags jsonb options (tags 'true'), fields jsonb options(fields 'true')) SERVER server1 OPTIONS (table 'cpu', schemaless 'true');
--Testcase 210:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid data type for time_text column
--Testcase 211:
DROP FOREIGN TABLE ftcpu;
-- time column option value is not 'time'
--Testcase 212:
CREATE FOREIGN TABLE ftcpu (t timestamp options (column_name 'time1'), tags jsonb options (tags 'true'), fields jsonb options(fields 'true')) SERVER server1 OPTIONS (table 'cpu', schemaless 'true');
--Testcase 213:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid option value for time/time_text column
--Testcase 214:
DROP FOREIGN TABLE ftcpu;
-- tags and fields column data type is not jsonb
--Testcase 215:
CREATE FOREIGN TABLE ftcpu (time timestamp, tags json options (tags 'true'), fields json options(fields 'true')) SERVER server1 OPTIONS (table 'cpu', schemaless 'true');
--Testcase 216:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid data type for tags/fields column
--Testcase 217:
DROP FOREIGN TABLE ftcpu;
-- tags and fields column option values are not 'true'
--Testcase 218:
CREATE FOREIGN TABLE ftcpu (time timestamp, tags jsonb options (tags 'false'), fields jsonb options(fields 'false')) SERVER server1 OPTIONS (table 'cpu', schemaless 'true');
--Testcase 219:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid option value for tags/fields column
--Testcase 220:
DROP FOREIGN TABLE ftcpu;
-- using other column name which is not 'time', 'time_text', 'tags' and 'fields'.
--Testcase 221:
CREATE FOREIGN TABLE ftcpu (time timestamp, time_text text, tags jsonb options (tags 'true'), fields jsonb options(fields 'true'), other timestamp) SERVER server1 OPTIONS (table 'cpu', schemaless 'true');
--Testcase 222:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid column name of time/time_text in schemaless mode
--Testcase 223:
ALTER FOREIGN TABLE ftcpu DROP other;
--Testcase 224:
ALTER FOREIGN TABLE ftcpu ADD other text;
--Testcase 225:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid column name of time/time_text in schemaless mode
--Testcase 226:
ALTER FOREIGN TABLE ftcpu DROP other;
--Testcase 227:
ALTER FOREIGN TABLE ftcpu ADD other jsonb;
--Testcase 228:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid column name of tags/fields in schemaless mode
--Testcase 229:
ALTER FOREIGN TABLE ftcpu DROP other;
--Testcase 230:
ALTER FOREIGN TABLE ftcpu ADD other int;
--Testcase 231:
SELECT * FROM ftcpu;
ERROR:  influxdb fdw: invalid column in schemaless mode. Only time, time_text, tags and fields columns are accepted.
--Testcase 232:
DROP FOREIGN TABLE ftcpu;
--Testcase 767:
CREATE FOREIGN TABLE sensor_tbl (
time timestamp,
tags jsonb OPTIONS (tags 'true'),
fields jsonb OPTIONS (fields 'true')
) SERVER server1 OPTIONS (table 'sensor', schemaless 'true', tags 'device');
--Testcase 484:
CREATE FOREIGN TABLE sensor_tbl_nsc (
  time timestamp with time zone,
  device text,
  line text,
  sensor text,
  value int
) SERVER server1 OPTIONS (table 'sensor', tags 'device');
--Testcase 485:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.297985+09', 'D01', 'L01', 'A32', 1);
--Testcase 486:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.319444+09', 'D02', 'L02', 'A31', 2);
--Testcase 487:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.325517+09', 'D03', 'L03', 'Alarm', 3);
--Testcase 488:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.331317+09', 'D04', 'L04', 'PS5A_PS2', 4);
--Testcase 489:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.336539+09', 'D05', 'L05', '^PS5A_PS2', 5);
--Testcase 490:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.341984+09', 'D06', 'L06', 'PS5A_PS2$', 6);
--Testcase 491:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.347979+09', 'D07', 'L07', '^PS5A_PS2$', 7);
--Testcase 492:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.353777+09', 'D08', 'L08', '_PS5A_PS2_', 8);
--Testcase 493:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.361595+09', 'D09', 'L09', '%PS5A%PS2%', 9);
--Testcase 494:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.368482+09', 'D10', 'L10', '\^$.|?aBc*+()[{', 10);
--Testcase 585:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.297985+09', 'D11', 'L11', 'A32\%', 11);
--Testcase 700:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.297988+09', 'D12', 'L12', '\%', 12);
--Testcase 701:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.297998+09', 'D13', 'L13', '%', 13);
--Testcase 495:
SELECT * FROM sensor_tbl;
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(13 rows)

-- Test LIKE pattern matching (case sensitive)
--Testcase 496:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'A%';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^A(.*)/))
(3 rows)

--Testcase 497:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'A%';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
(4 rows)

--Testcase 498:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%PS2';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)PS2$/))
(3 rows)

--Testcase 499:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%PS2';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
(2 rows)

--Testcase 500:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%A%';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)A(.*)/))
(3 rows)

--Testcase 501:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%A%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(10 rows)

--Testcase 502:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'PS5A_PS2';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^PS5A(.{1})PS2$/))
(3 rows)

--Testcase 503:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'PS5A_PS2';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
(1 row)

--Testcase 504:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'PS5A\_PS2';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^PS5A_PS2$/))
(3 rows)

--Testcase 505:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'PS5A\_PS2';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
(1 row)

--Testcase 506:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '^PS5A_PS2';
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\^PS5A(.{1})PS2$/))
(3 rows)

--Testcase 507:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '^PS5A_PS2';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
(1 row)

--Testcase 508:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '^PS5A\_PS2';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\^PS5A_PS2$/))
(3 rows)

--Testcase 509:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '^PS5A\_PS2';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
(1 row)

--Testcase 560:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '^PS5A_PS2$';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\^PS5A(.{1})PS2\$$/))
(3 rows)

--Testcase 561:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '^PS5A_PS2$';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
(1 row)

--Testcase 562:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '_PS5A_PS2_';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^(.{1})PS5A(.{1})PS2(.{1})$/))
(3 rows)

--Testcase 563:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '_PS5A_PS2_';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(3 rows)

--Testcase 564:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\_PS5A\_PS2\_';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^_PS5A_PS2_$/))
(3 rows)

--Testcase 565:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\_PS5A\_PS2\_';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
(1 row)

--Testcase 566:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%PS5A%PS2%';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)PS5A(.*)PS2(.*)/))
(3 rows)

--Testcase 567:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%PS5A%PS2%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(6 rows)

--Testcase 568:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%PS5A%PS2\%';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)PS5A(.*)PS2\%$/))
(3 rows)

--Testcase 569:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%PS5A%PS2\%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 570:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\%PS5A%PS2%';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\%PS5A(.*)PS2(.*)/))
(3 rows)

--Testcase 571:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\%PS5A%PS2%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 572:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\%PS5A\%PS2\%';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\%PS5A\%PS2\%$/))
(3 rows)

--Testcase 573:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\%PS5A\%PS2\%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 574:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\%PS5A\%PS2\%';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\%PS5A\%PS2\%$/))
(3 rows)

--Testcase 575:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\%PS5A\%PS2\%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 576:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\\^$.|?aBc*+()[{';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\\\^\$\.\|\?aBc\*\+\(\)\[\{$/))
(3 rows)

--Testcase 577:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\\^$.|?aBc*+()[{';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(1 row)

--Testcase 581:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~~ 'A%';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^A(.*)/))
(3 rows)

--Testcase 582:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~~ 'A%';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
(4 rows)

--Testcase 586:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'A32\\\%';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^A32\\\%$/))
(3 rows)

--Testcase 587:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'A32\\\%';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
(1 row)

--Testcase 588:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'A32\\%';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^A32\\(.*)/))
(3 rows)

--Testcase 589:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE 'A32\\%';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
(1 row)

--Testcase 702:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\%';
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\%$/))
(3 rows)

--Testcase 703:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\%';
            time            |       tags        |                    fields                     
----------------------------+-------------------+-----------------------------------------------
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
(1 row)

--Testcase 704:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\\%';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\\(.*)/))
(3 rows)

--Testcase 705:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\\%';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(2 rows)

--Testcase 706:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\\\%';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\\\%$/))
(3 rows)

--Testcase 707:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '\\\%';
            time            |       tags        |                     fields                      
----------------------------+-------------------+-------------------------------------------------
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
(1 row)

--Testcase 708:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%';
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)/))
(3 rows)

--Testcase 709:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(13 rows)

--Testcase 710:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '__PS5A__PS2__' ESCAPE '_';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^_PS5A_PS2_$/))
(3 rows)

--Testcase 711:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '__PS5A__PS2__' ESCAPE '_';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
(1 row)

--Testcase 712:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '^^PS5A^_PS2' ESCAPE '^';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^\^PS5A_PS2$/))
(3 rows)

--Testcase 713:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '^^PS5A^_PS2' ESCAPE '^';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
(1 row)

--Testcase 714:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%%';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)(.*)/))
(3 rows)

--Testcase 715:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%%';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(13 rows)

--Testcase 716:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%_%';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)(.{1})(.*)/))
(3 rows)

--Testcase 717:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%_%';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(13 rows)

--Testcase 718:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%2_';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)2(.{1})$/))
(3 rows)

--Testcase 719:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%2_';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(4 rows)

--Testcase 720:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%c_+%{';
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)c(.{1})\+(.*)\{$/))
(3 rows)

--Testcase 720:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' LIKE '%c_+%{';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(1 row)

--Testcase 721:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl
WHERE time between '2024-10-18 14:44:24.297985+09' and '2024-10-18 14:44:24.341984+09'
AND tags->>'device' = 'D02' AND (fields->>'value')::int <> 0
AND fields->>'sensor' LIKE 'A%';
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE ((time >= '2024-10-18 14:44:24.297985')) AND ((time <= '2024-10-18 14:44:24.341984')) AND (("sensor" =~ /^A(.*)/)) AND (("device" = 'D02')) AND (("value" <> 0))
(3 rows)

--Testcase 722:
SELECT * FROM sensor_tbl
WHERE time between '2024-10-18 14:44:24.297985+09' and '2024-10-18 14:44:24.341984+09'
AND tags->>'device' = 'D02' AND (fields->>'value')::int <> 0
AND fields->>'sensor' LIKE 'A%';
 time | tags | fields 
------+------+--------
(0 rows)

--Testcase 723:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl
WHERE time between '2024-10-18 14:44:24.297985+09' and '2024-10-18 14:44:24.341984+09'
AND tags->>'device' = 'D02' AND (fields->>'value')::int <> 0
AND fields->>'sensor' LIKE 'A';
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE ((time >= '2024-10-18 14:44:24.297985')) AND ((time <= '2024-10-18 14:44:24.341984')) AND (("sensor" =~ /^A$/)) AND (("device" = 'D02')) AND (("value" <> 0))
(3 rows)

--Testcase 724:
SELECT * FROM sensor_tbl
WHERE time between '2024-10-18 14:44:24.297985+09' and '2024-10-18 14:44:24.341984+09'
AND tags->>'device' = 'D02' AND (fields->>'value')::int <> 0
AND fields->>'sensor' LIKE 'A';
 time | tags | fields 
------+------+--------
(0 rows)

-- Test LIKE pattern un-matching (case sensitive)
--Testcase 579:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT LIKE 'A%';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /^A(.*)/))
(3 rows)

--Testcase 580:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT LIKE 'A%';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(9 rows)

--Testcase 583:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' !~~ 'A%';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /^A(.*)/))
(3 rows)

--Testcase 584:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' !~~ 'A%';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(9 rows)

-- Test ILIKE pattern matching (case insensitive)
--Testcase 594:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE 'a3%';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^a3(.*)/))
(3 rows)

--Testcase 595:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE 'a3%';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
(3 rows)

--Testcase 881:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE 'PS5A_PS2';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^PS5A(.{1})PS2$/))
(3 rows)

--Testcase 882:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE 'PS5A_PS2';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
(1 row)

--Testcase 883:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE 'PS5A\_PS2';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^PS5A_PS2$/))
(3 rows)

--Testcase 884:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE 'PS5A\_PS2';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
(1 row)

--Testcase 885:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '^PS5A_PS2';
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^\^PS5A(.{1})PS2$/))
(3 rows)

--Testcase 886:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '^PS5A_PS2';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
(1 row)

--Testcase 887:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '^PS5A\_PS2';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^\^PS5A_PS2$/))
(3 rows)

--Testcase 888:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '^PS5A\_PS2';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
(1 row)

--Testcase 889:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '^PS5A_PS2$';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^\^PS5A(.{1})PS2\$$/))
(3 rows)

--Testcase 890:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '^PS5A_PS2$';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
(1 row)

--Testcase 891:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '_PS5A_PS2_';
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^(.{1})PS5A(.{1})PS2(.{1})$/))
(3 rows)

--Testcase 892:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '_PS5A_PS2_';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(3 rows)

--Testcase 893:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '\_PS5A\_PS2\_';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^_PS5A_PS2_$/))
(3 rows)

--Testcase 894:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ILIKE '\_PS5A\_PS2\_';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
(1 row)

--Testcase 590:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~~* 'a3%';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^a3(.*)/))
(3 rows)

--Testcase 591:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~~* 'a3%';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
(3 rows)

-- Test ILIKE pattern un-matching (case insensitive)
--Testcase 596:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE 'a3%';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^a3(.*)/))
(3 rows)

--Testcase 597:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE 'a3%';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(10 rows)

--Testcase 895:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE 'PS5A_PS2';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^PS5A(.{1})PS2$/))
(3 rows)

--Testcase 896:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE 'PS5A_PS2';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(12 rows)

--Testcase 897:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE 'PS5A\_PS2';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^PS5A_PS2$/))
(3 rows)

--Testcase 898:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE 'PS5A\_PS2';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(12 rows)

--Testcase 899:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '^PS5A_PS2';
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^\^PS5A(.{1})PS2$/))
(3 rows)

--Testcase 900:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '^PS5A_PS2';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(12 rows)

--Testcase 901:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '^PS5A\_PS2';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^\^PS5A_PS2$/))
(3 rows)

--Testcase 902:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '^PS5A\_PS2';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(12 rows)

--Testcase 903:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '^PS5A_PS2$';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^\^PS5A(.{1})PS2\$$/))
(3 rows)

--Testcase 904:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '^PS5A_PS2$';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(12 rows)

--Testcase 905:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '_PS5A_PS2_';
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^(.{1})PS5A(.{1})PS2(.{1})$/))
(3 rows)

--Testcase 906:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '_PS5A_PS2_';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(10 rows)

--Testcase 907:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '\_PS5A\_PS2\_';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^_PS5A_PS2_$/))
(3 rows)

--Testcase 908:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' NOT ILIKE '\_PS5A\_PS2\_';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(12 rows)

--Testcase 592:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' !~~* 'a3%';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^a3(.*)/))
(3 rows)

--Testcase 593:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' !~~* 'a3%';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(10 rows)

-- Test REGEX operators
-- Test REGEX pattern matching (case sensitive)
--Testcase 725:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^A(.*)';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^A(.*)/))
(3 rows)

--Testcase 726:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^A(.*)';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
(4 rows)

--Testcase 727:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(.*)PS2$';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)PS2$/))
(3 rows)

--Testcase 728:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(.*)PS2$';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
(2 rows)

--Testcase 729:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(.*)A(.*)';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.*)A(.*)/))
(3 rows)

--Testcase 730:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(.*)A(.*)';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(10 rows)

--Testcase 731:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'PS5A(.{1})PS2';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /PS5A(.{1})PS2/))
(3 rows)

--Testcase 732:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'PS5A(.{1})PS2';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(6 rows)

--Testcase 733:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'PS5A\_PS2s';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /PS5A\_PS2s/))
(3 rows)

--Testcase 734:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'PS5A\_PS2';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
(5 rows)

--Testcase 735:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^PS5A(.{1})PS2';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^PS5A(.{1})PS2/))
(3 rows)

--Testcase 736:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^PS5A(.{1})PS2';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
(2 rows)

--Testcase 737:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^PS5A\_PS2';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^PS5A\_PS2/))
(3 rows)

--Testcase 738:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^PS5A\_PS2';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
(2 rows)

--Testcase 739:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^PS5A(.{1})PS2$';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^PS5A(.{1})PS2$/))
(3 rows)

--Testcase 740:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^PS5A(.{1})PS2$';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
(1 row)

--Testcase 741:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(.{1})PS5A(.{1})PS2(.{1})';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(.{1})PS5A(.{1})PS2(.{1})/))
(3 rows)

--Testcase 742:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(.{1})PS5A(.{1})PS2(.{1})';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(3 rows)

--Testcase 743:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\_PS5A\_PS2\_';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\_PS5A\_PS2\_/))
(3 rows)

--Testcase 744:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\_PS5A\_PS2\_';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
(1 row)

--Testcase 745:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '%PS5A%PS2%';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /%PS5A%PS2%/))
(3 rows)

--Testcase 746:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '%PS5A%PS2%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 747:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '%PS5A%PS2\%';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /%PS5A%PS2\%/))
(3 rows)

--Testcase 748:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '%PS5A%PS2\%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 749:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\%PS5A%PS2%';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\%PS5A%PS2%/))
(3 rows)

--Testcase 750:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\%PS5A%PS2%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 751:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\%PS5A\%PS2\%';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\%PS5A\%PS2\%/))
(3 rows)

--Testcase 752:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\%PS5A\%PS2\%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 753:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\%PS5A\%PS2\%';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\%PS5A\%PS2\%/))
(3 rows)

--Testcase 754:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\%PS5A\%PS2\%';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(1 row)

--Testcase 755:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'A32\\\%';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /A32\\\%/))
(3 rows)

--Testcase 756:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'A32\\\%';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
(1 row)

--Testcase 757:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^A32\\(.*)';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^A32\\(.*)/))
(3 rows)

--Testcase 758:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^A32\\(.*)';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
(1 row)

-- Test REGEX pattern un-matching (case sensitive)
--Testcase 759:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' !~ '^A(.*)';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /^A(.*)/))
(3 rows)

--Testcase 760:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' !~ '^A(.*)';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(9 rows)

-- Test REGEX pattern matching (case insensitive)
--Testcase 761:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~* '^a3(.*)';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)^a3(.*)/))
(3 rows)

--Testcase 762:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~* '^a3(.*)';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
(3 rows)

-- Test REGEX pattern un-matching (case insensitive)
--Testcase 763:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' !~* '^a3(.*)';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" !~ /(?i)^a3(.*)/))
(3 rows)

--Testcase 764:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' !~* '^a3(.*)';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
(10 rows)

-- Test mix of REGEX patterns
--Testcase 765:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^A(.*)' AND fields->>'sensor' !~ '^A3(.*)' ;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^A(.*)/)) AND (("sensor" !~ /^A3(.*)/))
(3 rows)

--Testcase 766:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^A(.*)' AND fields->>'sensor' !~ '^A3(.*)' ;
            time            |       tags        |                      fields                      
----------------------------+-------------------+--------------------------------------------------
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
(1 row)

-- Test REGEX syntax
--Testcase 767:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.397988+09', 'D14', 'L14', 'grey', 14);
--Testcase 768:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.397998+09', 'D15', 'L15', 'gray', 15);
--Testcase 769:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.497988+09', 'D16', 'L16', 'grey
1234', 16);
--Testcase 770:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.597988+09', 'D17', 'L17', 'color', 17);
--Testcase 771:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.697988+09', 'D18', 'L18', 'colour', 18);
--Testcase 772:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.797988+09', 'D19', 'L19', 'colouur', 19);
--Testcase 773:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.897988+09', 'D20', 'L20', 'colr', 20);
--Testcase 774:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:24.997988+09', 'D21', 'L21', 'c ol or', 21);
-- Characters
-- Backslash escapes one metacharacter, '^' is a metacharacter, use backslash to escape it.
--Testcase 775:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\^PS5A_PS2';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\^PS5A_PS2/))
(3 rows)

--Testcase 776:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\^PS5A_PS2';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
(2 rows)

-- Character Classes or Character Sets
-- [abc] character class
--Testcase 777:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'gr[ae]y';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /gr[ae]y/))
(3 rows)

--Testcase 778:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'gr[ae]y';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
(3 rows)

-- [^abc] negated character class
--Testcase 779:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'gr[^e]y';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /gr[^e]y/))
(3 rows)

--Testcase 780:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'gr[^e]y';
            time            |       tags        |                      fields                      
----------------------------+-------------------+--------------------------------------------------
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
(1 row)

-- [a-z] character class range
--Testcase 781:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[a-z]';
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[a-z]/))
(3 rows)

--Testcase 782:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[a-z]';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(10 rows)

-- Perl Character Classes (all ASCII-only)
-- \d digits ([0-9])
--Testcase 783:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\d';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\d/))
(3 rows)

--Testcase 784:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\d';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
(10 rows)

--Testcase 785:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[0-9]';
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[0-9]/))
(3 rows)

--Testcase 786:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[0-9]';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
(10 rows)

-- \D not digits ([^0-9])
--Testcase 787:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\D';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\D/))
(3 rows)

--Testcase 788:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\D';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(21 rows)

--Testcase 789:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[^0-9]';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[^0-9]/))
(3 rows)

--Testcase 790:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[^0-9]';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(21 rows)

-- \s whitespace ([\t\n\f\r ])
--Testcase 791:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\s';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\s/))
(3 rows)

--Testcase 792:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\s';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(2 rows)

--Testcase 793:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[\t\n\f\r ]';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[\t\n\f\r ]/))
(3 rows)

--Testcase 794:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[\t\n\f\r ]';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(2 rows)

-- \S not whitespace (≡ [^\t\n\f\r ])
--Testcase 795:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\S';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\S/))
(3 rows)

--Testcase 796:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\S';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(21 rows)

--Testcase 797:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[^\t\n\f\r ]';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[^\t\n\f\r ]/))
(3 rows)

--Testcase 798:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[^\t\n\f\r ]';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(21 rows)

-- \w word characters (≡ [0-9A-Za-z_])
--Testcase 799:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\w';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\w/))
(3 rows)

--Testcase 800:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\w';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(19 rows)

--Testcase 801:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[0-9A-Za-z_]';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[0-9A-Za-z_]/))
(3 rows)

--Testcase 802:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[0-9A-Za-z_]';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(19 rows)

-- \W not word characters (≡ [^0-9A-Za-z_])
--Testcase 803:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\W';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\W/))
(3 rows)

--Testcase 804:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\W';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(10 rows)

--Testcase 805:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[^0-9A-Za-z_]';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[^0-9A-Za-z_]/))
(3 rows)

--Testcase 806:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[^0-9A-Za-z_]';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.297988 | {"device": "D12"} | {"line": "L12", "value": "12", "sensor": "\\%"}
 2024-10-18 05:44:24.297998 | {"device": "D13"} | {"line": "L13", "value": "13", "sensor": "%"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(10 rows)

-- ASCII character classes
-- [[:alpha:]]	alphabetic (≡ [A-Za-z])
--Testcase 807:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[[:alpha:]]';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..213.00 rows=213 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[[:alpha:]]/))
(3 rows)

--Testcase 808:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[[:alpha:]]';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(19 rows)

-- [[:alnum:]] alphanumeric (≡ [0-9A-Za-z])
--Testcase 809:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[[:alnum:]]';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..213.00 rows=213 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /[[:alnum:]]/))
(3 rows)

--Testcase 810:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '[[:alnum:]]';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(19 rows)

-- Dot
-- . (dot; any character)
--Testcase 811:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '.A';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /.A/))
(3 rows)

--Testcase 812:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '.A';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(6 rows)

-- . with line break character
--Testcase 813:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '.\n';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /.\n/))
(3 rows)

--Testcase 814:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '.\n';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
(1 row)

-- Anchors
-- ^ (start of string/line)
--Testcase 815:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^A';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /^A/))
(3 rows)

--Testcase 816:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '^A';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
(4 rows)

-- $ (end of string/line)
--Testcase 817:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'S2$';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /S2$/))
(3 rows)

--Testcase 818:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'S2$';
            time            |       tags        |                        fields                        
----------------------------+-------------------+------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
(2 rows)

--  \A (start of string)
--Testcase 819:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\AA';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\AA/))
(3 rows)

--Testcase 820:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\AA';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
(4 rows)

-- \b at ASCII word boundary (\w on one side and \W, \A, or \z on the other)
--Testcase 821:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\bA';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\bA/))
(3 rows)

--Testcase 822:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\bA';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
(4 rows)

-- \B not at ASCII word boundary
--Testcase 823:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\BA';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\BA/))
(3 rows)

--Testcase 824:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\BA';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(6 rows)

-- \m matches only at the beginning of a word - not supported by InfluxDB
--Testcase 825:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\mA';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /\mA/))
(3 rows)

--Testcase 826:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '\mA';
ERROR:  influxdb_fdw : error parsing query: error parsing regexp: invalid escape sequence: `\m` at line 1, char 43
-- \M matches only at the end of a word - not supported by InfluxDB
--Testcase 827:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'y\M';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /y\M/))
(3 rows)

--Testcase 828:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'y\M';
ERROR:  influxdb_fdw : error parsing query: error parsing regexp: invalid escape sequence: `\M` at line 1, char 43
-- Alternation
-- | (alternation)
--Testcase 829:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'gray|grey';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /gray|grey/))
(3 rows)

--Testcase 830:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'gray|grey';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
(3 rows)

-- Quantifiers
-- ? (0 or 1)
--Testcase 831:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou?r';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou?r/))
(3 rows)

--Testcase 832:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou?r';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
(2 rows)

-- * (0 or more)
--Testcase 833:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou*r';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou*r/))
(3 rows)

--Testcase 834:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou*r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(3 rows)

--Testcase 835:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'u*r';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..341.00 rows=341 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /u*r/))
(3 rows)

--Testcase 836:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'u*r';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.397988 | {"device": "D14"} | {"line": "L14", "value": "14", "sensor": "grey"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
 2024-10-18 05:44:24.997988 | {"device": "D21"} | {"line": "L21", "value": "21", "sensor": "c ol or"}
(9 rows)

-- + (1 or more)
--Testcase 837:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou+r';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou+r/))
(3 rows)

--Testcase 838:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou+r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(2 rows)

-- {n} (exactly n)
--Testcase 839:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{1}r';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou{1}r/))
(3 rows)

--Testcase 840:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{1}r';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
(1 row)

--Testcase 841:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{2}r';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou{2}r/))
(3 rows)

--Testcase 842:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{2}r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(1 row)

-- {n,m} (between n and m)
--Testcase 843:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{0,2}r';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou{0,2}r/))
(3 rows)

--Testcase 844:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{0,2}r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(3 rows)

-- {n,} (n or more)
--Testcase 845:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{1,}r';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou{1,}r/))
(3 rows)

--Testcase 846:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{1,}r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(2 rows)

-- *? zero or more, prefer fewer
--Testcase 847:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou*?r';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou*?r/))
(3 rows)

--Testcase 848:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou*?r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(3 rows)

-- +? one or more, prefer fewer
--Testcase 849:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou+?r';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou+?r/))
(3 rows)

--Testcase 850:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou+?r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(2 rows)

-- ?? zero or one, prefer zero
--Testcase 851:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou??r';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou??r/))
(3 rows)

--Testcase 852:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou??r';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
(2 rows)

-- {n,m}? n or n+1 or ... or m, prefer fewer
--Testcase 853:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{0,2}?r';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou{0,2}?r/))
(3 rows)

--Testcase 854:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{0,2}?r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(3 rows)

-- {n,}? n or more, prefer fewer
--Testcase 855:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{0,}?r';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /colou{0,}?r/))
(3 rows)

--Testcase 856:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'colou{0,}?r';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.597988 | {"device": "D17"} | {"line": "L17", "value": "17", "sensor": "color"}
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(3 rows)

-- Grouping and Backreferences
-- (regex) (numbered capturing group)
--Testcase 857:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'col(ou)?r';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..1.00 rows=1 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /col(ou)?r/))
(3 rows)

--Testcase 858:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ 'col(ou)?r';
            time            |       tags        |                       fields                       
----------------------------+-------------------+----------------------------------------------------
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.897988 | {"device": "D20"} | {"line": "L20", "value": "20", "sensor": "colr"}
(2 rows)

-- (?:regex) non-capturing group
--Testcase 859:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?:ou)';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..68.00 rows=68 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?:ou)/))
(3 rows)

--Testcase 860:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?:ou)';
            time            |       tags        |                       fields                        
----------------------------+-------------------+-----------------------------------------------------
 2024-10-18 05:44:24.697988 | {"device": "D18"} | {"line": "L18", "value": "18", "sensor": "colour"}
 2024-10-18 05:44:24.797988 | {"device": "D19"} | {"line": "L19", "value": "19", "sensor": "colouur"}
(2 rows)

-- Modifiers
-- (?flags)regex set flags within current group; non-capturing
-- i	case-insensitive (default false)
--Testcase 861:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?i)a';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..341.00 rows=341 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?i)a/))
(3 rows)

--Testcase 862:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?i)a';
            time            |       tags        |                            fields                            
----------------------------+-------------------+--------------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
 2024-10-18 05:44:24.368482 | {"device": "D10"} | {"line": "L10", "value": "10", "sensor": "\\^$.|?aBc*+()[{"}
 2024-10-18 05:44:24.397998 | {"device": "D15"} | {"line": "L15", "value": "15", "sensor": "gray"}
(12 rows)

-- m multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false)
--Testcase 863:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?m)1';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..341.00 rows=341 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?m)1/))
(3 rows)

--Testcase 864:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?m)1';
            time            |       tags        |                         fields                         
----------------------------+-------------------+--------------------------------------------------------
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.497988 | {"device": "D16"} | {"line": "L16", "value": "16", "sensor": "grey\n1234"}
(2 rows)

-- s let . match \n (default false)
--Testcase 865:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?s)A';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..341.00 rows=341 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /(?s)A/))
(3 rows)

--Testcase 866:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?s)A';
            time            |       tags        |                        fields                         
----------------------------+-------------------+-------------------------------------------------------
 2024-10-18 05:44:24.297985 | {"device": "D01"} | {"line": "L01", "value": "1", "sensor": "A32"}
 2024-10-18 05:44:24.297985 | {"device": "D11"} | {"line": "L11", "value": "11", "sensor": "A32\\%"}
 2024-10-18 05:44:24.319444 | {"device": "D02"} | {"line": "L02", "value": "2", "sensor": "A31"}
 2024-10-18 05:44:24.325517 | {"device": "D03"} | {"line": "L03", "value": "3", "sensor": "Alarm"}
 2024-10-18 05:44:24.331317 | {"device": "D04"} | {"line": "L04", "value": "4", "sensor": "PS5A_PS2"}
 2024-10-18 05:44:24.336539 | {"device": "D05"} | {"line": "L05", "value": "5", "sensor": "^PS5A_PS2"}
 2024-10-18 05:44:24.341984 | {"device": "D06"} | {"line": "L06", "value": "6", "sensor": "PS5A_PS2$"}
 2024-10-18 05:44:24.347979 | {"device": "D07"} | {"line": "L07", "value": "7", "sensor": "^PS5A_PS2$"}
 2024-10-18 05:44:24.353777 | {"device": "D08"} | {"line": "L08", "value": "8", "sensor": "_PS5A_PS2_"}
 2024-10-18 05:44:24.361595 | {"device": "D09"} | {"line": "L09", "value": "9", "sensor": "%PS5A%PS2%"}
(10 rows)

-- U ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) -- Not supported by PostgreSQL
--Testcase 867:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?U)color';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 868:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?U)color';
ERROR:  invalid regular expression: invalid embedded option
-- (?flags:re) set flags during re; non-capturing -- Not supported by Postgres
--Testcase 869:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?i:a)';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 870:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?i:a)';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 871:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?m:a)';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 872:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?m:a';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 873:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?s:A)';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 874:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?s:A)';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 875:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?U:color)';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 876:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?U:color)';
ERROR:  invalid regular expression: invalid embedded option
-- (?P=name) (Python-style named backreference) - Not supported by Postgres
--Testcase 877:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?P=color)';
ERROR:  invalid regular expression: invalid embedded option
--Testcase 878:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '(?P=color)';
ERROR:  invalid regular expression: invalid embedded option
-- backreferences - not supported by InfluxDB
--Testcase 881:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:22.897988+09', 'D22', 'L22', 'axaxax', 22);
--Testcase 882:
INSERT INTO sensor_tbl_nsc (time, device, line, sensor, value) values ('2024-10-18 14:44:23.997988+09', 'D23', 'L23', 'bxbxbx', 23);
-- \1 match the first capturing group. For example ([ab])x\1x\1 matches axaxa, bxbxb.
--Testcase 879:
EXPLAIN VERBOSE
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '([ab])x\1';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.sensor_tbl  (cost=10.00..43.00 rows=43 width=72)
   Output: "time", tags, fields
   InfluxDB query: SELECT * FROM "sensor" WHERE (("sensor" =~ /([ab])x\1/))
(3 rows)

--Testcase 880:
SELECT * FROM sensor_tbl WHERE fields->>'sensor' ~ '([ab])x\1';
ERROR:  influxdb_fdw : error parsing query: error parsing regexp: invalid escape sequence: `\1` at line 1, char 43
-- clean-up
--Testcase 578:
DELETE FROM sensor_tbl;
--Testcase 205:
DROP USER MAPPING FOR CURRENT_USER SERVER server1;
--Testcase 202:
DROP SERVER server1 CASCADE;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to foreign table cpu
drop cascades to foreign table numbers
drop cascades to foreign table t3
drop cascades to foreign table t4
drop cascades to foreign table tx
drop cascades to foreign table tmp_time
drop cascades to foreign table tmp_time_nsc
drop cascades to foreign table sensor_tbl
drop cascades to foreign table sensor_tbl_nsc
--Testcase 203:
DROP EXTENSION influxdb_fdw;
