\set ECHO none
--Testcase 51:
CREATE EXTENSION influxdb_fdw;
--Testcase 52:
CREATE SERVER influxdb_svr FOREIGN DATA WRAPPER influxdb_fdw
  OPTIONS (dbname 'coredb', :SERVER);
--Testcase 53:
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr OPTIONS (:AUTHENTICATION);
-- import time column as timestamp and text type
-- IMPORT FOREIGN SCHEMA influxdb_schema FROM SERVER influxdb_svr INTO public;
--
-- LIMIT
-- Check the LIMIT/OFFSET feature of SELECT
--
--Testcase 54:
CREATE FOREIGN TABLE onek (
	fields jsonb OPTIONS (fields 'true')
) SERVER influxdb_svr OPTIONS (schemaless 'true');
--Testcase 55:
CREATE FOREIGN TABLE int8_tbl(fields jsonb OPTIONS (fields 'true')) SERVER influxdb_svr OPTIONS (schemaless 'true');
--Testcase 56:
CREATE FOREIGN TABLE tenk1 (
	fields jsonb OPTIONS (fields 'true')
) SERVER influxdb_svr OPTIONS (table 'tenk', schemaless 'true');
--Testcase 1:
SELECT ''::text AS two, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek WHERE (fields->>'unique1')::int4 > 50
		ORDER BY (fields->>'unique1')::int4 LIMIT 2;
 two | unique1 | unique2 | stringu1 
-----+---------+---------+----------
     |      51 |      76 | ZBAAAA
     |      52 |     985 | ACAAAA
(2 rows)

--Testcase 2:
SELECT ''::text AS five, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek WHERE (fields->>'unique1')::int4 > 60
		ORDER BY (fields->>'unique1')::int4 LIMIT 5;
 five | unique1 | unique2 | stringu1 
------+---------+---------+----------
      |      61 |     560 | JCAAAA
      |      62 |     633 | KCAAAA
      |      63 |     296 | LCAAAA
      |      64 |     479 | MCAAAA
      |      65 |      64 | NCAAAA
(5 rows)

--Testcase 3:
SELECT ''::text AS two, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek WHERE (fields->>'unique1')::int4 > 60 AND (fields->>'unique1')::int4 < 63
		ORDER BY (fields->>'unique1')::int4 LIMIT 5;
 two | unique1 | unique2 | stringu1 
-----+---------+---------+----------
     |      61 |     560 | JCAAAA
     |      62 |     633 | KCAAAA
(2 rows)

--Testcase 4:
SELECT ''::text AS three, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek WHERE (fields->>'unique1')::int4 > 100
		ORDER BY (fields->>'unique1')::int4 LIMIT 3 OFFSET 20;
 three | unique1 | unique2 | stringu1 
-------+---------+---------+----------
       |     121 |     700 | REAAAA
       |     122 |     519 | SEAAAA
       |     123 |     777 | TEAAAA
(3 rows)

--Testcase 5:
SELECT ''::text AS zero, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek WHERE (fields->>'unique1')::int4 < 50
		ORDER BY (fields->>'unique1')::int4 DESC LIMIT 8 OFFSET 99;
 zero | unique1 | unique2 | stringu1 
------+---------+---------+----------
(0 rows)

--Testcase 6:
SELECT ''::text AS eleven, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek WHERE (fields->>'unique1')::int4 < 50
		ORDER BY (fields->>'unique1')::int4 DESC LIMIT 20 OFFSET 39;
 eleven | unique1 | unique2 | stringu1 
--------+---------+---------+----------
        |      10 |     520 | KAAAAA
        |       9 |      49 | JAAAAA
        |       8 |     653 | IAAAAA
        |       7 |     647 | HAAAAA
        |       6 |     978 | GAAAAA
        |       5 |     541 | FAAAAA
        |       4 |     833 | EAAAAA
        |       3 |     431 | DAAAAA
        |       2 |     326 | CAAAAA
        |       1 |     214 | BAAAAA
        |       0 |     998 | AAAAAA
(11 rows)

--Testcase 7:
SELECT ''::text AS ten, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek
		ORDER BY (fields->>'unique1')::int4 OFFSET 990;
 ten | unique1 | unique2 | stringu1 
-----+---------+---------+----------
     |     990 |     369 | CMAAAA
     |     991 |     426 | DMAAAA
     |     992 |     363 | EMAAAA
     |     993 |     661 | FMAAAA
     |     994 |     695 | GMAAAA
     |     995 |     144 | HMAAAA
     |     996 |     258 | IMAAAA
     |     997 |      21 | JMAAAA
     |     998 |     549 | KMAAAA
     |     999 |     152 | LMAAAA
(10 rows)

--Testcase 8:
SELECT ''::text AS five, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek
		ORDER BY (fields->>'unique1')::int4 OFFSET 990 LIMIT 5;
 five | unique1 | unique2 | stringu1 
------+---------+---------+----------
      |     990 |     369 | CMAAAA
      |     991 |     426 | DMAAAA
      |     992 |     363 | EMAAAA
      |     993 |     661 | FMAAAA
      |     994 |     695 | GMAAAA
(5 rows)

--Testcase 9:
SELECT ''::text AS five, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek
		ORDER BY (fields->>'unique1')::int4 LIMIT 5 OFFSET 900;
 five | unique1 | unique2 | stringu1 
------+---------+---------+----------
      |     900 |     913 | QIAAAA
      |     901 |     931 | RIAAAA
      |     902 |     702 | SIAAAA
      |     903 |     641 | TIAAAA
      |     904 |     793 | UIAAAA
(5 rows)

-- Test null limit and offset.  The planner would discard a simple null
-- constant, so to ensure executor is exercised, do this:
--Testcase 10:
select * from int8_tbl limit (case when random() < 0.5 then null::bigint end);
                        fields                         
-------------------------------------------------------
 {"q1": "123", "q2": "456"}
 {"q1": "123", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "123"}
 {"q1": "4567890123456789", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "-4567890123456789"}
(5 rows)

--Testcase 11:
select * from int8_tbl offset (case when random() < 0.5 then null::bigint end);
                        fields                         
-------------------------------------------------------
 {"q1": "123", "q2": "456"}
 {"q1": "123", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "123"}
 {"q1": "4567890123456789", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "-4567890123456789"}
(5 rows)

-- Test assorted cases involving backwards fetch from a LIMIT plan node
begin;
declare c1 scroll cursor for select * from int8_tbl limit 10;
--Testcase 12:
fetch all in c1;
                        fields                         
-------------------------------------------------------
 {"q1": "123", "q2": "456"}
 {"q1": "123", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "123"}
 {"q1": "4567890123456789", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "-4567890123456789"}
(5 rows)

--Testcase 13:
fetch 1 in c1;
 fields 
--------
(0 rows)

--Testcase 14:
fetch backward 1 in c1;
                        fields                         
-------------------------------------------------------
 {"q1": "4567890123456789", "q2": "-4567890123456789"}
(1 row)

--Testcase 15:
fetch backward all in c1;
                        fields                        
------------------------------------------------------
 {"q1": "4567890123456789", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "123"}
 {"q1": "123", "q2": "4567890123456789"}
 {"q1": "123", "q2": "456"}
(4 rows)

--Testcase 16:
fetch backward 1 in c1;
 fields 
--------
(0 rows)

--Testcase 17:
fetch all in c1;
                        fields                         
-------------------------------------------------------
 {"q1": "123", "q2": "456"}
 {"q1": "123", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "123"}
 {"q1": "4567890123456789", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "-4567890123456789"}
(5 rows)

declare c2 scroll cursor for select * from int8_tbl limit 3;
--Testcase 18:
fetch all in c2;
                 fields                  
-----------------------------------------
 {"q1": "123", "q2": "456"}
 {"q1": "123", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "123"}
(3 rows)

--Testcase 19:
fetch 1 in c2;
 fields 
--------
(0 rows)

--Testcase 20:
fetch backward 1 in c2;
                 fields                  
-----------------------------------------
 {"q1": "4567890123456789", "q2": "123"}
(1 row)

--Testcase 21:
fetch backward all in c2;
                 fields                  
-----------------------------------------
 {"q1": "123", "q2": "4567890123456789"}
 {"q1": "123", "q2": "456"}
(2 rows)

--Testcase 22:
fetch backward 1 in c2;
 fields 
--------
(0 rows)

--Testcase 23:
fetch all in c2;
                 fields                  
-----------------------------------------
 {"q1": "123", "q2": "456"}
 {"q1": "123", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "123"}
(3 rows)

declare c3 scroll cursor for select * from int8_tbl offset 3;
--Testcase 24:
fetch all in c3;
                        fields                         
-------------------------------------------------------
 {"q1": "4567890123456789", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "-4567890123456789"}
(2 rows)

--Testcase 25:
fetch 1 in c3;
 fields 
--------
(0 rows)

--Testcase 26:
fetch backward 1 in c3;
                        fields                         
-------------------------------------------------------
 {"q1": "4567890123456789", "q2": "-4567890123456789"}
(1 row)

--Testcase 27:
fetch backward all in c3;
                        fields                        
------------------------------------------------------
 {"q1": "4567890123456789", "q2": "4567890123456789"}
(1 row)

--Testcase 28:
fetch backward 1 in c3;
 fields 
--------
(0 rows)

--Testcase 29:
fetch all in c3;
                        fields                         
-------------------------------------------------------
 {"q1": "4567890123456789", "q2": "4567890123456789"}
 {"q1": "4567890123456789", "q2": "-4567890123456789"}
(2 rows)

declare c4 scroll cursor for select * from int8_tbl offset 10;
--Testcase 30:
fetch all in c4;
 fields 
--------
(0 rows)

--Testcase 31:
fetch 1 in c4;
 fields 
--------
(0 rows)

--Testcase 32:
fetch backward 1 in c4;
 fields 
--------
(0 rows)

--Testcase 33:
fetch backward all in c4;
 fields 
--------
(0 rows)

--Testcase 34:
fetch backward 1 in c4;
 fields 
--------
(0 rows)

--Testcase 35:
fetch all in c4;
 fields 
--------
(0 rows)

declare c5 scroll cursor for select * from int8_tbl order by (fields->>'q1')::int8 fetch first 2 rows with ties;
ERROR:  syntax error at or near "with"
LINE 1: ...order by (fields->>'q1')::int8 fetch first 2 rows with ties;
                                                             ^
--Testcase 57:
fetch all in c5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
--Testcase 58:
fetch 1 in c5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
--Testcase 59:
fetch backward 1 in c5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
--Testcase 60:
fetch backward 1 in c5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
--Testcase 61:
fetch all in c5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
--Testcase 62:
fetch backward all in c5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
--Testcase 63:
fetch all in c5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
--Testcase 64:
fetch backward all in c5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- Stress test for variable LIMIT in conjunction with bounded-heap sorting
--Testcase 65:
CREATE FOREIGN TABLE generate_series4(fields jsonb OPTIONS (fields 'true')) SERVER influxdb_svr OPTIONS (schemaless 'true');
--Testcase 36:
SELECT
  (SELECT (fields->>'a')::int a
     FROM (VALUES (1)) AS x,
          (SELECT (fields->>'a')::int a FROM generate_series4 AS n
             ORDER BY (fields->>'a')::int LIMIT 1 OFFSET (s.fields->>'a')::int - 1) AS y) AS z
  FROM generate_series4 AS s;
 z  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

--
-- Test behavior of volatile and set-returning functions in conjunction
-- with ORDER BY and LIMIT.
--
--Testcase 66:
create temp sequence testseq;
--Testcase 37:
explain (verbose, costs off)
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, nextval('testseq')
  from tenk1 order by (fields->>'unique2')::int4 limit 10;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), (nextval('testseq'::regclass))
   ->  Result
         Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), nextval('testseq'::regclass)
         ->  Sort
               Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer)
               Sort Key: (((tenk1.fields ->> 'unique2'::text))::integer)
               ->  Foreign Scan on public.tenk1
                     Output: ((fields ->> 'unique1'::text))::integer, ((fields ->> 'unique2'::text))::integer
                     InfluxDB query: SELECT "unique1", "unique2" FROM "tenk"
(10 rows)

--Testcase 38:
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, nextval('testseq')
  from tenk1 order by (fields->>'unique2')::int4 limit 10;
 unique1 | unique2 | nextval 
---------+---------+---------
    8800 |       0 |       1
    1891 |       1 |       2
    3420 |       2 |       3
    9850 |       3 |       4
    7164 |       4 |       5
    8009 |       5 |       6
    5057 |       6 |       7
    6701 |       7 |       8
    4321 |       8 |       9
    3043 |       9 |      10
(10 rows)

--Testcase 39:
select currval('testseq');
 currval 
---------
      10
(1 row)

--Testcase 40:
explain (verbose, costs off)
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, nextval('testseq')
  from tenk1 order by (fields->>'tenthous')::int4 limit 10;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), (nextval('testseq'::regclass)), (((fields ->> 'tenthous'::text))::integer)
   ->  Result
         Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), nextval('testseq'::regclass), (((fields ->> 'tenthous'::text))::integer)
         ->  Sort
               Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), (((fields ->> 'tenthous'::text))::integer)
               Sort Key: (((tenk1.fields ->> 'tenthous'::text))::integer)
               ->  Foreign Scan on public.tenk1
                     Output: ((fields ->> 'unique1'::text))::integer, ((fields ->> 'unique2'::text))::integer, ((fields ->> 'tenthous'::text))::integer
                     InfluxDB query: SELECT "unique1", "unique2", "tenthous" FROM "tenk"
(10 rows)

--Testcase 41:
select(fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, nextval('testseq')
  from tenk1 order by (fields->>'tenthous')::int4 limit 10;
 unique1 | unique2 | nextval 
---------+---------+---------
       0 |    9998 |      11
       1 |    2838 |      12
       2 |    2716 |      13
       3 |    5679 |      14
       4 |    1621 |      15
       5 |    5557 |      16
       6 |    2855 |      17
       7 |    8518 |      18
       8 |    5435 |      19
       9 |    4463 |      20
(10 rows)

--Testcase 42:
select currval('testseq');
 currval 
---------
      20
(1 row)

--Testcase 43:
explain (verbose, costs off)
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, generate_series(1,10)
  from tenk1 order by (fields->>'unique2')::int4 limit 7;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), (generate_series(1, 10))
   ->  ProjectSet
         Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), generate_series(1, 10)
         ->  Sort
               Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer)
               Sort Key: (((tenk1.fields ->> 'unique2'::text))::integer)
               ->  Foreign Scan on public.tenk1
                     Output: ((fields ->> 'unique1'::text))::integer, ((fields ->> 'unique2'::text))::integer
                     InfluxDB query: SELECT "unique1", "unique2" FROM "tenk"
(10 rows)

--Testcase 44:
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, generate_series(1,10)
  from tenk1 order by (fields->>'unique2')::int4 limit 7;
 unique1 | unique2 | generate_series 
---------+---------+-----------------
    8800 |       0 |               1
    8800 |       0 |               2
    8800 |       0 |               3
    8800 |       0 |               4
    8800 |       0 |               5
    8800 |       0 |               6
    8800 |       0 |               7
(7 rows)

--Testcase 45:
explain (verbose, costs off)
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, generate_series(1,10)
  from tenk1 order by (fields->>'tenthous')::int4 limit 7;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), (generate_series(1, 10)), (((fields ->> 'tenthous'::text))::integer)
   ->  ProjectSet
         Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), generate_series(1, 10), (((fields ->> 'tenthous'::text))::integer)
         ->  Sort
               Output: (((fields ->> 'unique1'::text))::integer), (((fields ->> 'unique2'::text))::integer), (((fields ->> 'tenthous'::text))::integer)
               Sort Key: (((tenk1.fields ->> 'tenthous'::text))::integer)
               ->  Foreign Scan on public.tenk1
                     Output: ((fields ->> 'unique1'::text))::integer, ((fields ->> 'unique2'::text))::integer, ((fields ->> 'tenthous'::text))::integer
                     InfluxDB query: SELECT "unique1", "unique2", "tenthous" FROM "tenk"
(10 rows)

--Testcase 46:
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, generate_series(1,10)
  from tenk1 order by (fields->>'tenthous')::int4 limit 7;
 unique1 | unique2 | generate_series 
---------+---------+-----------------
       0 |    9998 |               1
       0 |    9998 |               2
       0 |    9998 |               3
       0 |    9998 |               4
       0 |    9998 |               5
       0 |    9998 |               6
       0 |    9998 |               7
(7 rows)

-- use of random() is to keep planner from folding the expressions together
--Testcase 47:
explain (verbose, costs off)
select generate_series(0,2) as s1, generate_series((random()*.1)::int,2) as s2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 ProjectSet
   Output: generate_series(0, 2), generate_series(((random() * '0.1'::double precision))::integer, 2)
   ->  Result
(3 rows)

--Testcase 48:
select generate_series(0,2) as s1, generate_series((random()*.1)::int,2) as s2;
 s1 | s2 
----+----
  0 |  0
  1 |  1
  2 |  2
(3 rows)

--Testcase 49:
explain (verbose, costs off)
select generate_series(0,2) as s1, generate_series((random()*.1)::int,2) as s2
order by s2 desc;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort
   Output: (generate_series(0, 2)), (generate_series(((random() * '0.1'::double precision))::integer, 2))
   Sort Key: (generate_series(((random() * '0.1'::double precision))::integer, 2)) DESC
   ->  ProjectSet
         Output: generate_series(0, 2), generate_series(((random() * '0.1'::double precision))::integer, 2)
         ->  Result
(6 rows)

--Testcase 50:
select generate_series(0,2) as s1, generate_series((random()*.1)::int,2) as s2
order by s2 desc;
 s1 | s2 
----+----
  2 |  2
  1 |  1
  0 |  0
(3 rows)

-- test for failure to set all aggregates' aggtranstype
--Testcase 67:
explain (verbose, costs off)
select sum((fields->>'tenthous')::int4) as s1, sum((fields->>'tenthous')::int4) + random()*0 as s2
  from tenk1 group by fields->>'thousand' order by (fields->>'thousand')::int4 limit 3;
                                                                                                                         QUERY PLAN                                                                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (sum(((fields ->> 'tenthous'::text))::integer)), ((((sum(((fields ->> 'tenthous'::text))::integer)))::double precision + (random() * '0'::double precision))), ((((fields ->> 'thousand'::text)))::integer), ((fields ->> 'thousand'::text))
   ->  Result
         Output: (sum(((fields ->> 'tenthous'::text))::integer)), (((sum(((fields ->> 'tenthous'::text))::integer)))::double precision + (random() * '0'::double precision)), ((((fields ->> 'thousand'::text)))::integer), ((fields ->> 'thousand'::text))
         ->  Sort
               Output: (sum(((fields ->> 'tenthous'::text))::integer)), ((((fields ->> 'thousand'::text)))::integer), ((fields ->> 'thousand'::text))
               Sort Key: ((((tenk1.fields ->> 'thousand'::text)))::integer)
               ->  HashAggregate
                     Output: sum(((fields ->> 'tenthous'::text))::integer), (((fields ->> 'thousand'::text)))::integer, ((fields ->> 'thousand'::text))
                     Group Key: (tenk1.fields ->> 'thousand'::text)
                     ->  Foreign Scan on public.tenk1
                           Output: (fields ->> 'thousand'::text), fields
                           InfluxDB query: SELECT * FROM "tenk"
(13 rows)

--Testcase 68:
select sum((fields->>'tenthous')::int4) as s1, sum((fields->>'tenthous')::int4) + random()*0 as s2
  from tenk1 group by fields->>'thousand' order by (fields->>'thousand')::int4 limit 3;
  s1   |  s2   
-------+-------
 45000 | 45000
 45010 | 45010
 45020 | 45020
(3 rows)

--
-- FETCH FIRST
-- Check the WITH TIES clause
--
--Testcase 69:
SELECT  (fields->>'thousand')::int4 thousand
		FROM onek WHERE (fields->>'thousand')::int4 < 5
		ORDER BY (fields->>'thousand')::int4 FETCH FIRST 2 ROW WITH TIES;
ERROR:  syntax error at or near "WITH"
LINE 3: ... BY (fields->>'thousand')::int4 FETCH FIRST 2 ROW WITH TIES;
                                                             ^
--Testcase 70:
SELECT  (fields->>'thousand')::int4 thousand
		FROM onek WHERE (fields->>'thousand')::int4 < 5
		ORDER BY (fields->>'thousand')::int4 FETCH FIRST ROWS WITH TIES;
ERROR:  syntax error at or near "WITH"
LINE 3: ...R BY (fields->>'thousand')::int4 FETCH FIRST ROWS WITH TIES;
                                                             ^
--Testcase 71:
SELECT  (fields->>'thousand')::int4 thousand
		FROM onek WHERE (fields->>'thousand')::int4 < 5
		ORDER BY (fields->>'thousand')::int4 FETCH FIRST 1 ROW WITH TIES;
ERROR:  syntax error at or near "WITH"
LINE 3: ... BY (fields->>'thousand')::int4 FETCH FIRST 1 ROW WITH TIES;
                                                             ^
--Testcase 72:
SELECT  (fields->>'thousand')::int4 thousand
		FROM onek WHERE (fields->>'thousand')::int4 < 5
		ORDER BY (fields->>'thousand')::int4 FETCH FIRST 2 ROW ONLY;
 thousand 
----------
        0
        0
(2 rows)

-- should fail
--Testcase 73:
SELECT ''::text AS two, (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2, (fields->>'stringu1')::name stringu1
		FROM onek WHERE (fields->>'unique1')::int4 > 50
		FETCH FIRST 2 ROW WITH TIES;
ERROR:  syntax error at or near "WITH"
LINE 3:   FETCH FIRST 2 ROW WITH TIES;
                            ^
-- test ruleutils
--Testcase 74:
CREATE VIEW limit_thousand_v_1 AS SELECT (fields->>'thousand')::int4 thousand FROM onek WHERE (fields->>'thousand')::int4 < 995
		ORDER BY (fields->>'thousand')::int4 FETCH FIRST 5 ROWS WITH TIES OFFSET 10;
ERROR:  syntax error at or near "WITH"
LINE 2: ...BY (fields->>'thousand')::int4 FETCH FIRST 5 ROWS WITH TIES ...
                                                             ^
--Testcase 75:
\d+ limit_thousand_v_1
--Testcase 76:
CREATE VIEW limit_thousand_v_2 AS SELECT (fields->>'thousand')::int4 thousand FROM onek WHERE (fields->>'thousand')::int4 < 995
		ORDER BY (fields->>'thousand')::int4 OFFSET 10 FETCH FIRST 5 ROWS ONLY;
--Testcase 77:
\d+ limit_thousand_v_2
                      View "public.limit_thousand_v_2"
  Column  |  Type   | Collation | Nullable | Default | Storage | Description 
----------+---------+-----------+----------+---------+---------+-------------
 thousand | integer |           |          |         | plain   | 
View definition:
 SELECT (onek.fields ->> 'thousand'::text)::integer AS thousand
   FROM onek
  WHERE ((onek.fields ->> 'thousand'::text)::integer) < 995
  ORDER BY ((onek.fields ->> 'thousand'::text)::integer)
 OFFSET 10
 LIMIT 5;

--Testcase 78:
CREATE VIEW limit_thousand_v_3 AS SELECT (fields->>'thousand')::int4 thousand FROM onek WHERE (fields->>'thousand')::int4 < 995
		ORDER BY (fields->>'thousand')::int4 FETCH FIRST NULL ROWS WITH TIES;		-- fails
ERROR:  syntax error at or near "WITH"
LINE 2: ...(fields->>'thousand')::int4 FETCH FIRST NULL ROWS WITH TIES;
                                                             ^
--Testcase 79:
CREATE VIEW limit_thousand_v_3 AS SELECT (fields->>'thousand')::int4 thousand FROM onek WHERE (fields->>'thousand')::int4 < 995
		ORDER BY (fields->>'thousand')::int4 FETCH FIRST (NULL+1) ROWS WITH TIES;
ERROR:  syntax error at or near "WITH"
LINE 2: ...lds->>'thousand')::int4 FETCH FIRST (NULL+1) ROWS WITH TIES;
                                                             ^
--Testcase 80:
\d+ limit_thousand_v_3
--Testcase 81:
CREATE VIEW limit_thousand_v_4 AS SELECT (fields->>'thousand')::int4 thousand FROM onek WHERE (fields->>'thousand')::int4 < 995
		ORDER BY (fields->>'thousand')::int4 FETCH FIRST NULL ROWS ONLY;
--Testcase 82:
\d+ limit_thousand_v_4
                      View "public.limit_thousand_v_4"
  Column  |  Type   | Collation | Nullable | Default | Storage | Description 
----------+---------+-----------+----------+---------+---------+-------------
 thousand | integer |           |          |         | plain   | 
View definition:
 SELECT (onek.fields ->> 'thousand'::text)::integer AS thousand
   FROM onek
  WHERE ((onek.fields ->> 'thousand'::text)::integer) < 995
  ORDER BY ((onek.fields ->> 'thousand'::text)::integer)
 LIMIT ALL;

-- leave these views
--Testcase 83:
DROP VIEW limit_thousand_v_1;
ERROR:  view "limit_thousand_v_1" does not exist
--Testcase 84:
DROP VIEW limit_thousand_v_2;
--Testcase 85:
DROP VIEW limit_thousand_v_3;
ERROR:  view "limit_thousand_v_3" does not exist
--Testcase 86:
DROP VIEW limit_thousand_v_4;
-- Clean up
DO $d$
declare
  l_rec record;
begin
  for l_rec in (select foreign_table_schema, foreign_table_name 
                from information_schema.foreign_tables) loop
     execute format('drop foreign table %I.%I cascade;', l_rec.foreign_table_schema, l_rec.foreign_table_name);
  end loop;
end;
$d$;
--Testcase 87:
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr;
--Testcase 88:
DROP SERVER influxdb_svr CASCADE;
--Testcase 89:
DROP EXTENSION influxdb_fdw;
