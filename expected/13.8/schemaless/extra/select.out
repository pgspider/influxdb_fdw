--
-- SELECT
--
\set ECHO none
--Testcase 52:
CREATE EXTENSION influxdb_fdw;
--Testcase 53:
CREATE SERVER influxdb_svr FOREIGN DATA WRAPPER influxdb_fdw
  OPTIONS (dbname 'coredb', :SERVER);
--Testcase 54:
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr OPTIONS (:AUTHENTICATION);
--Testcase 55:
CREATE FOREIGN TABLE onek (
  fields jsonb OPTIONS (fields 'true')
) SERVER influxdb_svr OPTIONS (schemaless 'true');
--Testcase 56:
CREATE FOREIGN TABLE onek2 (
  fields jsonb OPTIONS (fields 'true')
) SERVER influxdb_svr OPTIONS (table 'onek', schemaless 'true');
--Testcase 57:
CREATE FOREIGN TABLE INT8_TBL (
  fields jsonb OPTIONS (fields 'true')
) SERVER influxdb_svr OPTIONS (schemaless 'true');
--Testcase 58:
CREATE FOREIGN TABLE person (
  fields jsonb OPTIONS (fields 'true')
) SERVER influxdb_svr OPTIONS (schemaless 'true');
--Testcase 59:
CREATE FOREIGN TABLE emp (
	fields jsonb OPTIONS (fields 'true')
) INHERITS (person) SERVER influxdb_svr OPTIONS (schemaless 'true');
NOTICE:  merging column "fields" with inherited definition
--Testcase 60:
CREATE FOREIGN TABLE student (
	fields jsonb OPTIONS (fields 'true')
) INHERITS (person) SERVER influxdb_svr OPTIONS (schemaless 'true');
NOTICE:  merging column "fields" with inherited definition
--Testcase 61:
CREATE FOREIGN TABLE stud_emp (
	fields jsonb OPTIONS (fields 'true')
) INHERITS (emp, student) SERVER influxdb_svr OPTIONS (schemaless 'true');
NOTICE:  merging multiple inherited definitions of column "fields"
NOTICE:  merging column "fields" with inherited definition
-- btree index
-- awk '{if($1<10){print;}else{next;}}' onek.data | sort +0n -1
--
--Testcase 1:
SELECT * FROM onek
   WHERE (onek.fields->>'unique1')::int4 < 10
   ORDER BY (onek.fields->>'unique1')::int4;
                                                                                                                                   fields                                                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"odd": "0", "ten": "0", "two": "0", "even": "1", "four": "0", "twenty": "0", "hundred": "0", "string4": "OOOOxx", "unique1": "0", "unique2": "998", "stringu1": "AAAAAA", "stringu2": "KMBAAA", "tenthous": "0", "thousand": "0", "fivethous": "0", "twothousand": "0"}
 {"odd": "2", "ten": "1", "two": "1", "even": "3", "four": "1", "twenty": "1", "hundred": "1", "string4": "OOOOxx", "unique1": "1", "unique2": "214", "stringu1": "BAAAAA", "stringu2": "GIAAAA", "tenthous": "1", "thousand": "1", "fivethous": "1", "twothousand": "1"}
 {"odd": "4", "ten": "2", "two": "0", "even": "5", "four": "2", "twenty": "2", "hundred": "2", "string4": "OOOOxx", "unique1": "2", "unique2": "326", "stringu1": "CAAAAA", "stringu2": "OMAAAA", "tenthous": "2", "thousand": "2", "fivethous": "2", "twothousand": "2"}
 {"odd": "6", "ten": "3", "two": "1", "even": "7", "four": "3", "twenty": "3", "hundred": "3", "string4": "VVVVxx", "unique1": "3", "unique2": "431", "stringu1": "DAAAAA", "stringu2": "PQAAAA", "tenthous": "3", "thousand": "3", "fivethous": "3", "twothousand": "3"}
 {"odd": "8", "ten": "4", "two": "0", "even": "9", "four": "0", "twenty": "4", "hundred": "4", "string4": "HHHHxx", "unique1": "4", "unique2": "833", "stringu1": "EAAAAA", "stringu2": "BGBAAA", "tenthous": "4", "thousand": "4", "fivethous": "4", "twothousand": "4"}
 {"odd": "10", "ten": "5", "two": "1", "even": "11", "four": "1", "twenty": "5", "hundred": "5", "string4": "HHHHxx", "unique1": "5", "unique2": "541", "stringu1": "FAAAAA", "stringu2": "VUAAAA", "tenthous": "5", "thousand": "5", "fivethous": "5", "twothousand": "5"}
 {"odd": "12", "ten": "6", "two": "0", "even": "13", "four": "2", "twenty": "6", "hundred": "6", "string4": "OOOOxx", "unique1": "6", "unique2": "978", "stringu1": "GAAAAA", "stringu2": "QLBAAA", "tenthous": "6", "thousand": "6", "fivethous": "6", "twothousand": "6"}
 {"odd": "14", "ten": "7", "two": "1", "even": "15", "four": "3", "twenty": "7", "hundred": "7", "string4": "VVVVxx", "unique1": "7", "unique2": "647", "stringu1": "HAAAAA", "stringu2": "XYAAAA", "tenthous": "7", "thousand": "7", "fivethous": "7", "twothousand": "7"}
 {"odd": "16", "ten": "8", "two": "0", "even": "17", "four": "0", "twenty": "8", "hundred": "8", "string4": "HHHHxx", "unique1": "8", "unique2": "653", "stringu1": "IAAAAA", "stringu2": "DZAAAA", "tenthous": "8", "thousand": "8", "fivethous": "8", "twothousand": "8"}
 {"odd": "18", "ten": "9", "two": "1", "even": "19", "four": "1", "twenty": "9", "hundred": "9", "string4": "HHHHxx", "unique1": "9", "unique2": "49", "stringu1": "JAAAAA", "stringu2": "XBAAAA", "tenthous": "9", "thousand": "9", "fivethous": "9", "twothousand": "9"}
(10 rows)

--
-- awk '{if($1<20){print $1,$14;}else{next;}}' onek.data | sort +0nr -1
--
--Testcase 2:
SELECT (onek.fields->>'unique1')::int4 unique1, (onek.fields->>'stringu1')::name stringu1 FROM onek
   WHERE (onek.fields->>'unique1')::int4 < 20
   ORDER BY (onek.fields->>'unique1')::int4 using >;
 unique1 | stringu1 
---------+----------
      19 | TAAAAA
      18 | SAAAAA
      17 | RAAAAA
      16 | QAAAAA
      15 | PAAAAA
      14 | OAAAAA
      13 | NAAAAA
      12 | MAAAAA
      11 | LAAAAA
      10 | KAAAAA
       9 | JAAAAA
       8 | IAAAAA
       7 | HAAAAA
       6 | GAAAAA
       5 | FAAAAA
       4 | EAAAAA
       3 | DAAAAA
       2 | CAAAAA
       1 | BAAAAA
       0 | AAAAAA
(20 rows)

--
-- awk '{if($1>980){print $1,$14;}else{next;}}' onek.data | sort +1d -2
--
--Testcase 3:
SELECT (onek.fields->>'unique1')::int4 unique1, (onek.fields->>'stringu1')::name stringu1 FROM onek
   WHERE (onek.fields->>'unique1')::int4 > 980
   ORDER BY (fields->>'stringu1')::name using <;
 unique1 | stringu1 
---------+----------
     988 | AMAAAA
     989 | BMAAAA
     990 | CMAAAA
     991 | DMAAAA
     992 | EMAAAA
     993 | FMAAAA
     994 | GMAAAA
     995 | HMAAAA
     996 | IMAAAA
     997 | JMAAAA
     998 | KMAAAA
     999 | LMAAAA
     981 | TLAAAA
     982 | ULAAAA
     983 | VLAAAA
     984 | WLAAAA
     985 | XLAAAA
     986 | YLAAAA
     987 | ZLAAAA
(19 rows)

--
-- awk '{if($1>980){print $1,$16;}else{next;}}' onek.data |
-- sort +1d -2 +0nr -1
--
--Testcase 4:
SELECT (onek.fields->>'unique1')::int4 unique1, (onek.fields->>'string4')::name string4 FROM onek
   WHERE (onek.fields->>'unique1')::int4 > 980
   ORDER BY (fields->>'string4')::name using <, (fields->>'unique1')::int4 using >;
 unique1 | string4 
---------+---------
     999 | AAAAxx
     995 | AAAAxx
     983 | AAAAxx
     982 | AAAAxx
     981 | AAAAxx
     998 | HHHHxx
     997 | HHHHxx
     993 | HHHHxx
     990 | HHHHxx
     986 | HHHHxx
     996 | OOOOxx
     991 | OOOOxx
     988 | OOOOxx
     987 | OOOOxx
     985 | OOOOxx
     994 | VVVVxx
     992 | VVVVxx
     989 | VVVVxx
     984 | VVVVxx
(19 rows)

--
-- awk '{if($1>980){print $1,$16;}else{next;}}' onek.data |
-- sort +1dr -2 +0n -1
--
--Testcase 5:
SELECT (onek.fields->>'unique1')::int4 unique1, (onek.fields->>'string4')::name string4 FROM onek
   WHERE (onek.fields->>'unique1')::int4 > 980
   ORDER BY (fields->>'string4')::name using >, (fields->>'unique1')::int4 using <;
 unique1 | string4 
---------+---------
     984 | VVVVxx
     989 | VVVVxx
     992 | VVVVxx
     994 | VVVVxx
     985 | OOOOxx
     987 | OOOOxx
     988 | OOOOxx
     991 | OOOOxx
     996 | OOOOxx
     986 | HHHHxx
     990 | HHHHxx
     993 | HHHHxx
     997 | HHHHxx
     998 | HHHHxx
     981 | AAAAxx
     982 | AAAAxx
     983 | AAAAxx
     995 | AAAAxx
     999 | AAAAxx
(19 rows)

--
-- awk '{if($1<20){print $1,$16;}else{next;}}' onek.data |
-- sort +0nr -1 +1d -2
--
--Testcase 6:
SELECT (onek.fields->>'unique1')::int4 unique1, (onek.fields->>'string4')::name string4 FROM onek
   WHERE (onek.fields->>'unique1')::int4 < 20
   ORDER BY (fields->>'unique1')::int4 using >, (fields->>'string4')::name using <;
 unique1 | string4 
---------+---------
      19 | OOOOxx
      18 | VVVVxx
      17 | HHHHxx
      16 | OOOOxx
      15 | VVVVxx
      14 | AAAAxx
      13 | OOOOxx
      12 | AAAAxx
      11 | OOOOxx
      10 | AAAAxx
       9 | HHHHxx
       8 | HHHHxx
       7 | VVVVxx
       6 | OOOOxx
       5 | HHHHxx
       4 | HHHHxx
       3 | VVVVxx
       2 | OOOOxx
       1 | OOOOxx
       0 | OOOOxx
(20 rows)

--
-- awk '{if($1<20){print $1,$16;}else{next;}}' onek.data |
-- sort +0n -1 +1dr -2
--
--Testcase 7:
SELECT (onek.fields->>'unique1')::int4 unique1, (onek.fields->>'string4')::name string4 FROM onek
   WHERE (onek.fields->>'unique1')::int4 < 20
   ORDER BY (fields->>'unique1')::int4 using <, (fields->>'string4')::name using >;
 unique1 | string4 
---------+---------
       0 | OOOOxx
       1 | OOOOxx
       2 | OOOOxx
       3 | VVVVxx
       4 | HHHHxx
       5 | HHHHxx
       6 | OOOOxx
       7 | VVVVxx
       8 | HHHHxx
       9 | HHHHxx
      10 | AAAAxx
      11 | OOOOxx
      12 | AAAAxx
      13 | OOOOxx
      14 | AAAAxx
      15 | VVVVxx
      16 | OOOOxx
      17 | HHHHxx
      18 | VVVVxx
      19 | OOOOxx
(20 rows)

--
-- test partial btree indexes
--
-- As of 7.2, planner probably won't pick an indexscan without stats,
-- so ANALYZE first.  Also, we want to prevent it from picking a bitmapscan
-- followed by sort, because that could hide index ordering problems.
--
-- ANALYZE onek2;
SET enable_seqscan TO off;
SET enable_bitmapscan TO off;
SET enable_sort TO off;
--
-- awk '{if($1<10){print $0;}else{next;}}' onek.data | sort +0n -1
--
--Testcase 8:
SELECT onek2.* FROM onek2 WHERE (onek2.fields->>'unique1')::int4 < 10 order by 1;
                                                                                                                                   fields                                                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"odd": "0", "ten": "0", "two": "0", "even": "1", "four": "0", "twenty": "0", "hundred": "0", "string4": "OOOOxx", "unique1": "0", "unique2": "998", "stringu1": "AAAAAA", "stringu2": "KMBAAA", "tenthous": "0", "thousand": "0", "fivethous": "0", "twothousand": "0"}
 {"odd": "10", "ten": "5", "two": "1", "even": "11", "four": "1", "twenty": "5", "hundred": "5", "string4": "HHHHxx", "unique1": "5", "unique2": "541", "stringu1": "FAAAAA", "stringu2": "VUAAAA", "tenthous": "5", "thousand": "5", "fivethous": "5", "twothousand": "5"}
 {"odd": "12", "ten": "6", "two": "0", "even": "13", "four": "2", "twenty": "6", "hundred": "6", "string4": "OOOOxx", "unique1": "6", "unique2": "978", "stringu1": "GAAAAA", "stringu2": "QLBAAA", "tenthous": "6", "thousand": "6", "fivethous": "6", "twothousand": "6"}
 {"odd": "14", "ten": "7", "two": "1", "even": "15", "four": "3", "twenty": "7", "hundred": "7", "string4": "VVVVxx", "unique1": "7", "unique2": "647", "stringu1": "HAAAAA", "stringu2": "XYAAAA", "tenthous": "7", "thousand": "7", "fivethous": "7", "twothousand": "7"}
 {"odd": "16", "ten": "8", "two": "0", "even": "17", "four": "0", "twenty": "8", "hundred": "8", "string4": "HHHHxx", "unique1": "8", "unique2": "653", "stringu1": "IAAAAA", "stringu2": "DZAAAA", "tenthous": "8", "thousand": "8", "fivethous": "8", "twothousand": "8"}
 {"odd": "18", "ten": "9", "two": "1", "even": "19", "four": "1", "twenty": "9", "hundred": "9", "string4": "HHHHxx", "unique1": "9", "unique2": "49", "stringu1": "JAAAAA", "stringu2": "XBAAAA", "tenthous": "9", "thousand": "9", "fivethous": "9", "twothousand": "9"}
 {"odd": "2", "ten": "1", "two": "1", "even": "3", "four": "1", "twenty": "1", "hundred": "1", "string4": "OOOOxx", "unique1": "1", "unique2": "214", "stringu1": "BAAAAA", "stringu2": "GIAAAA", "tenthous": "1", "thousand": "1", "fivethous": "1", "twothousand": "1"}
 {"odd": "4", "ten": "2", "two": "0", "even": "5", "four": "2", "twenty": "2", "hundred": "2", "string4": "OOOOxx", "unique1": "2", "unique2": "326", "stringu1": "CAAAAA", "stringu2": "OMAAAA", "tenthous": "2", "thousand": "2", "fivethous": "2", "twothousand": "2"}
 {"odd": "6", "ten": "3", "two": "1", "even": "7", "four": "3", "twenty": "3", "hundred": "3", "string4": "VVVVxx", "unique1": "3", "unique2": "431", "stringu1": "DAAAAA", "stringu2": "PQAAAA", "tenthous": "3", "thousand": "3", "fivethous": "3", "twothousand": "3"}
 {"odd": "8", "ten": "4", "two": "0", "even": "9", "four": "0", "twenty": "4", "hundred": "4", "string4": "HHHHxx", "unique1": "4", "unique2": "833", "stringu1": "EAAAAA", "stringu2": "BGBAAA", "tenthous": "4", "thousand": "4", "fivethous": "4", "twothousand": "4"}
(10 rows)

--
-- awk '{if($1<20){print $1,$14;}else{next;}}' onek.data | sort +0nr -1
--
--Testcase 9:
SELECT (onek2.fields->>'unique1')::int4 unique1, (onek2.fields->>'stringu1')::name stringu1 FROM onek2
    WHERE (onek2.fields->>'unique1')::int4 < 20
    ORDER BY (fields->>'unique1')::int4 using >;
 unique1 | stringu1 
---------+----------
      19 | TAAAAA
      18 | SAAAAA
      17 | RAAAAA
      16 | QAAAAA
      15 | PAAAAA
      14 | OAAAAA
      13 | NAAAAA
      12 | MAAAAA
      11 | LAAAAA
      10 | KAAAAA
       9 | JAAAAA
       8 | IAAAAA
       7 | HAAAAA
       6 | GAAAAA
       5 | FAAAAA
       4 | EAAAAA
       3 | DAAAAA
       2 | CAAAAA
       1 | BAAAAA
       0 | AAAAAA
(20 rows)

--
-- awk '{if($1>980){print $1,$14;}else{next;}}' onek.data | sort +1d -2
--
--Testcase 10:
SELECT (onek2.fields->>'unique1')::int4 unique1, (onek2.fields->>'stringu1')::name stringu1 FROM onek2
   WHERE (onek2.fields->>'unique1')::int4 > 980 order by 1;
 unique1 | stringu1 
---------+----------
     981 | TLAAAA
     982 | ULAAAA
     983 | VLAAAA
     984 | WLAAAA
     985 | XLAAAA
     986 | YLAAAA
     987 | ZLAAAA
     988 | AMAAAA
     989 | BMAAAA
     990 | CMAAAA
     991 | DMAAAA
     992 | EMAAAA
     993 | FMAAAA
     994 | GMAAAA
     995 | HMAAAA
     996 | IMAAAA
     997 | JMAAAA
     998 | KMAAAA
     999 | LMAAAA
(19 rows)

RESET enable_seqscan;
RESET enable_bitmapscan;
RESET enable_sort;
--Testcase 11:
SELECT (fields->>'two')::int4 two, (fields->>'stringu1')::name stringu1, (fields->>'ten')::int4 ten, (fields->>'string4')::name string4
   INTO TABLE tmp
   FROM onek;
--
-- awk '{print $1,$2;}' person.data |
-- awk '{if(NF!=2){print $3,$2;}else{print;}}' - emp.data |
-- awk '{if(NF!=2){print $3,$2;}else{print;}}' - student.data |
-- awk 'BEGIN{FS="      ";}{if(NF!=2){print $4,$5;}else{print;}}' - stud_emp.data
--
-- SELECT name, age FROM person*; ??? check if different
--Testcase 12:
SELECT p.fields->>'name' "name", (p.fields->>'age')::int4 age FROM person* p;
  name   | age 
---------+-----
 mike    |  40
 joe     |  20
 sally   |  34
 sandra  |  19
 alex    |  30
 sue     |  50
 denise  |  24
 sarah   |  88
 teresa  |  38
 nan     |  28
 leah    |  68
 wendy   |  78
 melissa |  28
 joan    |  18
 mary    |   8
 jane    |  58
 liza    |  38
 jean    |  28
 jenifer |  38
 juanita |  58
 susan   |  78
 zena    |  98
 martie  |  88
 chris   |  78
 pat     |  18
 zola    |  58
 louise  |  98
 edna    |  18
 bertha  |  88
 sumi    |  38
 koko    |  88
 gina    |  18
 rean    |  48
 sharon  |  78
 paula   |  68
 julie   |  68
 belinda |  38
 karen   |  48
 carina  |  58
 diane   |  18
 esther  |  98
 trudy   |  88
 fanny   |   8
 carmen  |  78
 lita    |  25
 pamela  |  48
 sandy   |  38
 trisha  |  88
 uma     |  78
 velma   |  68
 sharon  |  25
 sam     |  30
 bill    |  20
 fred    |  28
 larry   |  60
 jeff    |  23
 cim     |  30
 linda   |  19
(58 rows)

--
-- awk '{print $1,$2;}' person.data |
-- awk '{if(NF!=2){print $3,$2;}else{print;}}' - emp.data |
-- awk '{if(NF!=2){print $3,$2;}else{print;}}' - student.data |
-- awk 'BEGIN{FS="      ";}{if(NF!=1){print $4,$5;}else{print;}}' - stud_emp.data |
-- sort +1nr -2
--
--Testcase 13:
SELECT p.fields->>'name' "name", (p.fields->>'age')::int4 age FROM person* p ORDER BY (fields->>'age')::int4 using >, fields->>'name';
  name   | age 
---------+-----
 esther  |  98
 louise  |  98
 zena    |  98
 bertha  |  88
 koko    |  88
 martie  |  88
 sarah   |  88
 trisha  |  88
 trudy   |  88
 carmen  |  78
 chris   |  78
 sharon  |  78
 susan   |  78
 uma     |  78
 wendy   |  78
 julie   |  68
 leah    |  68
 paula   |  68
 velma   |  68
 larry   |  60
 carina  |  58
 jane    |  58
 juanita |  58
 zola    |  58
 sue     |  50
 karen   |  48
 pamela  |  48
 rean    |  48
 mike    |  40
 belinda |  38
 jenifer |  38
 liza    |  38
 sandy   |  38
 sumi    |  38
 teresa  |  38
 sally   |  34
 alex    |  30
 cim     |  30
 sam     |  30
 fred    |  28
 jean    |  28
 melissa |  28
 nan     |  28
 lita    |  25
 sharon  |  25
 denise  |  24
 jeff    |  23
 bill    |  20
 joe     |  20
 linda   |  19
 sandra  |  19
 diane   |  18
 edna    |  18
 gina    |  18
 joan    |  18
 pat     |  18
 fanny   |   8
 mary    |   8
(58 rows)

--
-- Test some cases involving whole-row Var referencing a subquery
--
--Testcase 14:
select foo from (select 1 offset 0) as foo;
 foo 
-----
 (1)
(1 row)

--Testcase 15:
select foo from (select null offset 0) as foo;
 foo 
-----
 ()
(1 row)

--Testcase 16:
select foo from (select 'xyzzy',1,null offset 0) as foo;
    foo     
------------
 (xyzzy,1,)
(1 row)

--
-- Test VALUES lists
--
--Testcase 17:
select * from onek, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
    WHERE (onek.fields->>'unique1')::int4 = v.i and (onek.fields->>'stringu1')::name = v.j;
                                                                                                                                      fields                                                                                                                                       |  i  |   j    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----+--------
 {"odd": "14", "ten": "7", "two": "1", "even": "15", "four": "3", "twenty": "7", "hundred": "7", "string4": "AAAAxx", "unique1": "147", "unique2": "0", "stringu1": "RFAAAA", "stringu2": "AAAAAA", "tenthous": "147", "thousand": "47", "fivethous": "147", "twothousand": "147"} | 147 | RFAAAA
 {"odd": "2", "ten": "1", "two": "1", "even": "3", "four": "3", "twenty": "11", "hundred": "1", "string4": "HHHHxx", "unique1": "931", "unique2": "1", "stringu1": "VJAAAA", "stringu2": "BAAAAA", "tenthous": "931", "thousand": "31", "fivethous": "431", "twothousand": "131"}  | 931 | VJAAAA
(2 rows)

-- a more complex case
-- looks like we're coding lisp :-)
--Testcase 18:
select * from onek,
  (values ((select i from
    (values(10000), (2), (389), (1000), (2000), ((select 10029))) as foo(i)
    order by i asc limit 1))) bar (i)
  where (onek.fields->>'unique1')::int4 = bar.i;
                                                                                                                                  fields                                                                                                                                  | i 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---
 {"odd": "4", "ten": "2", "two": "0", "even": "5", "four": "2", "twenty": "2", "hundred": "2", "string4": "OOOOxx", "unique1": "2", "unique2": "326", "stringu1": "CAAAAA", "stringu2": "OMAAAA", "tenthous": "2", "thousand": "2", "fivethous": "2", "twothousand": "2"} | 2
(1 row)

-- try VALUES in a subquery
--Testcase 19:
select * from onek
    where ((fields->>'unique1')::int4,(fields->>'ten')::int4) in (values (1,1), (20,0), (99,9), (17,99))
    order by (fields->>'unique1')::int4;
                                                                                                                                      fields                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"odd": "2", "ten": "1", "two": "1", "even": "3", "four": "1", "twenty": "1", "hundred": "1", "string4": "OOOOxx", "unique1": "1", "unique2": "214", "stringu1": "BAAAAA", "stringu2": "GIAAAA", "tenthous": "1", "thousand": "1", "fivethous": "1", "twothousand": "1"}
 {"odd": "0", "ten": "0", "two": "0", "even": "1", "four": "0", "twenty": "0", "hundred": "0", "string4": "OOOOxx", "unique1": "20", "unique2": "306", "stringu1": "UAAAAA", "stringu2": "ULAAAA", "tenthous": "20", "thousand": "20", "fivethous": "20", "twothousand": "20"}
 {"odd": "18", "ten": "9", "two": "1", "even": "19", "four": "3", "twenty": "19", "hundred": "9", "string4": "HHHHxx", "unique1": "99", "unique2": "101", "stringu1": "VDAAAA", "stringu2": "XDAAAA", "tenthous": "99", "thousand": "99", "fivethous": "99", "twothousand": "99"}
(3 rows)

-- VALUES is also legal as a standalone query or a set-operation member
--Testcase 20:
VALUES (1,2), (3,4+4), (7,77.7);
 column1 | column2 
---------+---------
       1 |       2
       3 |       8
       7 |    77.7
(3 rows)

--Testcase 21:
VALUES (1,2), (3,4+4), (7,77.7)
UNION ALL
SELECT 2+2, 57
UNION ALL
SELECT (fields->>'q1')::int8, (fields->>'q2')::int8 FROM int8_tbl;
     column1      |      column2      
------------------+-------------------
                1 |                 2
                3 |                 8
                7 |              77.7
                4 |                57
              123 |               456
              123 |  4567890123456789
 4567890123456789 |               123
 4567890123456789 |  4567890123456789
 4567890123456789 | -4567890123456789
(9 rows)

--
-- Test ORDER BY options
--
--Testcase 62:
CREATE FOREIGN TABLE foo (fields jsonb OPTIONS (fields 'true')) SERVER influxdb_svr OPTIONS (schemaless 'true');
--Testcase 22:
SELECT * FROM foo ORDER BY (fields->>'f1')::int;
    fields    
--------------
 {"f1": "1"}
 {"f1": "3"}
 {"f1": "7"}
 {"f1": "10"}
 {"f1": "42"}
(5 rows)

--Testcase 23:
SELECT * FROM foo ORDER BY (fields->>'f1')::int ASC;	-- same thing
    fields    
--------------
 {"f1": "1"}
 {"f1": "3"}
 {"f1": "7"}
 {"f1": "10"}
 {"f1": "42"}
(5 rows)

--Testcase 24:
SELECT * FROM foo ORDER BY (fields->>'f1')::int NULLS FIRST;
    fields    
--------------
 {"f1": "1"}
 {"f1": "3"}
 {"f1": "7"}
 {"f1": "10"}
 {"f1": "42"}
(5 rows)

--Testcase 25:
SELECT * FROM foo ORDER BY (fields->>'f1')::int DESC;
    fields    
--------------
 {"f1": "42"}
 {"f1": "10"}
 {"f1": "7"}
 {"f1": "3"}
 {"f1": "1"}
(5 rows)

--Testcase 26:
SELECT * FROM foo ORDER BY (fields->>'f1')::int DESC NULLS LAST;
    fields    
--------------
 {"f1": "42"}
 {"f1": "10"}
 {"f1": "7"}
 {"f1": "3"}
 {"f1": "1"}
(5 rows)

-- check if indexscans do the right things
-- CREATE INDEX fooi ON foo (f1);
-- SET enable_sort = false;
-- SELECT * FROM foo ORDER BY f1;
-- SELECT * FROM foo ORDER BY f1 NULLS FIRST;
-- SELECT * FROM foo ORDER BY f1 DESC;
-- SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
-- DROP INDEX fooi;
-- CREATE INDEX fooi ON foo (f1 DESC);
-- SELECT * FROM foo ORDER BY f1;
-- SELECT * FROM foo ORDER BY f1 NULLS FIRST;
-- SELECT * FROM foo ORDER BY f1 DESC;
-- SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
-- DROP INDEX fooi;
-- CREATE INDEX fooi ON foo (f1 DESC NULLS LAST);
-- SELECT * FROM foo ORDER BY f1;
-- SELECT * FROM foo ORDER BY f1 NULLS FIRST;
-- SELECT * FROM foo ORDER BY f1 DESC;
-- SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
--
-- Test planning of some cases with partial indexes
--
-- partial index is usable
--Testcase 27:
explain (costs off)
select * from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name = 'ATAAAA';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((fields ->> 'stringu1'::text))::name = 'ATAAAA'::name)
(2 rows)

--Testcase 28:
select * from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name = 'ATAAAA';
                                                                                                                                      fields                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"odd": "8", "ten": "4", "two": "0", "even": "9", "four": "2", "twenty": "14", "hundred": "4", "string4": "VVVVxx", "unique1": "494", "unique2": "11", "stringu1": "ATAAAA", "stringu2": "LAAAAA", "tenthous": "494", "thousand": "94", "fivethous": "494", "twothousand": "94"}
(1 row)

-- actually run the query with an analyze to use the partial index
--Testcase 63:
explain (costs off, analyze on, timing off, summary off)
select * from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name = 'ATAAAA';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on onek2 (actual rows=1 loops=1)
   Filter: (((fields ->> 'stringu1'::text))::name = 'ATAAAA'::name)
(2 rows)

--Testcase 30:
explain (costs off)
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name = 'ATAAAA';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((fields ->> 'stringu1'::text))::name = 'ATAAAA'::name)
(2 rows)

--Testcase 31:
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name = 'ATAAAA';
 unique2 
---------
      11
(1 row)

-- partial index predicate implies clause, so no need for retest
--Testcase 32:
explain (costs off)
select * from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B';
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((fields ->> 'stringu1'::text))::name < 'B'::name)
(2 rows)

--Testcase 33:
select * from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B';
                                                                                                                                      fields                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"odd": "8", "ten": "4", "two": "0", "even": "9", "four": "2", "twenty": "14", "hundred": "4", "string4": "VVVVxx", "unique1": "494", "unique2": "11", "stringu1": "ATAAAA", "stringu2": "LAAAAA", "tenthous": "494", "thousand": "94", "fivethous": "494", "twothousand": "94"}
(1 row)

--Testcase 34:
explain (costs off)
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B';
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((fields ->> 'stringu1'::text))::name < 'B'::name)
(2 rows)

--Testcase 35:
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B';
 unique2 
---------
      11
(1 row)

-- but if it's an update target, must retest anyway
--Testcase 36:
explain (costs off)
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B' for update;
                             QUERY PLAN                              
---------------------------------------------------------------------
 LockRows
   ->  Foreign Scan on onek2
         Filter: (((fields ->> 'stringu1'::text))::name < 'B'::name)
(3 rows)

--Testcase 37:
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B' for update;
 unique2 
---------
      11
(1 row)

-- partial index is not applicable
--Testcase 38:
explain (costs off)
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'C';
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((fields ->> 'stringu1'::text))::name < 'C'::name)
(2 rows)

--Testcase 39:
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'C';
 unique2 
---------
      11
(1 row)

-- partial index implies clause, but bitmap scan must recheck predicate anyway
SET enable_indexscan TO off;
--Testcase 40:
explain (costs off)
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B';
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((fields ->> 'stringu1'::text))::name < 'B'::name)
(2 rows)

--Testcase 41:
select (fields->>'unique2')::int4 unique2 from onek2 where (fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B';
 unique2 
---------
      11
(1 row)

RESET enable_indexscan;
-- check multi-index cases too
--Testcase 42:
explain (costs off)
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2 from onek2
  where ((fields->>'unique2')::int4 = 11 or (fields->>'unique1')::int4 = 0) and (fields->>'stringu1')::name < 'B';
                          QUERY PLAN                           
---------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((fields ->> 'stringu1'::text))::name < 'B'::name)
(2 rows)

--Testcase 43:
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2 from onek2
  where ((fields->>'unique2')::int4 = 11 or (fields->>'unique1')::int4 = 0) and (fields->>'stringu1')::name < 'B';
 unique1 | unique2 
---------+---------
     494 |      11
       0 |     998
(2 rows)

--Testcase 44:
explain (costs off)
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2 from onek2
  where ((fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B') or (fields->>'unique1')::int4 = 0;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((((fields ->> 'unique2'::text))::integer = 11) AND (((fields ->> 'stringu1'::text))::name < 'B'::name)) OR (((fields ->> 'unique1'::text))::integer = 0))
(2 rows)

--Testcase 45:
select (fields->>'unique1')::int4 unique1, (fields->>'unique2')::int4 unique2 from onek2
  where ((fields->>'unique2')::int4 = 11 and (fields->>'stringu1')::name < 'B') or (fields->>'unique1')::int4 = 0;
 unique1 | unique2 
---------+---------
     494 |      11
       0 |     998
(2 rows)

--
-- Test some corner cases that have been known to confuse the planner
--
-- ORDER BY on a constant doesn't really need any sorting
--Testcase 46:
SELECT 1 AS x ORDER BY x;
 x 
---
 1
(1 row)

-- But ORDER BY on a set-valued expression does
--Testcase 64:
create function sillysrf(int) returns setof int as
  'values (1),(10),(2),($1)' language sql immutable;
--Testcase 47:
select sillysrf(42);
 sillysrf 
----------
        1
       10
        2
       42
(4 rows)

--Testcase 48:
select sillysrf(-1) order by 1;
 sillysrf 
----------
       -1
        1
        2
       10
(4 rows)

--Testcase 65:
drop function sillysrf(int);
-- X = X isn't a no-op, it's effectively X IS NOT NULL assuming = is strict
-- (see bug #5084)
--Testcase 49:
select * from (values (2),(null),(1)) v(k) where k = k order by k;
 k 
---
 1
 2
(2 rows)

--Testcase 50:
select * from (values (2),(null),(1)) v(k) where k = k;
 k 
---
 2
 1
(2 rows)

-- Test partitioned tables with no partitions, which should be handled the
-- same as the non-inheritance case when expanding its RTE.
--Testcase 66:
create table list_parted_tbl (a int,b int) partition by list (a);
--Testcase 67:
create table list_parted_tbl1 partition of list_parted_tbl
  for values in (1) partition by list(b);
--Testcase 51:
explain (costs off) select * from list_parted_tbl;
        QUERY PLAN        
--------------------------
 Result
   One-Time Filter: false
(2 rows)

--Testcase 68:
drop table list_parted_tbl;
-- Clean up:
DROP TABLE IF EXISTS tmp;
--Testcase 69:
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr;
--Testcase 70:
DROP SERVER influxdb_svr CASCADE;
NOTICE:  drop cascades to 8 other objects
DETAIL:  drop cascades to foreign table onek
drop cascades to foreign table onek2
drop cascades to foreign table int8_tbl
drop cascades to foreign table person
drop cascades to foreign table emp
drop cascades to foreign table student
drop cascades to foreign table stud_emp
drop cascades to foreign table foo
--Testcase 71:
DROP EXTENSION influxdb_fdw;
